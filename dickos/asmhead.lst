     1 00000000                                 ; dickos-os boot asm
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [INSTRSET "i486p"]
     5 00000000                                 
     6  = 00000105                              VBEMODE 	EQU		0x105			; 画面模式 1024 * 768
     7 00000000                                 
     8  = 00280000                              BOTPAK		EQU		0x00280000		; 装载bootpack 
     9  = 00100000                              DSKCAC 		EQU		0x00100000		; 磁盘缓存位置
    10  = 00008000                              DSKCAC0		EQU		0x00008000		; 磁盘缓存位置（实时模式）
    11 00000000                                 
    12 00000000                                 ; BOOT_INFO
    13  = 00000FF0                              CYLS 		EQU		0x0ff0			; 启动区设置
    14  = 00000FF1                              LEDS		EQU		0x0ff1			; （不确定）键盘指示灯LED状态数
    15  = 00000FF2                              VMODE		EQU		0x0ff2			; 颜色数目信息 颜色的位数
    16  = 00000FF4                              SCRNX		EQU		0x0ff4			; 分辨率X（screen X）像素数
    17  = 00000FF6                              SCRNY 		EQU		0x0ff6			; 分辨率Y（screen Y）像素数
    18  = 00000FF8                              VRAM		EQU		0x0ff8			; 图像缓冲区开始地址
    19 00000000                                 
    20                                          		ORG		0xc200			; 程序被装载的内存位置
    21 0000C200                                 
    22 0000C200                                 ; 确认是否支持VBE
    23 0000C200                                 
    24 0000C200 B8 9000                         		MOV		AX,0x9000	; 为AX赋值0x9000
    25 0000C203 8E C0                           		MOV		ES,AX		; 为ES赋值0x9000
    26 0000C205 BF 0000                         		MOV		DI,0		; 为DI赋值0
    27 0000C208 B8 4F00                         		MOV		AX,0x4f00	; 为AX赋值0x4f00
    28 0000C20B CD 10                           		INT		0x10		; 发出中断信号 调用bios16号函数（16号中断处理函数调用显卡）
    29 0000C20D 3D 004F                         		CMP		AX,0x004f	; 比较AX与0x004f（有VBE AX会变为0x004f）
    30 0000C210 75 52                           		JNE		scrn320		; VBE不存在就跳转 scrn320
    31 0000C212                                 
    32 0000C212                                 ; 检查VBE版本 VBE2.0以下版本不支持320 * 200以上的分辨率
    33 0000C212                                 
    34 0000C212 26 8B 45 04                     		MOV		AX,[ES:DI+4]	; 获取VBE版本号
    35 0000C216 3D 0200                         		CMP		AX,0x0200		; 与0x200比较
    36 0000C219 72 49                           		JB		scrn320			; 版本号小于2.0 跳转至scrn320 
    37 0000C21B                                 
    38 0000C21B                                 ; 获取画面模式信息
    39 0000C21B                                 
    40 0000C21B B9 0105                         		MOV		CX,VBEMODE		; CX赋值当前画面模式号
    41 0000C21E B8 4F01                         		MOV		AX,0x4f01		; AX赋值
    42 0000C221 CD 10                           		INT		0x10			; 发出中断信号 调用bios16号函数（16号中断处理函数调用显卡）
    43 0000C223 3D 004F                         		CMP		AX,0x004f		; 比较AX与0x004f
    44 0000C226 75 3C                           		JNE		scrn320			; 不相等就跳转scrn320
    45 0000C228                                 
    46 0000C228                                 ; WORD	[ES:DI+0x00]	模式属性
    47 0000C228                                 ; WORD	[ES:DI+0x12]	X分辨率
    48 0000C228                                 ; WORD	[ES:DI+0x14]	Y分辨率
    49 0000C228                                 ; BYTE	[ES:DI+0x19]	颜色数
    50 0000C228                                 ; BYTE	[ES:DI+0x1b]	颜色指定方式 4为调色板模式
    51 0000C228                                 ; DWORD	[ES:DI+0x28]	VRAM地址
    52 0000C228                                 
    53 0000C228                                 ; 确认画面模式信息
    54 0000C228                                 
    55 0000C228 26 80 7D 19 08                  		CMP		BYTE [ES:DI+0x19],8		; 确认颜色数是否为8 不为8跳转scrn320
    56 0000C22D 75 35                           		JNE		scrn320					
    57 0000C22F 26 80 7D 1B 04                  		CMP		BYTE [ES:DI+0x1b],4		; 确认颜色的指定方式是否为调色板模式 不为4跳转scrn320
    58 0000C234 75 2E                           		JNE		scrn320
    59 0000C236 26 8B 05                        		MOV		AX,[ES:DI+0x00]
    60 0000C239 25 0080                         		AND		AX,0x0080
    61 0000C23C 74 26                           		JZ		scrn320					; 模式属性bit7为0 跳转至scrn320（不能+0x4000）
    62 0000C23E                                 
    63 0000C23E                                 ; 画面模式设定
    64 0000C23E                                 ; 使用VBE（VESA BIOS extension）时使用 AX = 0x4f02 BX = 画面模式号
    65 0000C23E                                 
    66 0000C23E BB 4105                         		MOV		BX,VBEMODE+0x4000		; 向BX赋值画面模式号
    67 0000C241 B8 4F02                         		MOV		AX,0x4f02
    68 0000C244 CD 10                           		INT		0x10					; 发出中断信号 调用bios16号函数（16号中断处理函数调用显卡）
    69 0000C246 C6 06 0FF2 08                   		MOV		BYTE [VMODE],8			; 记录画面模式
    70 0000C24B 26 8B 45 12                     		MOV		AX,[ES:DI+0x12]
    71 0000C24F A3 0FF4                         		MOV		[SCRNX],AX				; 设置X分辨率
    72 0000C252 26 8B 45 14                     		MOV		AX,[ES:DI+0x14]
    73 0000C256 A3 0FF6                         		MOV		[SCRNY],AX				; 设置Y分辨率
    74 0000C259 66 26 8B 45 28                  		MOV		EAX,[ES:DI+0x28]
    75 0000C25E 66 A3 0FF8                      		MOV		[VRAM],EAX
    76 0000C262 EB 20                           		JMP		keystatus
    77 0000C264                                 
    78 0000C264                                 ; 不能使用VBE
    79 0000C264                                 
    80 0000C264                                 scrn320:
    81 0000C264 B0 13                           		MOV		AL,0x13					; VGA模式 320 * 200 8bit
    82 0000C266 B4 00                           		MOV		AH,0x00
    83 0000C268 CD 10                           		INT		0x10
    84 0000C26A C6 06 0FF2 08                   		MOV		BYTE [VMODE],8
    85 0000C26F C7 06 0FF4 0140                 		MOV		WORD [SCRNX],320
    86 0000C275 C7 06 0FF6 00C8                 		MOV		WORD [SCRNY],200
    87 0000C27B 66 C7 06 0FF8 000A0000          		MOV		DWORD [VRAM],0x000a0000
    88 0000C284                                 
    89 0000C284                                 ;BIOS获得键盘LED指示灯状态
    90 0000C284                                 
    91 0000C284                                 keystatus:
    92 0000C284 B4 02                           		MOV		AH,0x02
    93 0000C286 CD 16                           		INT		0x16			; 发出中断信号调用bios22号函数 （22号中断处理函数调用键盘）
    94 0000C288 A2 0FF1                         		MOV		[LEDS],AL
    95 0000C28B                                 		
    96 0000C28B                                 ; 使PCI不接受一切中断
    97 0000C28B                                 ; 根据AT兼容机的规格，初始化PIC（可编程中断控制器）
    98 0000C28B                                 ; 要在CLI（禁止CPU级别的中断）之前操作，否则有时会挂起
    99 0000C28B                                 
   100 0000C28B B0 FF                           		MOV		AL,0xff
   101 0000C28D E6 21                           		OUT		0x21,AL
   102 0000C28F 90                              		NOP						; 如果继续执行OUT指令，有些机器可能无法正常运行，所以让CPU休息一个时钟周期
   103 0000C290 E6 A1                           		OUT		0xa1,AL
   104 0000C292 FA                              		CLI						;CPU级别禁止中断
   105 0000C293                                 ; 上述程序相当于
   106 0000C293                                 ; io_out(PIC0_IMR, 0xff)禁止主PIC全部中断
   107 0000C293                                 ; io_out(PIC1_IMR, 0xff)禁止从PIC全部中断
   108 0000C293                                 ; io_cli()禁止cpu级别的中断
   109 0000C293                                 
   110 0000C293                                 		
   111 0000C293                                 ; 启用A20GATE，使CPU能够访问1MB以上的存储器
   112 0000C293                                 ; waitkbdout: 等同于keyboard.c中定义的函数waitKeyboardControllerReady()
   113 0000C293 E8 00B5                         		CALL	waitkbdout
   114 0000C296 B0 D1                           		MOV		AL,0xd1
   115 0000C298 E6 64                           		OUT		0x64,AL
   116 0000C29A E8 00AE                         		CALL	waitkbdout
   117 0000C29D B0 DF                           		MOV		AL,0xdf			; enable A20
   118 0000C29F E6 60                           		OUT		0x60,AL
   119 0000C2A1 E8 00A7                         		CALL	waitkbdout
   120 0000C2A4                                 ; 上述程序等同于：
   121 0000C2A4                                 ;	#define KEYCMD_WRITE_OUTPOT	0xd1
   122 0000C2A4                                 ;	#define KBC_OUTPORT_A20G_ENABLE	0xdf
   123 0000C2A4                                 ;	waitKeyboardControllerReady()
   124 0000C2A4                                 ;	io_out8(PORT_KEYCMD, KEYCMD_WRITE_OUTPOT)
   125 0000C2A4                                 ;	waitKeyboardControllerReady()
   126 0000C2A4                                 ;	io_out8(PORT_KEYDAT, KBC_OUTPORT_A20G_ENABLE)	激活A20GATE信号线 使1MB以上内存可用
   127 0000C2A4                                 ;	waitKeyboardControllerReady() 等待指令执行完成 并无实际用处
   128 0000C2A4                                 
   129 0000C2A4                                 
   130 0000C2A4                                 
   131 0000C2A4                                 
   132 0000C2A4                                 
   133 0000C2A4                                 ; 保护模式转换
   134 0000C2A4                                 ; 保护模式：应用程序不能随意改变段设置 也不能使用操作系统专用段 操作系统收到CPU保护
   135 0000C2A4                                 
   136 0000C2A4                                 [INSTRSET "i486p"]				; 要使用i486命令的语句（LGDT EAX CR0等）
   137 0000C2A4                                 
   138 0000C2A4 0F 01 16 C38A                   		LGDT	[GDTR0]			; 设置临时GDT
   139 0000C2A9 0F 20 C0                        		MOV		EAX,CR0
   140 0000C2AC 66 25 7FFFFFFF                  		AND		EAX,0x7fffffff	; 将bit31设置为0（为了禁止分页）
   141 0000C2B2 66 83 C8 01                     		OR		EAX,0x00000001	; 将bit0设置为1（切换到保护模式）
   142 0000C2B6 0F 22 C0                        		MOV		CR0,EAX
   143 0000C2B9 EB 00                           		JMP		pipelineflush
   144 0000C2BB                                 pipelineflush:
   145 0000C2BB B8 0008                         		MOV		AX,1*8			; I/O段32bit
   146 0000C2BE 8E D8                           		MOV		DS,AX
   147 0000C2C0 8E C0                           		MOV		ES,AX
   148 0000C2C2 8E E0                           		MOV		FS,AX
   149 0000C2C4 8E E8                           		MOV		GS,AX
   150 0000C2C6 8E D0                           		MOV		SS,AX
   151 0000C2C8                                 
   152 0000C2C8                                 ; bootpack引导程序包传输 相当于C语音中使用memcpy 传送一段内存地址中的内容到另一段内存地址中
   153 0000C2C8                                 
   154 0000C2C8 66 BE 0000C390                  		MOV		ESI,bootpack	; 传输源
   155 0000C2CE 66 BF 00280000                  		MOV		EDI,BOTPAK		; 目的地
   156 0000C2D4 66 B9 00020000                  		MOV		ECX,512*1024/4
   157 0000C2DA E8 0075                         		CALL		memcpy
   158 0000C2DD                                 ; memcpy(bootpack, BOTPAK, 512*1024/4)
   159 0000C2DD                                 ; 将bootpack.hrb 复制到0x00280000号地址 512KB的原因是多了总比少了好
   160 0000C2DD                                 
   161 0000C2DD                                 ; 此外，磁盘数据将传输到原始位置
   162 0000C2DD                                 
   163 0000C2DD                                 ; 从启动扇区开始
   164 0000C2DD                                 
   165 0000C2DD 66 BE 00007C00                  		MOV		ESI,0x7c00		; 传输源
   166 0000C2E3 66 BF 00100000                  		MOV		EDI,DSKCAC		; 目的地
   167 0000C2E9 66 B9 00000080                  		MOV		ECX,512/4
   168 0000C2EF E8 0060                         		CALL		memcpy
   169 0000C2F2                                 ; memcpy(0x7c00, DSKCAC, 512/4) 从0x7c00复制512字节到0x00100000（将启动区复制到1MB以后的内存中）
   170 0000C2F2                                 		
   171 0000C2F2                                 ; 剩余全部
   172 0000C2F2                                 
   173 0000C2F2 66 BE 00008200                  		MOV		ESI,DSKCAC0+512	; 传输源
   174 0000C2F8 66 BF 00100200                  		MOV		EDI,DSKCAC+512	; 目的地
   175 0000C2FE 66 B9 00000000                  		MOV		ECX,0
   176 0000C304 8A 0E 0FF0                      		MOV		CL,BYTE [CYLS]
   177 0000C308 66 69 C9 00001200               		IMUL		ECX,512*18*2/4	; 将柱面数转换为字节数/4
   178 0000C30F 66 81 E9 00000080               		SUB		ECX,512/4		; 减去IPL
   179 0000C316 E8 0039                         		CALL		memcpy
   180 0000C319                                 ; memcpy(DSKCAC0+512, DSKCAC+512, CYLS*512*18*2/4 - 512/4)
   181 0000C319                                 ; 将 0x00008200复制到0x00100200中去 由于传送数据大小是以柱面数来计算的，所以需要减去启动区长度
   182 0000C319                                 
   183 0000C319                                 
   184 0000C319                                 ; asmhead功能完成
   185 0000C319                                 ; 将其放到bootpack中
   186 0000C319                                 
   187 0000C319                                 ; bootpack启动
   188 0000C319                                 
   189 0000C319 66 BB 00280000                  		MOV		EBX,BOTPAK
   190 0000C31F 67 66 8B 4B 10                  		MOV		ECX,[EBX+16]
   191 0000C324 66 83 C1 03                     		ADD		ECX,3			; ECX += 3
   192 0000C328 66 C1 E9 02                     		SHR		ECX,2			; ECX /= 4
   193 0000C32C 74 10                           		JZ		skip			; 没有可以转移的
   194 0000C32E 67 66 8B 73 14                  		MOV		ESI,[EBX+20]	; 传输源
   195 0000C333 66 01 DE                        		ADD		ESI,EBX
   196 0000C336 67 66 8B 7B 0C                  		MOV		EDI,[EBX+12]	; 目的地
   197 0000C33B E8 0014                         		CALL		memcpy
   198 0000C33E                                 		
   199 0000C33E                                 skip:
   200 0000C33E 67 66 8B 63 0C                  		MOV		ESP,[EBX+12]	; 堆栈初始值
   201 0000C343 66 EA 0000001B 0010             		JMP		DWORD 2*8:0x0000001b
   202 0000C34B                                 ; memcpy(0x10c8, 0x00310000, 0x11a8) 
   203 0000C34B                                 	
   204 0000C34B                                 	
   205 0000C34B                                 ; 等待键盘控制电路就绪，如果其中有键盘或鼠标数据就将其读出	
   206 0000C34B                                 waitkbdout:
   207 0000C34B E4 64                           		IN		 AL,0x64
   208 0000C34D 24 02                           		AND		 AL,0x02		; 清空缓冲区中的垃圾数据
   209 0000C34F 75 FA                           		JNZ		waitkbdout		; 如果AND结果不为0，跳转到waitkbdout
   210 0000C351 C3                              		RET
   211 0000C352                                 
   212 0000C352                                 
   213 0000C352                                 memcpy:
   214 0000C352 67 66 8B 06                     		MOV		EAX,[ESI]
   215 0000C356 66 83 C6 04                     		ADD		ESI,4
   216 0000C35A 67 66 89 07                     		MOV		[EDI],EAX
   217 0000C35E 66 83 C7 04                     		ADD		EDI,4
   218 0000C362 66 83 E9 01                     		SUB		ECX,1
   219 0000C366 75 EA                           		JNZ		memcpy			; 如果减法的结果不为0，跳转到memcpy
   220 0000C368 C3                              		RET
   221 0000C369                                 	
   222 0000C369                                 	
   223 0000C369 00 00 00 00 00 00 00            		ALIGNB		16			; 一直添加DBO直到地址能被16整除（为了保证MOV指令速度）
   224 0000C370                                 GDT0:
   225 0000C370 00 00 00 00 00 00 00 00         		RESB		8				; 空选择器
   226 0000C378 FFFF 0000 9200 00CF             		DW		0xffff,0x0000,0x9200,0x00cf	; I/O段32bit
   227 0000C380 FFFF 0000 9A28 0047             		DW		0xffff,0x0000,0x9a28,0x0047	; 可执行段32bit（用于bootpack）
   228 0000C388 0000                            		DW		0
   229 0000C38A                                 GDTR0:
   230 0000C38A 0017                            		DW		8*3-1
   231 0000C38C 0000C370                        		DD		GDT0
   232 0000C390                                 
   233 0000C390                                 		ALIGNB		16
   234 0000C390                                 bootpack:
