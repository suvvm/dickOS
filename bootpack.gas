	.file	"bootpack.c"
	.text
	.balign 2
.globl _QueueInit
	.def	_QueueInit;	.scl	2;	.type	32;	.endef
_QueueInit:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	16(%ebp), %edx
	movl	12(%ebp), %ecx
	movl	%edx, (%eax)
	movl	%ecx, 12(%eax)
	movl	20(%ebp), %edx
	movl	%ecx, 16(%eax)
	movl	$0, 20(%eax)
	movl	$0, 8(%eax)
	movl	$0, 4(%eax)
	movl	%edx, 24(%eax)
	popl	%ebp
	ret
	.balign 2
.globl _QueuePush
	.def	_QueuePush;	.scl	2;	.type	32;	.endef
_QueuePush:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	8(%ebp), %ebx
	cmpl	$0, 16(%ebx)
	jne	L3
	orl	$1, 20(%ebx)
	orl	$-1, %eax
L2:
	movl	-4(%ebp), %ebx
	leave
	ret
L3:
	movl	4(%ebx), %ecx
	movl	(%ebx), %edx
	movl	12(%ebp), %eax
	movl	%eax, (%edx,%ecx,4)
	movl	4(%ebx), %eax
	decl	16(%ebx)
	incl	%eax
	cltd
	idivl	12(%ebx)
	movl	24(%ebx), %eax
	movl	%edx, 4(%ebx)
	testl	%eax, %eax
	je	L4
	cmpl	$2, 4(%eax)
	je	L4
	pushl	$0
	pushl	$-1
	pushl	%eax
	call	_processRun
	addl	$12, %esp
L4:
	xorl	%eax, %eax
	jmp	L2
	.balign 2
.globl _QueuePop
	.def	_QueuePop;	.scl	2;	.type	32;	.endef
_QueuePop:
	pushl	%ebp
	orl	$-1, %eax
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	movl	8(%ebp), %esi
	pushl	%ebx
	movl	16(%esi), %edi
	movl	12(%esi), %ebx
	cmpl	%ebx, %edi
	je	L6
	movl	8(%esi), %eax
	movl	(%esi), %edx
	movl	(%edx,%eax,4), %ecx
	incl	%eax
	cltd
	idivl	%ebx
	leal	1(%edi), %eax
	movl	%edx, 8(%esi)
	movl	%eax, 16(%esi)
	movl	%ecx, %eax
L6:
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _QueueSize
	.def	_QueueSize;	.scl	2;	.type	32;	.endef
_QueueSize:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %edx
	popl	%ebp
	movl	12(%edx), %eax
	subl	16(%edx), %eax
	ret
	.data
_keyboardTable0:
	.byte	0
	.byte	0
	.byte	49
	.byte	50
	.byte	51
	.byte	52
	.byte	53
	.byte	54
	.byte	55
	.byte	56
	.byte	57
	.byte	48
	.byte	45
	.byte	61
	.byte	0
	.byte	0
	.byte	81
	.byte	87
	.byte	69
	.byte	82
	.byte	84
	.byte	89
	.byte	85
	.byte	73
	.byte	79
	.byte	80
	.byte	91
	.byte	93
	.byte	0
	.byte	0
	.byte	65
	.byte	83
	.byte	68
	.byte	70
	.byte	71
	.byte	72
	.byte	74
	.byte	75
	.byte	76
	.byte	59
	.byte	39
	.byte	96
	.byte	0
	.byte	92
	.byte	90
	.byte	88
	.byte	67
	.byte	86
	.byte	66
	.byte	78
	.byte	77
	.byte	44
	.byte	46
	.byte	47
	.byte	0
	.byte	42
	.byte	0
	.byte	32
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	55
	.byte	56
	.byte	57
	.byte	45
	.byte	52
	.byte	53
	.byte	54
	.byte	43
	.byte	49
	.byte	50
	.byte	51
	.byte	48
	.byte	46
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
_keyboardTable1:
	.byte	0
	.byte	0
	.byte	33
	.byte	64
	.byte	35
	.byte	36
	.byte	37
	.byte	94
	.byte	38
	.byte	42
	.byte	40
	.byte	41
	.byte	95
	.byte	43
	.byte	0
	.byte	0
	.byte	81
	.byte	87
	.byte	69
	.byte	82
	.byte	84
	.byte	89
	.byte	85
	.byte	73
	.byte	79
	.byte	80
	.byte	123
	.byte	125
	.byte	0
	.byte	0
	.byte	65
	.byte	83
	.byte	68
	.byte	70
	.byte	71
	.byte	72
	.byte	74
	.byte	75
	.byte	76
	.byte	58
	.byte	34
	.byte	126
	.byte	0
	.byte	124
	.byte	90
	.byte	88
	.byte	67
	.byte	86
	.byte	66
	.byte	78
	.byte	77
	.byte	60
	.byte	62
	.byte	63
	.byte	0
	.byte	42
	.byte	0
	.byte	32
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	55
	.byte	56
	.byte	57
	.byte	45
	.byte	52
	.byte	53
	.byte	54
	.byte	43
	.byte	49
	.byte	50
	.byte	51
	.byte	48
	.byte	46
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.text
	.balign 2
.globl _waitKeyboardControllerReady
	.def	_waitKeyboardControllerReady;	.scl	2;	.type	32;	.endef
_waitKeyboardControllerReady:
	pushl	%ebp
	movl	%esp, %ebp
L10:
	pushl	$100
	call	_io_in8
	popl	%edx
	andl	$2, %eax
	jne	L10
	leave
	ret
	.balign 2
.globl _initKeyboard
	.def	_initKeyboard;	.scl	2;	.type	32;	.endef
_initKeyboard:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	%eax, _keybuf
	movl	12(%ebp), %eax
	movl	%eax, _keyData0
	call	_waitKeyboardControllerReady
	pushl	$96
	pushl	$100
	call	_io_out8
	call	_waitKeyboardControllerReady
	popl	%ecx
	popl	%eax
	movl	$71, 12(%ebp)
	movl	$96, 8(%ebp)
	leave
	jmp	_io_out8
	.balign 2
.globl _enableMouse
	.def	_enableMouse;	.scl	2;	.type	32;	.endef
_enableMouse:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	%eax, _mousebuf
	movl	12(%ebp), %eax
	movl	%eax, _mouseData0
	call	_waitKeyboardControllerReady
	pushl	$212
	pushl	$100
	call	_io_out8
	call	_waitKeyboardControllerReady
	pushl	$244
	pushl	$96
	call	_io_out8
	movl	16(%ebp), %eax
	movb	$0, 3(%eax)
	leave
	ret
	.balign 2
.globl _mouseDecode
	.def	_mouseDecode;	.scl	2;	.type	32;	.endef
_mouseDecode:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	8(%ebp), %edx
	movl	12(%ebp), %ecx
	movl	%ecx, %esi
	movb	3(%edx), %al
	testb	%al, %al
	jne	L17
	cmpb	$-6, %cl
	je	L26
L25:
	xorl	%eax, %eax
L16:
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L26:
	movb	$1, 3(%edx)
	jmp	L25
L17:
	cmpb	$1, %al
	je	L27
	cmpb	$2, %al
	je	L28
	cmpb	$3, %al
	je	L29
	orl	$-1, %eax
	jmp	L16
L29:
	movb	(%edx), %bl
	andl	$255, %esi
	movl	%ebx, %eax
	movb	%cl, 2(%edx)
	andl	$7, %eax
	movl	%esi, 8(%edx)
	movl	%eax, 12(%edx)
	movb	%bl, %al
	movzbl	1(%edx), %ecx
	andl	$16, %eax
	movl	%ecx, 4(%edx)
	movb	$1, 3(%edx)
	testb	%al, %al
	je	L23
	orl	$-256, %ecx
	movl	%ecx, 4(%edx)
L23:
	andl	$32, %ebx
	testb	%bl, %bl
	je	L24
	orl	$-256, 8(%edx)
L24:
	negl	8(%edx)
	movl	$1, %eax
	jmp	L16
L28:
	movb	%cl, 1(%edx)
	movb	$3, 3(%edx)
	jmp	L25
L27:
	andl	$-56, %esi
	movl	%esi, %eax
	cmpb	$8, %al
	jne	L25
	movb	%cl, (%edx)
	movb	$2, 3(%edx)
	jmp	L25
	.balign 2
.globl _initPit
	.def	_initPit;	.scl	2;	.type	32;	.endef
_initPit:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$52
	pushl	$67
	call	_io_out8
	pushl	$156
	pushl	$64
	call	_io_out8
	pushl	$46
	pushl	$64
	call	_io_out8
	movl	$_timerctl+10000, %edx
	movl	$0, _timerctl
	addl	$24, %esp
	movl	$_timerctl+20, %eax
L35:
	movl	$0, (%eax)
	addl	$20, %eax
	cmpl	%edx, %eax
	jle	L35
	call	_timerAlloc
	movl	$-1, 4(%eax)
	movl	$2, 8(%eax)
	movl	$0, (%eax)
	movl	%eax, _timerctl+8
	movl	$-1, _timerctl+4
	leave
	ret
	.balign 2
.globl _timerAlloc
	.def	_timerAlloc;	.scl	2;	.type	32;	.endef
_timerAlloc:
	pushl	%ebp
	xorl	%edx, %edx
	movl	%esp, %ebp
	movl	$_timerctl+12, %eax
L44:
	cmpl	$0, 8(%eax)
	je	L47
	incl	%edx
	addl	$20, %eax
	cmpl	$499, %edx
	jle	L44
	xorl	%eax, %eax
L38:
	popl	%ebp
	ret
L47:
	movl	$1, 8(%eax)
	jmp	L38
	.balign 2
.globl _timerFree
	.def	_timerFree;	.scl	2;	.type	32;	.endef
_timerFree:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	$0, 8(%eax)
	popl	%ebp
	ret
	.balign 2
.globl _timerInit
	.def	_timerInit;	.scl	2;	.type	32;	.endef
_timerInit:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	12(%ebp), %edx
	movl	%edx, 12(%eax)
	movl	16(%ebp), %edx
	movb	%dl, 16(%eax)
	popl	%ebp
	ret
	.balign 2
.globl _timerSetTime
	.def	_timerSetTime;	.scl	2;	.type	32;	.endef
_timerSetTime:
	pushl	%ebp
	movl	_timerctl, %eax
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	8(%ebp), %ebx
	addl	12(%ebp), %eax
	movl	$2, 8(%ebx)
	movl	%eax, 4(%ebx)
	call	_io_load_eflags
	movl	%eax, %esi
	call	_io_cli
	movl	_timerctl+8, %eax
	movl	4(%ebx), %edx
	cmpl	4(%eax), %edx
	jbe	L57
L52:
	movl	%eax, %ecx
	movl	(%eax), %eax
	testl	%eax, %eax
	je	L53
	cmpl	4(%eax), %edx
	ja	L52
	movl	%ebx, (%ecx)
	movl	%eax, (%ebx)
L53:
	movl	%esi, 8(%ebp)
	popl	%ebx
	popl	%esi
	popl	%ebp
	jmp	_io_store_eflags
L57:
	movl	%ebx, _timerctl+8
	movl	%edx, _timerctl+4
	movl	%eax, (%ebx)
	jmp	L53
	.balign 2
.globl _processIdle
	.def	_processIdle;	.scl	2;	.type	32;	.endef
_processIdle:
	pushl	%ebp
	movl	%esp, %ebp
L59:
	call	_io_hlt
	jmp	L59
	.balign 2
.globl _processNow
	.def	_processNow;	.scl	2;	.type	32;	.endef
_processNow:
	movl	_processctl, %eax
	pushl	%ebp
	movl	%esp, %ebp
	popl	%ebp
	movl	(%eax), %edx
	imull	$408, %edx, %edx
	leal	8(%edx,%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax,%edx,4), %eax
	ret
	.balign 2
.globl _processAdd
	.def	_processAdd;	.scl	2;	.type	32;	.endef
_processAdd:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %ecx
	movl	8(%ecx), %edx
	imull	$408, %edx, %edx
	addl	_processctl, %edx
	movl	8(%edx), %eax
	movl	%ecx, 16(%edx,%eax,4)
	incl	%eax
	movl	%eax, 8(%edx)
	movl	$2, 4(%ecx)
	popl	%ebp
	ret
	.balign 2
.globl _processRemove
	.def	_processRemove;	.scl	2;	.type	32;	.endef
_processRemove:
	pushl	%ebp
	xorl	%ecx, %ecx
	movl	%esp, %ebp
	pushl	%ebx
	movl	8(%ebp), %ebx
	movl	8(%ebx), %eax
	imull	$408, %eax, %eax
	addl	_processctl, %eax
	leal	8(%eax), %edx
	cmpl	8(%eax), %ecx
	jge	L66
L70:
	cmpl	%ebx, 8(%edx,%ecx,4)
	je	L66
	incl	%ecx
	cmpl	(%edx), %ecx
	jl	L70
L66:
	movl	4(%edx), %eax
	decl	(%edx)
	cmpl	%eax, %ecx
	jge	L71
	decl	%eax
	movl	%eax, 4(%edx)
L71:
	movl	(%edx), %eax
	cmpl	%eax, 4(%edx)
	jl	L72
	movl	$0, 4(%edx)
L72:
	movl	$1, 4(%ebx)
	movl	(%edx), %ebx
	cmpl	%ebx, %ecx
	jge	L80
L77:
	movl	12(%edx,%ecx,4), %eax
	movl	%eax, 8(%edx,%ecx,4)
	incl	%ecx
	cmpl	%ebx, %ecx
	jl	L77
L80:
	popl	%ebx
	popl	%ebp
	ret
	.balign 2
.globl _processSwitchSub
	.def	_processSwitchSub;	.scl	2;	.type	32;	.endef
_processSwitchSub:
	pushl	%ebp
	xorl	%ecx, %ecx
	movl	%esp, %ebp
	movl	_processctl, %eax
	xorl	%edx, %edx
L87:
	cmpl	$0, 8(%eax,%edx)
	jg	L83
	incl	%ecx
	addl	$408, %edx
	cmpl	$9, %ecx
	jle	L87
L83:
	movl	%ecx, (%eax)
	movb	$0, 4(%eax)
	popl	%ebp
	ret
	.balign 2
.globl _processInit
	.def	_processInit;	.scl	2;	.type	32;	.endef
_processInit:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%edi, %edi
	pushl	%ebx
	xorl	%esi, %esi
	pushl	$152088
	movl	$999, %ebx
	pushl	8(%ebp)
	call	_memsegAlloc4K
	movl	%eax, _processctl
	popl	%eax
	popl	%edx
L94:
	movl	%edi, %eax
	leal	24(%esi), %edx
	addl	_processctl, %eax
	addl	$148, %edi
	movl	$0, 4092(%eax)
	movl	%edx, 4088(%eax)
	addl	$4132, %eax
	pushl	$137
	pushl	%eax
	leal	2555928(%esi), %eax
	pushl	$103
	addl	$8, %esi
	pushl	%eax
	call	_setSegmdesc
	addl	$16, %esp
	decl	%ebx
	jns	L94
	movl	_processctl, %ecx
	xorl	%edx, %edx
	movl	$9, %ebx
L99:
	leal	(%ecx,%edx), %eax
	addl	$408, %edx
	decl	%ebx
	movl	$0, 8(%eax)
	movl	$0, 12(%eax)
	jns	L99
	call	_processAlloc
	movl	%eax, %esi
	movl	$2, 4(%eax)
	movl	$2, 12(%eax)
	movl	$0, 8(%eax)
	pushl	%eax
	call	_processAdd
	call	_processSwitchSub
	pushl	(%esi)
	call	_loadTr
	call	_timerAlloc
	pushl	$2
	movl	%eax, _mpTimer
	pushl	%eax
	call	_timerSetTime
	call	_processAlloc
	pushl	$65536
	pushl	8(%ebp)
	movl	%eax, %ebx
	call	_memsegAlloc4K
	addl	$65536, %eax
	movl	%eax, 100(%ebx)
	movl	$_processIdle, 76(%ebx)
	movl	$8, 116(%ebx)
	movl	$16, 120(%ebx)
	movl	$8, 124(%ebx)
	movl	$8, 128(%ebx)
	movl	$8, 132(%ebx)
	movl	$8, 136(%ebx)
	pushl	$1
	pushl	$9
	pushl	%ebx
	call	_processRun
	leal	-12(%ebp), %esp
	popl	%ebx
	movl	%esi, %eax
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _processAlloc
	.def	_processAlloc;	.scl	2;	.type	32;	.endef
_processAlloc:
	pushl	%ebp
	xorl	%ecx, %ecx
	movl	%esp, %ebp
	xorl	%edx, %edx
L110:
	movl	%edx, %eax
	addl	_processctl, %eax
	cmpl	$0, 4092(%eax)
	je	L113
	incl	%ecx
	addl	$148, %edx
	cmpl	$999, %ecx
	jle	L110
	xorl	%eax, %eax
L104:
	popl	%ebp
	ret
L113:
	addl	$4088, %eax
	movl	$1, 4(%eax)
	movl	$514, 80(%eax)
	movl	$0, 84(%eax)
	movl	$0, 88(%eax)
	movl	$0, 92(%eax)
	movl	$0, 96(%eax)
	movl	$0, 104(%eax)
	movl	$0, 108(%eax)
	movl	$0, 112(%eax)
	movl	$0, 116(%eax)
	movl	$0, 128(%eax)
	movl	$0, 132(%eax)
	movl	$0, 136(%eax)
	movl	$0, 140(%eax)
	movl	$1073741824, 144(%eax)
	jmp	L104
	.balign 2
.globl _processRun
	.def	_processRun;	.scl	2;	.type	32;	.endef
_processRun:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	12(%ebp), %esi
	movl	16(%ebp), %eax
	movl	8(%ebp), %ebx
	testl	%esi, %esi
	js	L119
L115:
	testl	%eax, %eax
	jle	L116
	movl	%eax, 12(%ebx)
L116:
	cmpl	$2, 4(%ebx)
	je	L120
L117:
	cmpl	$2, 4(%ebx)
	je	L118
	movl	%esi, 8(%ebx)
	pushl	%ebx
	call	_processAdd
	popl	%ecx
L118:
	movl	_processctl, %eax
	movb	$1, 4(%eax)
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L120:
	cmpl	%esi, 8(%ebx)
	je	L117
	pushl	%ebx
	call	_processRemove
	popl	%eax
	jmp	L117
L119:
	movl	8(%ebx), %esi
	jmp	L115
	.balign 2
.globl _processSwitch
	.def	_processSwitch;	.scl	2;	.type	32;	.endef
_processSwitch:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	_processctl, %ebx
	movl	(%ebx), %edx
	imull	$408, %edx, %edx
	leal	(%edx,%ebx), %edx
	leal	8(%edx), %ecx
	movl	4(%ecx), %eax
	movl	8(%ecx,%eax,4), %esi
	incl	%eax
	movl	%eax, 4(%ecx)
	cmpl	8(%edx), %eax
	je	L125
L122:
	cmpb	$0, 4(%ebx)
	jne	L126
L123:
	movl	4(%ecx), %eax
	movl	8(%ecx,%eax,4), %ebx
	pushl	12(%ebx)
	pushl	_mpTimer
	call	_timerSetTime
	cmpl	%esi, %ebx
	popl	%ecx
	popl	%eax
	je	L121
	pushl	(%ebx)
	pushl	$0
	call	_farJmp
	popl	%eax
	popl	%edx
L121:
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L126:
	call	_processSwitchSub
	movl	_processctl, %edx
	movl	(%edx), %eax
	imull	$408, %eax, %eax
	leal	8(%eax,%edx), %ecx
	jmp	L123
L125:
	movl	$0, 4(%ecx)
	jmp	L122
	.balign 2
.globl _processSleep
	.def	_processSleep;	.scl	2;	.type	32;	.endef
_processSleep:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	8(%ebp), %esi
	cmpl	$2, 4(%esi)
	je	L130
L127:
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L130:
	call	_processNow
	pushl	%esi
	movl	%eax, %ebx
	call	_processRemove
	popl	%ecx
	cmpl	%ebx, %esi
	jne	L127
	call	_processSwitchSub
	call	_processNow
	pushl	(%eax)
	pushl	$0
	call	_farJmp
	popl	%eax
	popl	%edx
	jmp	L127
	.balign 2
.globl _init_pic
	.def	_init_pic;	.scl	2;	.type	32;	.endef
_init_pic:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$255
	pushl	$33
	call	_io_out8
	pushl	$255
	pushl	$161
	call	_io_out8
	pushl	$17
	pushl	$32
	call	_io_out8
	pushl	$32
	pushl	$33
	call	_io_out8
	addl	$32, %esp
	pushl	$4
	pushl	$33
	call	_io_out8
	pushl	$1
	pushl	$33
	call	_io_out8
	pushl	$17
	pushl	$160
	call	_io_out8
	pushl	$40
	pushl	$161
	call	_io_out8
	addl	$32, %esp
	pushl	$2
	pushl	$161
	call	_io_out8
	pushl	$1
	pushl	$161
	call	_io_out8
	pushl	$251
	pushl	$33
	call	_io_out8
	pushl	$255
	pushl	$161
	call	_io_out8
	leave
	ret
	.balign 2
.globl _interruptHandler21
	.def	_interruptHandler21;	.scl	2;	.type	32;	.endef
_interruptHandler21:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$97
	pushl	$32
	call	_io_out8
	pushl	$96
	call	_io_in8
	addl	_keyData0, %eax
	pushl	%eax
	pushl	_keybuf
	call	_QueuePush
	leave
	ret
	.balign 2
.globl _interruptHandler27
	.def	_interruptHandler27;	.scl	2;	.type	32;	.endef
_interruptHandler27:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$103
	pushl	$32
	call	_io_out8
	leave
	ret
	.balign 2
.globl _interruptHandler2c
	.def	_interruptHandler2c;	.scl	2;	.type	32;	.endef
_interruptHandler2c:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$100
	pushl	$160
	call	_io_out8
	pushl	$98
	pushl	$32
	call	_io_out8
	pushl	$96
	call	_io_in8
	addl	_mouseData0, %eax
	pushl	%eax
	pushl	_mousebuf
	call	_QueuePush
	leave
	ret
	.balign 2
.globl _interruptHandler20
	.def	_interruptHandler20;	.scl	2;	.type	32;	.endef
_interruptHandler20:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	xorl	%esi, %esi
	pushl	$96
	pushl	$32
	call	_io_out8
	movl	_timerctl, %eax
	incl	%eax
	movl	%eax, _timerctl
	cmpl	%eax, _timerctl+4
	popl	%ecx
	popl	%ebx
	ja	L135
	movl	_timerctl+8, %ebx
L137:
	movl	4(%ebx), %eax
	cmpl	_timerctl, %eax
	ja	L138
	movl	$1, 8(%ebx)
	cmpl	_mpTimer, %ebx
	je	L141
	movzbl	16(%ebx), %eax
	pushl	%eax
	pushl	12(%ebx)
	call	_QueuePush
	popl	%eax
	popl	%edx
L142:
	movl	(%ebx), %ebx
	jmp	L137
L141:
	movl	$1, %esi
	jmp	L142
L138:
	movl	%eax, _timerctl+4
	movl	%ebx, _timerctl+8
	movl	%esi, %eax
	testb	%al, %al
	jne	L144
L135:
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L144:
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	jmp	_processSwitch
	.balign 2
.globl _setSegmdesc
	.def	_setSegmdesc;	.scl	2;	.type	32;	.endef
_setSegmdesc:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	12(%ebp), %edx
	movl	16(%ebp), %ecx
	movl	8(%ebp), %ebx
	movl	20(%ebp), %eax
	cmpl	$1048575, %edx
	jbe	L146
	shrl	$12, %edx
	orl	$32768, %eax
L146:
	movw	%dx, (%ebx)
	movb	%al, 5(%ebx)
	shrl	$16, %edx
	sarl	$8, %eax
	andl	$15, %edx
	movw	%cx, 2(%ebx)
	andl	$-16, %eax
	sarl	$16, %ecx
	orl	%eax, %edx
	movb	%cl, 4(%ebx)
	movb	%dl, 6(%ebx)
	sarl	$8, %ecx
	movb	%cl, 7(%ebx)
	popl	%ebx
	popl	%ebp
	ret
	.balign 2
.globl _setGatedesc
	.def	_setGatedesc;	.scl	2;	.type	32;	.endef
_setGatedesc:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	8(%ebp), %edx
	movl	16(%ebp), %eax
	movl	20(%ebp), %ebx
	movl	12(%ebp), %ecx
	movw	%ax, 2(%edx)
	movb	%bl, 5(%edx)
	movw	%cx, (%edx)
	movl	%ebx, %eax
	sarl	$8, %eax
	sarl	$16, %ecx
	movb	%al, 4(%edx)
	movw	%cx, 6(%edx)
	popl	%ebx
	popl	%ebp
	ret
	.balign 2
.globl _initGdtit
	.def	_initGdtit;	.scl	2;	.type	32;	.endef
_initGdtit:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	$2555904, %esi
	movl	$8191, %ebx
L153:
	pushl	$0
	pushl	$0
	pushl	$0
	pushl	%esi
	addl	$8, %esi
	call	_setSegmdesc
	addl	$16, %esp
	decl	%ebx
	jns	L153
	pushl	$16530
	movl	$255, %ebx
	pushl	$0
	pushl	$-1
	pushl	$2555912
	call	_setSegmdesc
	pushl	$16538
	pushl	$2621440
	pushl	$524287
	pushl	$2555920
	call	_setSegmdesc
	addl	$32, %esp
	pushl	$2555904
	pushl	$65535
	call	_loadGdtr
	popl	%esi
	popl	%eax
	movl	$2553856, %esi
L158:
	pushl	$0
	pushl	$0
	pushl	$0
	pushl	%esi
	addl	$8, %esi
	call	_setGatedesc
	addl	$16, %esp
	decl	%ebx
	jns	L158
	pushl	$2553856
	pushl	$2047
	call	_loadIdtr
	pushl	$142
	pushl	$16
	pushl	$_asm_interruptHandler20
	pushl	$2554112
	call	_setGatedesc
	pushl	$142
	pushl	$16
	pushl	$_asm_interruptHandler21
	pushl	$2554120
	call	_setGatedesc
	addl	$40, %esp
	pushl	$142
	pushl	$16
	pushl	$_asm_interruptHandler27
	pushl	$2554168
	call	_setGatedesc
	pushl	$142
	pushl	$16
	pushl	$_asm_interruptHandler2c
	pushl	$2554208
	call	_setGatedesc
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
	.balign 2
.globl _set_palette
	.def	_set_palette;	.scl	2;	.type	32;	.endef
_set_palette:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%ecx
	movl	8(%ebp), %ebx
	movl	12(%ebp), %edi
	movl	16(%ebp), %esi
	call	_io_load_eflags
	movl	%eax, -16(%ebp)
	call	_io_cli
	pushl	%ebx
	pushl	$968
	call	_io_out8
	cmpl	%edi, %ebx
	popl	%eax
	popl	%edx
	jge	L170
	subl	%ebx, %edi
	movl	%edi, %ebx
L168:
	movb	(%esi), %al
	shrb	$2, %al
	movzbl	%al, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	movb	1(%esi), %al
	shrb	$2, %al
	movzbl	%al, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	movb	2(%esi), %al
	shrb	$2, %al
	addl	$3, %esi
	movzbl	%al, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	addl	$24, %esp
	decl	%ebx
	jne	L168
L170:
	movl	-16(%ebp), %eax
	movl	%eax, 8(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_io_store_eflags
	.data
_table_rgb.0:
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	0
	.byte	-1
	.byte	-1
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	-1
	.byte	0
	.byte	-1
	.byte	0
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-58
	.byte	-58
	.byte	-58
	.byte	-124
	.byte	0
	.byte	0
	.byte	0
	.byte	-124
	.byte	0
	.byte	-124
	.byte	-124
	.byte	0
	.byte	0
	.byte	0
	.byte	-124
	.byte	-124
	.byte	0
	.byte	-124
	.byte	0
	.byte	-124
	.byte	-124
	.byte	-124
	.byte	-124
	.byte	-124
	.text
	.balign 2
.globl _init_palette
	.def	_init_palette;	.scl	2;	.type	32;	.endef
_init_palette:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$_table_rgb.0
	pushl	$15
	pushl	$0
	call	_set_palette
	leave
	ret
	.balign 2
.globl _boxFill8
	.def	_boxFill8;	.scl	2;	.type	32;	.endef
_boxFill8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%edi
	pushl	%edi
	movb	16(%ebp), %al
	movl	24(%ebp), %ecx
	movl	28(%ebp), %edi
	movb	%al, -13(%ebp)
	cmpl	32(%ebp), %ecx
	jg	L184
	movl	12(%ebp), %ebx
	imull	%ecx, %ebx
L182:
	movl	20(%ebp), %edx
	cmpl	%edi, %edx
	jg	L186
	movl	8(%ebp), %esi
	addl	%ebx, %esi
	addl	%edx, %esi
	movl	%esi, -20(%ebp)
L181:
	movl	-20(%ebp), %esi
	movb	-13(%ebp), %al
	incl	%edx
	movb	%al, (%esi)
	incl	%esi
	movl	%esi, -20(%ebp)
	cmpl	%edi, %edx
	jle	L181
L186:
	incl	%ecx
	addl	12(%ebp), %ebx
	cmpl	32(%ebp), %ecx
	jle	L182
L184:
	popl	%ebx
	popl	%esi
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _init_GUI
	.def	_init_GUI;	.scl	2;	.type	32;	.endef
_init_GUI:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$12, %esp
	movl	16(%ebp), %eax
	movl	12(%ebp), %edi
	subl	$29, %eax
	decl	%edi
	pushl	%eax
	pushl	%edi
	pushl	$0
	pushl	$0
	pushl	$14
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	subl	$28, %eax
	pushl	%eax
	pushl	%edi
	pushl	%eax
	pushl	$0
	pushl	$8
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	addl	$56, %esp
	subl	$27, %eax
	pushl	%eax
	pushl	%edi
	pushl	%eax
	pushl	$0
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	decl	%eax
	pushl	%eax
	movl	16(%ebp), %eax
	pushl	%edi
	subl	$26, %eax
	pushl	%eax
	pushl	$0
	pushl	$8
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %esi
	addl	$56, %esp
	subl	$24, %esi
	pushl	%esi
	pushl	$59
	pushl	%esi
	pushl	$3
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	subl	$4, %eax
	pushl	%eax
	movl	%eax, -16(%ebp)
	pushl	$2
	pushl	%esi
	pushl	$2
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	addl	$56, %esp
	pushl	-16(%ebp)
	pushl	$59
	pushl	-16(%ebp)
	pushl	$3
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	subl	$5, %eax
	pushl	%eax
	movl	16(%ebp), %eax
	pushl	$59
	subl	$23, %eax
	pushl	%eax
	movl	%eax, -20(%ebp)
	pushl	$59
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	addl	$56, %esp
	subl	$3, %eax
	movl	%eax, -24(%ebp)
	pushl	%eax
	pushl	$59
	pushl	%eax
	pushl	$2
	pushl	$0
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	pushl	-24(%ebp)
	pushl	$60
	pushl	%esi
	pushl	$60
	pushl	$0
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	12(%ebp), %edi
	addl	$56, %esp
	movl	12(%ebp), %ebx
	subl	$4, %ebx
	subl	$47, %edi
	pushl	%esi
	pushl	%ebx
	pushl	%esi
	pushl	%edi
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	pushl	-16(%ebp)
	pushl	%edi
	pushl	-20(%ebp)
	pushl	%edi
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	addl	$56, %esp
	pushl	-24(%ebp)
	pushl	%ebx
	pushl	-24(%ebp)
	pushl	%edi
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	12(%ebp), %eax
	pushl	-24(%ebp)
	subl	$3, %eax
	pushl	%eax
	pushl	%esi
	pushl	%eax
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _putFont8
	.def	_putFont8;	.scl	2;	.type	32;	.endef
_putFont8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%esi, %esi
	pushl	%ebx
	movl	28(%ebp), %edi
	movb	24(%ebp), %bl
L201:
	movl	20(%ebp), %eax
	movl	16(%ebp), %edx
	addl	%esi, %eax
	imull	12(%ebp), %eax
	addl	8(%ebp), %eax
	leal	(%edx,%eax), %ecx
	movb	(%esi,%edi), %dl
	testb	%dl, %dl
	jns	L193
	movb	%bl, (%ecx)
L193:
	movb	%dl, %al
	andl	$64, %eax
	testb	%al, %al
	je	L194
	movb	%bl, 1(%ecx)
L194:
	movb	%dl, %al
	andl	$32, %eax
	testb	%al, %al
	je	L195
	movb	%bl, 2(%ecx)
L195:
	movb	%dl, %al
	andl	$16, %eax
	testb	%al, %al
	je	L196
	movb	%bl, 3(%ecx)
L196:
	movb	%dl, %al
	andl	$8, %eax
	testb	%al, %al
	je	L197
	movb	%bl, 4(%ecx)
L197:
	movb	%dl, %al
	andl	$4, %eax
	testb	%al, %al
	je	L198
	movb	%bl, 5(%ecx)
L198:
	movb	%dl, %al
	andl	$2, %eax
	testb	%al, %al
	je	L199
	movb	%bl, 6(%ecx)
L199:
	andl	$1, %edx
	testb	%dl, %dl
	je	L191
	movb	%bl, 7(%ecx)
L191:
	incl	%esi
	cmpl	$15, %esi
	jle	L201
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _putFont8_asc
	.def	_putFont8_asc;	.scl	2;	.type	32;	.endef
_putFont8_asc:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%eax
	movl	28(%ebp), %ebx
	movb	24(%ebp), %al
	movb	%al, -13(%ebp)
	movl	16(%ebp), %esi
	movl	20(%ebp), %edi
	cmpb	$0, (%ebx)
	jne	L209
L211:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L209:
	movzbl	(%ebx), %eax
	sall	$4, %eax
	incl	%ebx
	addl	$_font, %eax
	pushl	%eax
	movsbl	-13(%ebp),%eax
	pushl	%eax
	pushl	%edi
	pushl	%esi
	addl	$8, %esi
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_putFont8
	addl	$24, %esp
	cmpb	$0, (%ebx)
	jne	L209
	jmp	L211
	.balign 2
.globl _putFont8AscSheet
	.def	_putFont8AscSheet;	.scl	2;	.type	32;	.endef
_putFont8AscSheet:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	16(%ebp), %edi
	movl	%eax, -16(%ebp)
	movl	20(%ebp), %ebx
	movl	12(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	28(%ebp), %eax
	movl	%eax, -24(%ebp)
	leal	15(%edi), %eax
	pushl	%eax
	movl	-20(%ebp), %eax
	movl	32(%ebp), %esi
	movsbl	%bl,%ebx
	leal	(%eax,%esi,8), %esi
	leal	-1(%esi), %eax
	pushl	%eax
	pushl	%edi
	pushl	-20(%ebp)
	movzbl	24(%ebp), %eax
	pushl	%eax
	movl	-16(%ebp), %eax
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	pushl	-24(%ebp)
	pushl	%ebx
	pushl	%edi
	pushl	-20(%ebp)
	movl	-16(%ebp), %eax
	pushl	4(%eax)
	pushl	(%eax)
	call	_putFont8_asc
	movl	%edi, 16(%ebp)
	leal	16(%edi), %eax
	movl	%esi, 20(%ebp)
	movl	%eax, 24(%ebp)
	addl	$52, %esp
	movl	-20(%ebp), %eax
	movl	%eax, 12(%ebp)
	movl	-16(%ebp), %eax
	movl	%eax, 8(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_sheetRefresh
	.data
_cursor.1:
	.ascii "*..............."
	.ascii "**.............."
	.ascii "*O*............."
	.ascii "*OO*............"
	.ascii "*OOO*..........."
	.ascii "*OOOO*.........."
	.ascii "*OOOOO*........."
	.ascii "*OOOOOO*........"
	.ascii "*OOOOOOO*......."
	.ascii "*OOOO*****......"
	.ascii "*OO*O*.........."
	.ascii "*O*.*O*........."
	.ascii "**..*O*........."
	.ascii "*....*O*........"
	.ascii ".....*O*........"
	.ascii "......*........."
	.text
	.balign 2
.globl _initMouseCursor8
	.def	_initMouseCursor8;	.scl	2;	.type	32;	.endef
_initMouseCursor8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%edi, %edi
	pushl	%ebx
	xorl	%ebx, %ebx
	pushl	%eax
	movb	12(%ebp), %al
	movl	8(%ebp), %esi
	movb	%al, -13(%ebp)
L226:
	xorl	%edx, %edx
L225:
	leal	(%edx,%edi), %eax
	cmpb	$42, _cursor.1(%eax)
	je	L231
L222:
	cmpb	$79, _cursor.1(%eax)
	je	L232
L223:
	cmpb	$46, _cursor.1(%eax)
	je	L233
L220:
	incl	%edx
	cmpl	$15, %edx
	jle	L225
	incl	%ebx
	addl	$16, %edi
	cmpl	$15, %ebx
	jle	L226
	popl	%eax
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L233:
	movb	-13(%ebp), %cl
	movb	%cl, (%eax,%esi)
	jmp	L220
L232:
	movb	$7, (%eax,%esi)
	jmp	L223
L231:
	movb	$0, (%eax,%esi)
	jmp	L222
	.balign 2
.globl _putblock8_8
	.def	_putblock8_8;	.scl	2;	.type	32;	.endef
_putblock8_8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%esi, %esi
	pushl	%ebx
	subl	$12, %esp
	cmpl	20(%ebp), %esi
	jge	L246
	xorl	%edi, %edi
L244:
	xorl	%ebx, %ebx
	cmpl	16(%ebp), %ebx
	jge	L248
	movl	32(%ebp), %eax
	addl	%edi, %eax
	movl	%eax, -20(%ebp)
L243:
	movl	28(%ebp), %eax
	movl	24(%ebp), %edx
	addl	%esi, %eax
	addl	%ebx, %edx
	imull	12(%ebp), %eax
	addl	%edx, %eax
	movl	8(%ebp), %ecx
	movl	-20(%ebp), %edx
	incl	%ebx
	movb	(%edx), %dl
	movb	%dl, (%eax,%ecx)
	incl	-20(%ebp)
	cmpl	16(%ebp), %ebx
	jl	L243
L248:
	incl	%esi
	addl	36(%ebp), %edi
	cmpl	20(%ebp), %esi
	jl	L244
L246:
	addl	$12, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _memtest
	.def	_memtest;	.scl	2;	.type	32;	.endef
_memtest:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	xorl	%esi, %esi
	call	_io_load_eflags
	orl	$262144, %eax
	pushl	%eax
	call	_io_store_eflags
	call	_io_load_eflags
	popl	%edx
	testl	$262144, %eax
	je	L250
	movl	$1, %esi
L250:
	andl	$-262145, %eax
	pushl	%eax
	call	_io_store_eflags
	movl	%esi, %eax
	popl	%ebx
	testb	%al, %al
	jne	L253
L251:
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_memtest_sub
	movl	%eax, %ebx
	popl	%eax
	movl	%esi, %eax
	popl	%edx
	testb	%al, %al
	jne	L254
L252:
	leal	-8(%ebp), %esp
	movl	%ebx, %eax
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L254:
	call	_loadCr0
	andl	$-1610612737, %eax
	pushl	%eax
	call	_storeCr0
	popl	%eax
	jmp	L252
L253:
	call	_loadCr0
	orl	$1610612736, %eax
	pushl	%eax
	call	_storeCr0
	popl	%ecx
	jmp	L251
	.balign 2
.globl _memsegTotal
	.def	_memsegTotal;	.scl	2;	.type	32;	.endef
_memsegTotal:
	pushl	%ebp
	xorl	%eax, %eax
	movl	%esp, %ebp
	xorl	%edx, %edx
	pushl	%ebx
	movl	8(%ebp), %ebx
	movl	(%ebx), %ecx
	cmpl	%ecx, %eax
	jae	L262
L260:
	addl	20(%ebx,%edx,8), %eax
	incl	%edx
	cmpl	%ecx, %edx
	jb	L260
L262:
	popl	%ebx
	popl	%ebp
	ret
	.balign 2
.globl _memsegInit
	.def	_memsegInit;	.scl	2;	.type	32;	.endef
_memsegInit:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	$0, 8(%eax)
	movl	$0, 12(%eax)
	popl	%ebp
	ret
	.balign 2
.globl _memsegAlloc
	.def	_memsegAlloc;	.scl	2;	.type	32;	.endef
_memsegAlloc:
	pushl	%ebp
	xorl	%ecx, %ecx
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	movl	12(%ebp), %esi
	movl	8(%ebp), %ebx
	movl	(%ebx), %eax
	cmpl	%eax, %ecx
	jae	L278
L276:
	movl	20(%ebx,%ecx,8), %edx
	cmpl	%esi, %edx
	jae	L280
	incl	%ecx
	cmpl	%eax, %ecx
	jb	L276
L278:
	xorl	%eax, %eax
L264:
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L280:
	movl	16(%ebx,%ecx,8), %edi
	leal	(%esi,%edi), %eax
	movl	%eax, 16(%ebx,%ecx,8)
	movl	%edx, %eax
	subl	%esi, %eax
	movl	%eax, 20(%ebx,%ecx,8)
	testl	%eax, %eax
	jne	L270
	movl	(%ebx), %eax
	decl	%eax
	movl	%eax, (%ebx)
	cmpl	%eax, %ecx
	jae	L270
	movl	%eax, %esi
L275:
	movl	24(%ebx,%ecx,8), %eax
	movl	28(%ebx,%ecx,8), %edx
	movl	%eax, 16(%ebx,%ecx,8)
	movl	%edx, 20(%ebx,%ecx,8)
	incl	%ecx
	cmpl	%esi, %ecx
	jb	L275
L270:
	movl	%edi, %eax
	jmp	L264
	.balign 2
.globl _memsegFree
	.def	_memsegFree;	.scl	2;	.type	32;	.endef
_memsegFree:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	movl	8(%ebp), %esi
	pushl	%ebx
	xorl	%ebx, %ebx
	movl	(%esi), %edi
	cmpl	%edi, %ebx
	jge	L283
L287:
	movl	12(%ebp), %eax
	cmpl	%eax, 16(%esi,%ebx,8)
	ja	L283
	incl	%ebx
	cmpl	%edi, %ebx
	jl	L287
L283:
	testl	%ebx, %ebx
	jle	L288
	movl	12(%esi,%ebx,8), %edx
	movl	8(%esi,%ebx,8), %eax
	addl	%edx, %eax
	cmpl	12(%ebp), %eax
	je	L308
L288:
	cmpl	%edi, %ebx
	jge	L295
	movl	12(%ebp), %eax
	addl	16(%ebp), %eax
	cmpl	16(%esi,%ebx,8), %eax
	je	L309
L295:
	cmpl	$4089, %edi
	jg	L296
	movl	%edi, %ecx
	cmpl	%ebx, %edi
	jle	L306
L301:
	movl	8(%esi,%ecx,8), %eax
	movl	12(%esi,%ecx,8), %edx
	movl	%eax, 16(%esi,%ecx,8)
	movl	%edx, 20(%esi,%ecx,8)
	decl	%ecx
	cmpl	%ebx, %ecx
	jg	L301
L306:
	leal	1(%edi), %eax
	movl	%eax, (%esi)
	cmpl	%eax, 4(%esi)
	jge	L302
	movl	%eax, 4(%esi)
L302:
	movl	12(%ebp), %eax
	movl	%eax, 16(%esi,%ebx,8)
	movl	16(%ebp), %eax
	movl	%eax, 20(%esi,%ebx,8)
L307:
	xorl	%eax, %eax
L281:
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L296:
	movl	16(%ebp), %eax
	incl	12(%esi)
	addl	%eax, 8(%esi)
	orl	$-1, %eax
	jmp	L281
L309:
	movl	12(%ebp), %eax
	movl	%eax, 16(%esi,%ebx,8)
	movl	16(%ebp), %eax
	addl	%eax, 20(%esi,%ebx,8)
	jmp	L307
L308:
	addl	16(%ebp), %edx
	movl	%edx, 12(%esi,%ebx,8)
	cmpl	(%esi), %ebx
	jge	L307
	movl	12(%ebp), %eax
	addl	16(%ebp), %eax
	cmpl	16(%esi,%ebx,8), %eax
	jne	L307
	addl	20(%esi,%ebx,8), %edx
	movl	%edx, 12(%esi,%ebx,8)
	movl	(%esi), %eax
	decl	%eax
	movl	%eax, (%esi)
	cmpl	%eax, %ebx
	jge	L307
	movl	%eax, %ecx
L294:
	movl	24(%esi,%ebx,8), %eax
	movl	28(%esi,%ebx,8), %edx
	movl	%eax, 16(%esi,%ebx,8)
	movl	%edx, 20(%esi,%ebx,8)
	incl	%ebx
	cmpl	%ecx, %ebx
	jl	L294
	jmp	L307
	.balign 2
.globl _memsegAlloc4K
	.def	_memsegAlloc4K;	.scl	2;	.type	32;	.endef
_memsegAlloc4K:
	pushl	%ebp
	movl	%esp, %ebp
	movl	12(%ebp), %eax
	addl	$4095, %eax
	andl	$-4096, %eax
	movl	%eax, 12(%ebp)
	popl	%ebp
	jmp	_memsegAlloc
	.balign 2
.globl _memsegFree4K
	.def	_memsegFree4K;	.scl	2;	.type	32;	.endef
_memsegFree4K:
	pushl	%ebp
	movl	%esp, %ebp
	movl	16(%ebp), %eax
	addl	$4095, %eax
	andl	$-4096, %eax
	movl	%eax, 16(%ebp)
	popl	%ebp
	jmp	_memsegFree
	.balign 2
.globl _shtctlInit
	.def	_shtctlInit;	.scl	2;	.type	32;	.endef
_shtctlInit:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	movl	8(%ebp), %esi
	pushl	$10260
	movl	16(%ebp), %edi
	pushl	%esi
	call	_memsegAlloc4K
	popl	%ecx
	movl	%eax, %ebx
	popl	%eax
	xorl	%eax, %eax
	testl	%ebx, %ebx
	je	L312
	movl	20(%ebp), %eax
	imull	%edi, %eax
	pushl	%eax
	pushl	%esi
	call	_memsegAlloc4K
	testl	%eax, %eax
	movl	%eax, 4(%ebx)
	popl	%ecx
	popl	%edx
	je	L323
	movl	12(%ebp), %eax
	movl	%edi, 8(%ebx)
	movl	%eax, (%ebx)
	leal	9180(%ebx), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%ebx)
	movl	%ebx, %eax
	movl	$-1, 16(%ebx)
L319:
	movl	$0, 1072(%eax)
	movl	%ebx, 1076(%eax)
	addl	$36, %eax
	cmpl	%edx, %eax
	jle	L319
L322:
	movl	%ebx, %eax
L312:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L323:
	pushl	$10260
	pushl	%ebx
	pushl	%esi
	call	_memsegFree4K
	jmp	L322
	.balign 2
.globl _sheetAlloc
	.def	_sheetAlloc;	.scl	2;	.type	32;	.endef
_sheetAlloc:
	pushl	%ebp
	xorl	%edx, %edx
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	addl	$1044, %eax
L330:
	cmpl	$0, 28(%eax)
	je	L333
	incl	%edx
	addl	$36, %eax
	cmpl	$255, %edx
	jle	L330
	xorl	%eax, %eax
L324:
	popl	%ebp
	ret
L333:
	movl	$1, 28(%eax)
	movl	$-1, 24(%eax)
	jmp	L324
	.balign 2
.globl _sheetSetbuf
	.def	_sheetSetbuf;	.scl	2;	.type	32;	.endef
_sheetSetbuf:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %edx
	movl	12(%ebp), %eax
	movl	%eax, (%edx)
	movl	16(%ebp), %eax
	movl	%eax, 4(%edx)
	movl	20(%ebp), %eax
	movl	%eax, 8(%edx)
	movl	24(%ebp), %eax
	movl	%eax, 20(%edx)
	popl	%ebp
	ret
	.balign 2
.globl _sheetRefreshMap
	.def	_sheetRefreshMap;	.scl	2;	.type	32;	.endef
_sheetRefreshMap:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$40, %esp
	movl	8(%ebp), %eax
	cmpl	$0, 12(%ebp)
	movl	4(%eax), %eax
	movl	%eax, -40(%ebp)
	js	L366
L336:
	cmpl	$0, 16(%ebp)
	js	L367
L337:
	movl	8(%ebp), %edx
	movl	8(%edx), %eax
	cmpl	%eax, 20(%ebp)
	jle	L338
	movl	%eax, 20(%ebp)
L338:
	movl	8(%ebp), %esi
	movl	12(%esi), %eax
	cmpl	%eax, 24(%ebp)
	jle	L339
	movl	%eax, 24(%ebp)
L339:
	movl	8(%ebp), %eax
	movl	28(%ebp), %edi
	movl	%edi, -16(%ebp)
	cmpl	16(%eax), %edi
	jg	L361
L359:
	movl	8(%ebp), %esi
	movl	-16(%ebp), %edx
	movl	16(%ebp), %ebx
	movl	20(%esi,%edx,4), %ecx
	movl	%ecx, %eax
	subl	%esi, %eax
	movl	(%ecx), %edi
	subl	$1044, %eax
	movl	16(%ecx), %edx
	sarl	$2, %eax
	movl	%edi, -32(%ebp)
	imull	$954437177, %eax, %eax
	movl	24(%ebp), %edi
	subl	%edx, %ebx
	subl	%edx, %edi
	movb	%al, -33(%ebp)
	movl	20(%ebp), %esi
	movl	12(%ebp), %edx
	movl	12(%ecx), %eax
	movl	%edi, -44(%ebp)
	subl	%eax, %esi
	subl	%eax, %edx
	movl	%esi, -52(%ebp)
	movl	%edx, -28(%ebp)
	js	L368
L344:
	testl	%ebx, %ebx
	js	L369
L345:
	movl	4(%ecx), %eax
	cmpl	%eax, -52(%ebp)
	jle	L346
	movl	%eax, -52(%ebp)
L346:
	movl	8(%ecx), %eax
	cmpl	%eax, -44(%ebp)
	jle	L347
	movl	%eax, -44(%ebp)
L347:
	cmpl	-44(%ebp), %ebx
	jge	L363
L358:
	movl	16(%ecx), %esi
	movl	-28(%ebp), %edx
	addl	%ebx, %esi
	cmpl	-52(%ebp), %edx
	movl	%esi, -24(%ebp)
	jge	L365
L357:
	movl	%ebx, %eax
	movl	12(%ecx), %edi
	imull	4(%ecx), %eax
	addl	%edx, %edi
	movl	-32(%ebp), %esi
	addl	%edx, %eax
	movl	%edi, -20(%ebp)
	movzbl	(%eax,%esi), %esi
	cmpl	20(%ecx), %esi
	je	L354
	movl	8(%ebp), %edi
	movl	-24(%ebp), %eax
	movl	-40(%ebp), %esi
	imull	8(%edi), %eax
	addl	-20(%ebp), %eax
	movl	%eax, -48(%ebp)
	movb	-33(%ebp), %al
	movl	-48(%ebp), %edi
	movb	%al, (%edi,%esi)
L354:
	incl	%edx
	cmpl	-52(%ebp), %edx
	jl	L357
L365:
	incl	%ebx
	cmpl	-44(%ebp), %ebx
	jl	L358
L363:
	movl	8(%ebp), %edx
	incl	-16(%ebp)
	movl	-16(%ebp), %eax
	cmpl	16(%edx), %eax
	jle	L359
L361:
	addl	$40, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L369:
	xorl	%ebx, %ebx
	jmp	L345
L368:
	movl	$0, -28(%ebp)
	jmp	L344
L367:
	movl	$0, 16(%ebp)
	jmp	L337
L366:
	movl	$0, 12(%ebp)
	jmp	L336
	.balign 2
.globl _sheetUpdown
	.def	_sheetUpdown;	.scl	2;	.type	32;	.endef
_sheetUpdown:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	movl	8(%ebp), %edi
	pushl	%ebx
	movl	12(%ebp), %esi
	movl	32(%edi), %ebx
	movl	24(%edi), %eax
	movl	16(%ebx), %edx
	incl	%edx
	cmpl	%edx, %esi
	jle	L371
	movl	%edx, %esi
L371:
	cmpl	$-1, %esi
	jge	L372
	orl	$-1, %esi
L372:
	movl	%esi, 24(%edi)
	cmpl	%esi, %eax
	jle	L373
	testl	%esi, %esi
	js	L374
	movl	%eax, %ecx
L379:
	movl	16(%ebx,%ecx,4), %eax
	movl	%eax, 20(%ebx,%ecx,4)
	movl	%ecx, 24(%eax)
	decl	%ecx
	cmpl	%esi, %ecx
	jg	L379
	movl	%edi, 20(%ebx,%esi,4)
	leal	1(%esi), %ebx
	pushl	%ebx
	movl	16(%edi), %ecx
	movl	%ecx, %eax
	addl	8(%edi), %eax
	pushl	%eax
	movl	12(%edi), %edx
	movl	%edx, %eax
	addl	4(%edi), %eax
	pushl	%eax
	pushl	%ecx
	pushl	%edx
	pushl	32(%edi)
	call	_sheetRefreshMap
	pushl	%ebx
L408:
	movl	16(%edi), %ecx
	movl	%ecx, %eax
	addl	8(%edi), %eax
	pushl	%eax
	movl	12(%edi), %edx
	movl	%edx, %eax
	addl	4(%edi), %eax
	pushl	%eax
	pushl	%ecx
	pushl	%edx
	pushl	32(%edi)
	call	_sheetRefreshSub
	addl	$48, %esp
L370:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L374:
	movl	16(%ebx), %edx
	cmpl	%eax, %edx
	jle	L381
	movl	%eax, %ecx
	cmpl	%edx, %eax
	jge	L381
L386:
	movl	24(%ebx,%ecx,4), %eax
	movl	%eax, 20(%ebx,%ecx,4)
	movl	%ecx, 24(%eax)
	incl	%ecx
	cmpl	16(%ebx), %ecx
	jl	L386
L381:
	decl	16(%ebx)
	pushl	$0
	movl	16(%edi), %ecx
	movl	%ecx, %eax
	addl	8(%edi), %eax
	pushl	%eax
	movl	12(%edi), %edx
	movl	%edx, %eax
	addl	4(%edi), %eax
	pushl	%eax
	pushl	%ecx
	pushl	%edx
	pushl	32(%edi)
	call	_sheetRefreshMap
	pushl	$0
	jmp	L408
L373:
	cmpl	%esi, %eax
	jge	L370
	testl	%eax, %eax
	js	L389
	movl	%eax, %ecx
	cmpl	%esi, %eax
	jge	L405
L394:
	movl	24(%ebx,%ecx,4), %eax
	movl	%eax, 20(%ebx,%ecx,4)
	movl	%ecx, 24(%eax)
	incl	%ecx
	cmpl	%esi, %ecx
	jl	L394
L405:
	movl	%edi, 20(%ebx,%esi,4)
L395:
	pushl	%esi
	movl	16(%edi), %ecx
	movl	%ecx, %eax
	addl	8(%edi), %eax
	pushl	%eax
	movl	12(%edi), %edx
	movl	%edx, %eax
	addl	4(%edi), %eax
	pushl	%eax
	pushl	%ecx
	pushl	%edx
	pushl	32(%edi)
	call	_sheetRefreshMap
	pushl	%esi
	jmp	L408
L389:
	movl	16(%ebx), %ecx
	cmpl	%esi, %ecx
	jl	L407
L400:
	movl	20(%ebx,%ecx,4), %edx
	leal	1(%ecx), %eax
	movl	%edx, 24(%ebx,%ecx,4)
	decl	%ecx
	movl	%eax, 24(%edx)
	cmpl	%esi, %ecx
	jge	L400
L407:
	movl	%edi, 20(%ebx,%esi,4)
	incl	16(%ebx)
	jmp	L395
	.balign 2
.globl _sheetRefresh
	.def	_sheetRefresh;	.scl	2;	.type	32;	.endef
_sheetRefresh:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	8(%ebp), %ebx
	movl	24(%ebx), %eax
	testl	%eax, %eax
	js	L409
	pushl	%eax
	movl	16(%ebx), %ecx
	movl	%ecx, %eax
	addl	16(%ebp), %ecx
	addl	24(%ebp), %eax
	pushl	%eax
	movl	12(%ebx), %edx
	movl	%edx, %eax
	addl	12(%ebp), %edx
	addl	20(%ebp), %eax
	pushl	%eax
	pushl	%ecx
	pushl	%edx
	pushl	32(%ebx)
	call	_sheetRefreshSub
	addl	$24, %esp
L409:
	movl	-4(%ebp), %ebx
	leave
	ret
	.balign 2
.globl _sheetRefreshSub
	.def	_sheetRefreshSub;	.scl	2;	.type	32;	.endef
_sheetRefreshSub:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$44, %esp
	movl	8(%ebp), %eax
	movl	8(%ebp), %edx
	cmpl	$0, 12(%ebp)
	movl	(%eax), %eax
	movl	4(%edx), %edx
	movl	%eax, -36(%ebp)
	movl	%edx, -40(%ebp)
	js	L442
L412:
	cmpl	$0, 16(%ebp)
	js	L443
L413:
	movl	8(%ebp), %esi
	movl	8(%esi), %eax
	cmpl	%eax, 20(%ebp)
	jle	L414
	movl	%eax, 20(%ebp)
L414:
	movl	8(%ebp), %edi
	movl	12(%edi), %eax
	cmpl	%eax, 24(%ebp)
	jle	L415
	movl	%eax, 24(%ebp)
L415:
	movl	8(%ebp), %edx
	movl	28(%ebp), %eax
	movl	%eax, -16(%ebp)
	cmpl	16(%edx), %eax
	jg	L437
L435:
	movl	8(%ebp), %edi
	movl	-16(%ebp), %esi
	movl	16(%ebp), %ecx
	movl	20(%edi,%esi,4), %ebx
	movl	20(%ebp), %esi
	movl	%ebx, %eax
	subl	%edi, %eax
	movl	16(%ebx), %edx
	subl	$1044, %eax
	movl	24(%ebp), %edi
	sarl	$2, %eax
	subl	%edx, %edi
	imull	$954437177, %eax, %eax
	movb	%al, -41(%ebp)
	subl	%edx, %ecx
	movl	(%ebx), %eax
	movl	12(%ebp), %edx
	movl	%eax, -32(%ebp)
	movl	%edi, -56(%ebp)
	movl	12(%ebx), %eax
	subl	%eax, %esi
	subl	%eax, %edx
	movl	%esi, -28(%ebp)
	movl	%edx, -24(%ebp)
	js	L444
L420:
	testl	%ecx, %ecx
	js	L445
L421:
	movl	4(%ebx), %eax
	cmpl	%eax, -28(%ebp)
	jle	L422
	movl	%eax, -28(%ebp)
L422:
	movl	8(%ebx), %eax
	cmpl	%eax, -56(%ebp)
	jle	L423
	movl	%eax, -56(%ebp)
L423:
	movl	%ecx, %esi
	cmpl	-56(%ebp), %ecx
	jge	L439
L434:
	movl	16(%ebx), %edi
	movl	-24(%ebp), %ecx
	addl	%esi, %edi
	cmpl	-28(%ebp), %ecx
	movl	%edi, -20(%ebp)
	jge	L441
L433:
	movl	8(%ebp), %edx
	movl	-20(%ebp), %edi
	movl	12(%ebx), %eax
	imull	8(%edx), %edi
	addl	%ecx, %eax
	movb	-41(%ebp), %dl
	addl	%edi, %eax
	movl	-40(%ebp), %edi
	movl	%eax, -52(%ebp)
	cmpb	%dl, (%eax,%edi)
	je	L446
L430:
	incl	%ecx
	cmpl	-28(%ebp), %ecx
	jl	L433
L441:
	incl	%esi
	cmpl	-56(%ebp), %esi
	jl	L434
L439:
	movl	8(%ebp), %edi
	incl	-16(%ebp)
	movl	-16(%ebp), %esi
	cmpl	16(%edi), %esi
	jle	L435
L437:
	addl	$44, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L446:
	movl	%esi, %eax
	movl	-32(%ebp), %edx
	imull	4(%ebx), %eax
	addl	%ecx, %eax
	movl	-36(%ebp), %edi
	movb	(%eax,%edx), %al
	movl	-52(%ebp), %edx
	movb	%al, (%edx,%edi)
	jmp	L430
L445:
	xorl	%ecx, %ecx
	jmp	L421
L444:
	movl	$0, -24(%ebp)
	jmp	L420
L443:
	movl	$0, 16(%ebp)
	jmp	L413
L442:
	movl	$0, 12(%ebp)
	jmp	L412
	.balign 2
.globl _sheetSlide
	.def	_sheetSlide;	.scl	2;	.type	32;	.endef
_sheetSlide:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	movl	12(%ebp), %eax
	movl	8(%ebp), %ebx
	movl	12(%ebx), %edi
	movl	16(%ebx), %esi
	movl	%eax, 12(%ebx)
	movl	16(%ebp), %eax
	movl	%eax, 16(%ebx)
	cmpl	$0, 24(%ebx)
	js	L447
	pushl	$0
	movl	%esi, %eax
	addl	8(%ebx), %eax
	pushl	%eax
	movl	%edi, %eax
	addl	4(%ebx), %eax
	pushl	%eax
	pushl	%esi
	pushl	%edi
	pushl	32(%ebx)
	call	_sheetRefreshMap
	movl	16(%ebp), %eax
	pushl	24(%ebx)
	addl	8(%ebx), %eax
	pushl	%eax
	movl	12(%ebp), %eax
	addl	4(%ebx), %eax
	pushl	%eax
	pushl	16(%ebp)
	pushl	12(%ebp)
	pushl	32(%ebx)
	call	_sheetRefreshMap
	movl	%esi, %eax
	addl	$48, %esp
	pushl	$0
	addl	8(%ebx), %eax
	pushl	%eax
	movl	%edi, %eax
	addl	4(%ebx), %eax
	pushl	%eax
	pushl	%esi
	pushl	%edi
	pushl	32(%ebx)
	call	_sheetRefreshSub
	movl	16(%ebp), %eax
	pushl	24(%ebx)
	addl	8(%ebx), %eax
	pushl	%eax
	movl	12(%ebp), %eax
	addl	4(%ebx), %eax
	pushl	%eax
	pushl	16(%ebp)
	pushl	12(%ebp)
	pushl	32(%ebx)
	call	_sheetRefreshSub
	addl	$48, %esp
L447:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _sheetFree
	.def	_sheetFree;	.scl	2;	.type	32;	.endef
_sheetFree:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	8(%ebp), %ebx
	cmpl	$0, 24(%ebx)
	js	L450
	pushl	$-1
	pushl	%ebx
	call	_sheetUpdown
	popl	%eax
	popl	%edx
L450:
	movl	$0, 28(%ebx)
	movl	-4(%ebp), %ebx
	leave
	ret
	.balign 2
.globl _makeTextBox
	.def	_makeTextBox;	.scl	2;	.type	32;	.endef
_makeTextBox:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$20, %esp
	movl	12(%ebp), %eax
	movl	16(%ebp), %esi
	addl	20(%ebp), %eax
	subl	$3, %esi
	pushl	%esi
	movl	%eax, -16(%ebp)
	movl	16(%ebp), %eax
	addl	24(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-16(%ebp), %eax
	incl	%eax
	pushl	%eax
	movl	%eax, -24(%ebp)
	movl	12(%ebp), %eax
	pushl	%esi
	subl	$2, %eax
	pushl	%eax
	movl	%eax, -28(%ebp)
	movl	8(%ebp), %eax
	pushl	$15
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	movl	12(%ebp), %edi
	movl	-20(%ebp), %eax
	subl	$3, %edi
	incl	%eax
	pushl	%eax
	movl	%eax, -32(%ebp)
	pushl	%edi
	movl	8(%ebp), %eax
	pushl	%esi
	pushl	%edi
	pushl	$15
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	movl	8(%ebp), %eax
	addl	$56, %esp
	movl	-20(%ebp), %ebx
	addl	$2, %ebx
	pushl	%ebx
	pushl	-24(%ebp)
	pushl	%ebx
	pushl	%edi
	pushl	$7
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	movl	-16(%ebp), %eax
	pushl	%ebx
	addl	$2, %eax
	pushl	%eax
	pushl	%esi
	pushl	%eax
	movl	8(%ebp), %eax
	pushl	$7
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	movl	8(%ebp), %eax
	addl	$56, %esp
	movl	16(%ebp), %ebx
	subl	$2, %ebx
	movl	12(%ebp), %edi
	pushl	%ebx
	decl	%edi
	pushl	-16(%ebp)
	pushl	%ebx
	pushl	%edi
	pushl	$0
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	movl	8(%ebp), %eax
	pushl	-20(%ebp)
	pushl	-28(%ebp)
	pushl	%ebx
	pushl	-28(%ebp)
	pushl	$0
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	movl	8(%ebp), %eax
	addl	$56, %esp
	pushl	-32(%ebp)
	pushl	-16(%ebp)
	pushl	-32(%ebp)
	pushl	-28(%ebp)
	pushl	$8
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	movl	8(%ebp), %eax
	pushl	-32(%ebp)
	pushl	-24(%ebp)
	pushl	%ebx
	pushl	-24(%ebp)
	pushl	$8
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	movl	16(%ebp), %eax
	addl	$56, %esp
	decl	%eax
	pushl	-20(%ebp)
	pushl	-16(%ebp)
	pushl	%eax
	pushl	%edi
	movzbl	28(%ebp), %eax
	pushl	%eax
	movl	8(%ebp), %eax
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.data
_closeBtn.2:
	.ascii "OOOOOOOOOOOOOOO@"
	.ascii "OQQQQQQQQQQQQQ$@"
	.ascii "OQQQQQQQQQQQQQ$@"
	.ascii "OQQQ@@QQQQ@@QQ$@"
	.ascii "OQQQQ@@QQ@@QQQ$@"
	.ascii "OQQQQQ@@@@QQQQ$@"
	.ascii "OQQQQQQ@@QQQQQ$@"
	.ascii "OQQQQQ@@@@QQQQ$@"
	.ascii "OQQQQ@@QQ@@QQQ$@"
	.ascii "OQQQ@@QQQQ@@QQ$@"
	.ascii "OQQQQQQQQQQQQQ$@"
	.ascii "OQQQQQQQQQQQQQ$@"
	.ascii "O$$$$$$$$$$$$$$@"
	.ascii "@@@@@@@@@@@@@@@@"
	.text
	.balign 2
.globl _makeWindowTitle
	.def	_makeWindowTitle;	.scl	2;	.type	32;	.endef
_makeWindowTitle:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%ecx
	cmpb	$0, 20(%ebp)
	je	L453
	movb	$7, %bl
	movb	$12, %dl
L454:
	movl	12(%ebp), %eax
	pushl	$20
	subl	$4, %eax
	xorl	%edi, %edi
	pushl	%eax
	pushl	$3
	pushl	$3
	movzbl	%dl, %eax
	pushl	%eax
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	pushl	16(%ebp)
	movsbl	%bl,%eax
	pushl	%eax
	pushl	$4
	pushl	$24
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_putFont8_asc
	addl	$52, %esp
	imull	$5, 12(%ebp), %ebx
	movl	$0, -16(%ebp)
L470:
	movl	12(%ebp), %eax
	movl	8(%ebp), %edx
	addl	%ebx, %eax
	xorl	%esi, %esi
	leal	-21(%edx,%eax), %ecx
L469:
	movb	_closeBtn.2(%esi,%edi), %dl
	cmpb	$64, %dl
	je	L475
	cmpb	$36, %dl
	je	L476
	cmpb	$81, %dl
	movb	$8, %dl
	setne	%al
	subb	%al, %dl
L464:
	incl	%esi
	movb	%dl, (%ecx)
	incl	%ecx
	cmpl	$15, %esi
	jle	L469
	incl	-16(%ebp)
	addl	$16, %edi
	addl	12(%ebp), %ebx
	cmpl	$13, -16(%ebp)
	jle	L470
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L476:
	movb	$15, %dl
	jmp	L464
L475:
	xorl	%edx, %edx
	jmp	L464
L453:
	movb	$8, %bl
	movb	$15, %dl
	jmp	L454
	.balign 2
.globl _makeWindow
	.def	_makeWindow;	.scl	2;	.type	32;	.endef
_makeWindow:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$24, %esp
	movl	16(%ebp), %eax
	movl	12(%ebp), %ebx
	movl	%eax, -16(%ebp)
	movl	8(%ebp), %esi
	movl	20(%ebp), %eax
	movl	%eax, -20(%ebp)
	movsbl	24(%ebp),%eax
	movl	%eax, -24(%ebp)
	leal	-1(%ebx), %eax
	pushl	$0
	movl	%eax, -28(%ebp)
	pushl	%eax
	pushl	$0
	pushl	$0
	pushl	$8
	pushl	%ebx
	pushl	%esi
	call	_boxFill8
	leal	-2(%ebx), %eax
	pushl	$1
	movl	%eax, -32(%ebp)
	pushl	%eax
	pushl	$1
	pushl	$1
	pushl	$7
	pushl	%ebx
	pushl	%esi
	call	_boxFill8
	movl	-16(%ebp), %eax
	addl	$56, %esp
	decl	%eax
	movl	%eax, -36(%ebp)
	pushl	%eax
	pushl	$0
	pushl	$0
	pushl	$0
	pushl	$8
	pushl	%ebx
	pushl	%esi
	call	_boxFill8
	movl	-16(%ebp), %edi
	subl	$2, %edi
	pushl	%edi
	pushl	$1
	pushl	$1
	pushl	$1
	pushl	$7
	pushl	%ebx
	pushl	%esi
	call	_boxFill8
	addl	$56, %esp
	pushl	%edi
	pushl	-32(%ebp)
	pushl	$1
	pushl	-32(%ebp)
	pushl	$15
	pushl	%ebx
	pushl	%esi
	call	_boxFill8
	pushl	-36(%ebp)
	pushl	-28(%ebp)
	pushl	$0
	pushl	-28(%ebp)
	pushl	$0
	pushl	%ebx
	pushl	%esi
	call	_boxFill8
	movl	-16(%ebp), %eax
	addl	$56, %esp
	subl	$3, %eax
	pushl	%eax
	leal	-3(%ebx), %eax
	pushl	%eax
	pushl	$2
	pushl	$2
	pushl	$8
	pushl	%ebx
	pushl	%esi
	call	_boxFill8
	pushl	%edi
	pushl	-32(%ebp)
	pushl	%edi
	pushl	$1
	pushl	$15
	pushl	%ebx
	pushl	%esi
	call	_boxFill8
	addl	$56, %esp
	pushl	-36(%ebp)
	pushl	-28(%ebp)
	pushl	-36(%ebp)
	pushl	$0
	pushl	$0
	pushl	%ebx
	pushl	%esi
	call	_boxFill8
	movl	%esi, 8(%ebp)
	movl	-24(%ebp), %eax
	movl	%ebx, 12(%ebp)
	movl	%eax, 20(%ebp)
	addl	$28, %esp
	movl	-20(%ebp), %eax
	movl	%eax, 16(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_makeWindowTitle
	.balign 2
.globl _consoleNewLine
	.def	_consoleNewLine;	.scl	2;	.type	32;	.endef
_consoleNewLine:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%ebx
	movl	8(%ebp), %eax
	movl	8(%ebp), %edx
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	8(%edx), %eax
	cmpl	$139, %eax
	jg	L479
	addl	$16, %eax
	movl	%eax, 8(%edx)
L480:
	movl	8(%ebp), %eax
	movl	$8, 4(%eax)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L479:
	movl	$28, %edi
L490:
	movl	$8, %esi
L489:
	movl	-16(%ebp), %eax
	movl	%edi, %edx
	movl	4(%eax), %ecx
	movl	(%eax), %ebx
	leal	16(%edi), %eax
	imull	%ecx, %eax
	imull	%ecx, %edx
	leal	(%eax,%esi), %eax
	leal	(%edx,%esi), %edx
	incl	%esi
	movb	(%eax,%ebx), %al
	cmpl	$247, %esi
	movb	%al, (%edx,%ebx)
	jle	L489
	incl	%edi
	cmpl	$139, %edi
	jle	L490
	movl	$140, %edi
L500:
	movl	$8, %esi
L499:
	movl	-16(%ebp), %edx
	movl	%edi, %eax
	movl	%edx, %ecx
	imull	4(%edx), %eax
	movl	(%edx), %edx
	leal	(%eax,%esi), %eax
	incl	%esi
	cmpl	$247, %esi
	movb	$0, (%eax,%edx)
	jle	L499
	incl	%edi
	cmpl	$155, %edi
	jle	L500
	pushl	$156
	pushl	$248
	pushl	$28
	pushl	$8
	pushl	%ecx
	call	_sheetRefresh
	addl	$20, %esp
	jmp	L480
	.data
LC0:
	.ascii " \0"
	.text
	.balign 2
.globl _consolePutchar
	.def	_consolePutchar;	.scl	2;	.type	32;	.endef
_consolePutchar:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	pushl	%eax
	movl	12(%ebp), %eax
	movb	16(%ebp), %dl
	movl	8(%ebp), %ebx
	movb	%dl, -7(%ebp)
	movb	%al, -6(%ebp)
	cmpb	$9, %al
	movb	$0, -5(%ebp)
	je	L511
	cmpb	$10, %al
	je	L523
	cmpb	$13, %al
	je	L509
	pushl	$1
	leal	-6(%ebp), %eax
	pushl	%eax
	pushl	$0
	pushl	$7
	pushl	8(%ebx)
	pushl	4(%ebx)
	pushl	(%ebx)
	call	_putFont8AscSheet
	addl	$28, %esp
	cmpb	$0, -7(%ebp)
	je	L509
	movl	4(%ebx), %eax
	addl	$8, %eax
	movl	%eax, 4(%ebx)
	cmpl	$248, %eax
	je	L523
L509:
	movl	-4(%ebp), %ebx
	leave
	ret
L523:
	pushl	%ebx
	call	_consoleNewLine
	popl	%eax
	jmp	L509
L511:
	pushl	$1
	pushl	$LC0
	pushl	$0
	pushl	$7
	pushl	8(%ebx)
	pushl	4(%ebx)
	pushl	(%ebx)
	call	_putFont8AscSheet
	addl	$28, %esp
	movl	4(%ebx), %eax
	addl	$8, %eax
	movl	%eax, 4(%ebx)
	cmpl	$248, %eax
	je	L524
L514:
	movl	4(%ebx), %eax
	subl	$8, %eax
	andl	$31, %eax
	jne	L511
	jmp	L509
L524:
	pushl	%ebx
	call	_consoleNewLine
	popl	%eax
	jmp	L514
	.data
LC1:
	.ascii "memory %dMB free : %dKB\0"
	.text
	.balign 2
.globl _cmdMem
	.def	_cmdMem;	.scl	2;	.type	32;	.endef
_cmdMem:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	subl	$32, %esp
	movl	8(%ebp), %esi
	movl	12(%ebp), %ebx
	shrl	$20, %ebx
	pushl	$3932160
	call	_memsegTotal
	shrl	$10, %eax
	movl	%eax, (%esp)
	pushl	%ebx
	pushl	$LC1
	leal	-40(%ebp), %ebx
	pushl	%ebx
	call	_sprintf
	pushl	$30
	pushl	%ebx
	pushl	$0
	pushl	$7
	pushl	8(%esi)
	pushl	$8
	pushl	(%esi)
	call	_putFont8AscSheet
	addl	$44, %esp
	pushl	%esi
	call	_consoleNewLine
	pushl	%esi
	call	_consoleNewLine
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
	.balign 2
.globl _cmdCls
	.def	_cmdCls;	.scl	2;	.type	32;	.endef
_cmdCls:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	$28, %ebx
	movl	8(%ebp), %esi
L536:
	movl	$8, %ecx
L535:
	movl	(%esi), %eax
	movl	%ebx, %edx
	imull	4(%eax), %edx
	movl	(%eax), %eax
	leal	(%edx,%ecx), %edx
	incl	%ecx
	cmpl	$247, %ecx
	movb	$0, (%edx,%eax)
	jle	L535
	incl	%ebx
	cmpl	$155, %ebx
	jle	L536
	pushl	$156
	pushl	$248
	pushl	$28
	pushl	$8
	pushl	(%esi)
	call	_sheetRefresh
	movl	$28, 8(%esi)
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
	.data
LC2:
	.ascii "fileName.ext    %7d\0"
	.text
	.balign 2
.globl _cmdDir
	.def	_cmdDir;	.scl	2;	.type	32;	.endef
_cmdDir:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%edi, %edi
	pushl	%ebx
	xorl	%ebx, %ebx
	subl	$32, %esp
	movl	8(%ebp), %esi
L559:
	movb	1058304(%ebx), %al
	testb	%al, %al
	je	L543
	cmpb	$-27, %al
	je	L544
	testb	$24, 1058315(%ebx)
	je	L565
L544:
	incl	%edi
	addl	$32, %ebx
	cmpl	$243, %edi
	jle	L559
L543:
	pushl	%esi
	call	_consoleNewLine
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L565:
	pushl	1058332(%ebx)
	pushl	$LC2
	leal	-44(%ebp), %eax
	pushl	%eax
	call	_sprintf
	leal	1058304(%ebx), %edx
	xorl	%ecx, %ecx
	addl	$12, %esp
L553:
	movb	(%edx), %al
	incl	%edx
	movb	%al, -44(%ebp,%ecx)
	incl	%ecx
	cmpl	$7, %ecx
	jle	L553
	xorl	%ecx, %ecx
L558:
	movb	1058312(%ebx,%ecx), %al
	movb	%al, -35(%ebp,%ecx)
	incl	%ecx
	cmpl	$2, %ecx
	jle	L558
	pushl	$30
	leal	-44(%ebp), %eax
	pushl	%eax
	pushl	$0
	pushl	$7
	pushl	8(%esi)
	pushl	$8
	pushl	(%esi)
	call	_putFont8AscSheet
	pushl	%esi
	call	_consoleNewLine
	addl	$32, %esp
	jmp	L544
	.data
LC3:
	.ascii "file not found\0"
	.text
	.balign 2
.globl _cmdType
	.def	_cmdType;	.scl	2;	.type	32;	.endef
_cmdType:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%eax
	movl	8(%ebp), %eax
	movl	12(%ebp), %esi
	movl	%eax, -16(%ebp)
	pushl	$224
	pushl	$1058304
	movl	16(%ebp), %eax
	addl	$5, %eax
	pushl	%eax
	call	_searchFile
	addl	$12, %esp
	movl	%eax, %ebx
	testl	%eax, %eax
	je	L567
	pushl	28(%eax)
	pushl	$3932160
	call	_memsegAlloc4K
	pushl	$1064448
	pushl	%esi
	movl	%eax, %edi
	pushl	%eax
	xorl	%esi, %esi
	pushl	28(%ebx)
	movzwl	26(%ebx), %eax
	pushl	%eax
	call	_loadFile
	addl	$28, %esp
	cmpl	28(%ebx), %esi
	jb	L572
L575:
	pushl	28(%ebx)
	pushl	%edi
	pushl	$3932160
	call	_memsegFree4K
	addl	$12, %esp
L573:
	movl	-16(%ebp), %eax
	movl	%eax, 8(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_consoleNewLine
L572:
	pushl	$1
	movsbl	(%esi,%edi),%eax
	pushl	%eax
	incl	%esi
	pushl	-16(%ebp)
	call	_consolePutchar
	addl	$12, %esp
	cmpl	28(%ebx), %esi
	jb	L572
	jmp	L575
L567:
	pushl	$14
	pushl	$LC3
	pushl	$0
	pushl	$7
	movl	-16(%ebp), %eax
	pushl	8(%eax)
	pushl	$8
	pushl	(%eax)
	call	_putFont8AscSheet
	pushl	-16(%ebp)
	call	_consoleNewLine
	addl	$32, %esp
	jmp	L573
	.data
LC4:
	.ascii "CLIHLT.HRB\0"
	.text
	.balign 2
.globl _cmdHlt
	.def	_cmdHlt;	.scl	2;	.type	32;	.endef
_cmdHlt:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%eax
	movl	12(%ebp), %eax
	movl	8(%ebp), %edi
	movl	%eax, -16(%ebp)
	pushl	$224
	pushl	$1058304
	pushl	$LC4
	call	_searchFile
	addl	$12, %esp
	movl	%eax, %esi
	testl	%eax, %eax
	je	L577
	pushl	28(%eax)
	pushl	$3932160
	call	_memsegAlloc4K
	pushl	$1064448
	pushl	-16(%ebp)
	pushl	%eax
	movl	%eax, %ebx
	pushl	28(%esi)
	movzwl	26(%esi), %eax
	pushl	%eax
	call	_loadFile
	pushl	$16538
	pushl	%ebx
	movl	28(%esi), %eax
	decl	%eax
	pushl	%eax
	pushl	$2563928
	call	_setSegmdesc
	addl	$44, %esp
	pushl	$8024
	pushl	$0
	call	_farJmp
	pushl	28(%esi)
	pushl	%ebx
	pushl	$3932160
	call	_memsegFree4K
	addl	$20, %esp
L578:
	movl	%edi, 8(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_consoleNewLine
L577:
	pushl	$14
	pushl	$LC3
	pushl	$0
	pushl	$7
	pushl	8(%edi)
	pushl	$8
	pushl	(%edi)
	call	_putFont8AscSheet
	pushl	%edi
	call	_consoleNewLine
	addl	$32, %esp
	jmp	L578
	.data
LC5:
	.ascii "mem\0"
LC6:
	.ascii "cls\0"
LC7:
	.ascii "dir\0"
LC8:
	.ascii "type \0"
LC9:
	.ascii "hlt\0"
LC10:
	.ascii "command not found\0"
	.text
	.balign 2
.globl _consoleRunCmd
	.def	_consoleRunCmd;	.scl	2;	.type	32;	.endef
_consoleRunCmd:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	movl	$LC5, %edi
	pushl	%ebx
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	16(%ebp), %ecx
	movl	%eax, -24(%ebp)
	movl	%ecx, -16(%ebp)
	movl	20(%ebp), %eax
	movl	-24(%ebp), %esi
	movl	%eax, -20(%ebp)
	movl	12(%ebp), %ebx
	movl	$4, %eax
	cld
	movl	%eax, %ecx
	repe
	cmpsb
	je	L591
	movl	$4, %eax
	movl	-24(%ebp), %esi
	cld
	movl	$LC6, %edi
	movl	%eax, %ecx
	repe
	cmpsb
	je	L592
	movl	$4, %eax
	movl	-24(%ebp), %esi
	cld
	movl	$LC7, %edi
	movl	%eax, %ecx
	repe
	cmpsb
	je	L593
	movl	$5, %eax
	movl	-24(%ebp), %esi
	cld
	movl	$LC8, %edi
	movl	%eax, %ecx
	repe
	cmpsb
	je	L594
	movl	$4, %eax
	movl	-24(%ebp), %esi
	cld
	movl	$LC9, %edi
	movl	%eax, %ecx
	repe
	cmpsb
	je	L595
	movl	-24(%ebp), %ecx
	cmpb	$0, (%ecx)
	jne	L596
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L596:
	pushl	$17
	pushl	$LC10
	pushl	$0
	pushl	$7
	pushl	8(%ebx)
	pushl	$8
	pushl	(%ebx)
	call	_putFont8AscSheet
	pushl	%ebx
	call	_consoleNewLine
	movl	%ebx, 8(%ebp)
	addl	$32, %esp
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_consoleNewLine
L595:
	movl	-16(%ebp), %eax
	movl	%ebx, 8(%ebp)
	movl	%eax, 12(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_cmdHlt
L594:
	movl	-24(%ebp), %eax
	movl	-16(%ebp), %ecx
	movl	%eax, 16(%ebp)
	movl	%ecx, 12(%ebp)
	movl	%ebx, 8(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_cmdType
L593:
	movl	%ebx, 8(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_cmdDir
L592:
	movl	%ebx, 8(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_cmdCls
L591:
	movl	-20(%ebp), %eax
	movl	%ebx, 8(%ebp)
	movl	%eax, 12(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_cmdMem
	.balign 2
.globl _consoleMain
	.def	_consoleMain;	.scl	2;	.type	32;	.endef
_consoleMain:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$568, %esp
	call	_processNow
	pushl	$11520
	pushl	$3932160
	movl	%eax, -576(%ebp)
	call	_memsegAlloc4K
	movl	-576(%ebp), %ebx
	pushl	-576(%ebp)
	movl	%eax, -580(%ebp)
	addl	$16, %ebx
	movl	8(%ebp), %eax
	movl	%eax, -540(%ebp)
	leal	-524(%ebp), %eax
	pushl	%eax
	pushl	$128
	pushl	%ebx
	movl	$28, -532(%ebp)
	movl	$8, -536(%ebp)
	movl	$-1, -528(%ebp)
	call	_QueueInit
	call	_timerAlloc
	pushl	$1
	pushl	%ebx
	movl	%eax, %edi
	pushl	%eax
	call	_timerInit
	addl	$36, %esp
	pushl	$50
	pushl	%edi
	call	_timerSetTime
	pushl	$1049088
	pushl	-580(%ebp)
	call	_readFat
	leal	-540(%ebp), %eax
	pushl	$1
	pushl	$62
	pushl	%eax
	call	_consolePutchar
	addl	$28, %esp
L598:
	call	_io_cli
	movl	-576(%ebp), %ebx
	addl	$16, %ebx
	pushl	%ebx
	call	_QueueSize
	popl	%esi
	testl	%eax, %eax
	je	L620
	pushl	%ebx
	call	_QueuePop
	movl	%eax, %esi
	call	_io_sti
	popl	%ecx
	cmpl	$1, %esi
	jle	L621
L603:
	cmpl	$2, %esi
	je	L622
L608:
	cmpl	$3, %esi
	je	L623
L609:
	leal	-257(%esi), %eax
	cmpl	$254, %eax
	ja	L610
	cmpl	$264, %esi
	je	L624
	cmpl	$266, %esi
	je	L625
	movl	-536(%ebp), %ecx
	cmpl	$239, %ecx
	jg	L610
	movl	%ecx, %eax
	movl	$8, %edx
	movl	%edx, %ebx
	pushl	$1
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	movl	%esi, %eax
	movb	%al, -574(%ebp,%ecx)
	leal	-256(%esi), %eax
	pushl	%eax
	leal	-540(%ebp), %eax
	pushl	%eax
L618:
	call	_consolePutchar
L619:
	addl	$12, %esp
L610:
	cmpl	$0, -528(%ebp)
	js	L617
	movl	-532(%ebp), %ecx
	movl	-536(%ebp), %edx
	leal	15(%ecx), %eax
	pushl	%eax
	leal	7(%edx), %eax
	pushl	%eax
	pushl	%ecx
	movl	8(%ebp), %ecx
	pushl	%edx
	movzbl	-528(%ebp), %eax
	pushl	%eax
	pushl	4(%ecx)
	pushl	(%ecx)
	call	_boxFill8
	addl	$28, %esp
L617:
	movl	-532(%ebp), %ecx
	movl	-536(%ebp), %edx
	leal	16(%ecx), %eax
	pushl	%eax
	leal	8(%edx), %eax
	pushl	%eax
	pushl	%ecx
	pushl	%edx
	pushl	8(%ebp)
	call	_sheetRefresh
	addl	$20, %esp
	jmp	L598
L625:
	pushl	$0
	leal	-540(%ebp), %ebx
	pushl	$32
	pushl	%ebx
	call	_consolePutchar
	pushl	%ebx
	movl	-536(%ebp), %eax
	movl	$8, %edx
	movl	%edx, %ecx
	cltd
	idivl	%ecx
	movb	$0, -574(%ebp,%eax)
	call	_consoleNewLine
	leal	-572(%ebp), %eax
	pushl	12(%ebp)
	pushl	-580(%ebp)
	pushl	%ebx
	pushl	%eax
	call	_consoleRunCmd
	addl	$32, %esp
	pushl	$1
	pushl	$62
	pushl	%ebx
	jmp	L618
L624:
	cmpl	$16, -536(%ebp)
	jle	L610
	pushl	$0
	leal	-540(%ebp), %eax
	pushl	$32
	pushl	%eax
	call	_consolePutchar
	subl	$8, -536(%ebp)
	jmp	L619
L623:
	movl	-532(%ebp), %ecx
	movl	-536(%ebp), %edx
	leal	15(%ecx), %eax
	pushl	%eax
	leal	7(%edx), %eax
	pushl	%eax
	pushl	%ecx
	movl	8(%ebp), %ecx
	pushl	%edx
	pushl	$0
	pushl	4(%ecx)
	pushl	(%ecx)
	call	_boxFill8
	addl	$28, %esp
	movl	$-1, -528(%ebp)
	jmp	L609
L622:
	movl	$7, -528(%ebp)
	jmp	L608
L621:
	testl	%esi, %esi
	je	L604
	pushl	$0
	pushl	%ebx
	pushl	%edi
	call	_timerInit
	addl	$12, %esp
	cmpl	$0, -528(%ebp)
	js	L606
	movl	$7, -528(%ebp)
L606:
	pushl	$50
	pushl	%edi
	call	_timerSetTime
	popl	%eax
	popl	%edx
	jmp	L603
L604:
	pushl	$1
	pushl	%ebx
	pushl	%edi
	call	_timerInit
	addl	$12, %esp
	cmpl	$0, -528(%ebp)
	js	L606
	movl	$0, -528(%ebp)
	jmp	L606
L620:
	pushl	-576(%ebp)
	call	_processSleep
	call	_io_sti
	popl	%ebx
	jmp	L598
	.balign 2
.globl _readFat
	.def	_readFat;	.scl	2;	.type	32;	.endef
_readFat:
	pushl	%ebp
	xorl	%ecx, %ecx
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	movl	8(%ebp), %edi
	movl	12(%ebp), %esi
	xorl	%ebx, %ebx
L631:
	movzbl	1(%ecx,%esi), %eax
	movzbl	(%ecx,%esi), %edx
	sall	$8, %eax
	orl	%eax, %edx
	andl	$4095, %edx
	movl	%edx, (%edi,%ebx,4)
	movb	1(%ecx,%esi), %al
	movzbl	2(%ecx,%esi), %edx
	shrb	$4, %al
	addl	$3, %ecx
	sall	$4, %edx
	movzbl	%al, %eax
	orl	%edx, %eax
	movl	%eax, 4(%edi,%ebx,4)
	addl	$2, %ebx
	cmpl	$2879, %ebx
	jle	L631
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _loadFile
	.def	_loadFile;	.scl	2;	.type	32;	.endef
_loadFile:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	movl	12(%ebp), %ecx
	movl	8(%ebp), %esi
	movl	16(%ebp), %ebx
	movl	24(%ebp), %edi
L635:
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jge	L645
L642:
	movl	%esi, %eax
	sall	$9, %eax
	addl	%edx, %eax
	movb	(%eax,%edi), %al
	movb	%al, (%edx,%ebx)
	incl	%edx
	cmpl	%ecx, %edx
	jl	L642
L645:
	cmpl	$512, %ecx
	jle	L634
	movl	20(%ebp), %eax
	subl	$512, %ecx
	addl	$512, %ebx
	movl	(%eax,%esi,4), %esi
	jmp	L635
L634:
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _searchFile
	.def	_searchFile;	.scl	2;	.type	32;	.endef
_searchFile:
	pushl	%ebp
	xorl	%ecx, %ecx
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$24, %esp
	movl	8(%ebp), %ebx
L651:
	movb	$32, -28(%ebp,%ecx)
	incl	%ecx
	cmpl	$10, %ecx
	jle	L651
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	cmpb	$0, (%ebx)
	je	L678
L660:
	xorl	%eax, %eax
	cmpl	$10, %ecx
	jg	L646
	movb	(%edi,%ebx), %dl
	cmpb	$46, %dl
	je	L683
L657:
	leal	-97(%edx), %eax
	movb	%dl, -28(%ebp,%ecx)
	cmpb	$25, %al
	ja	L659
	leal	-32(%edx), %eax
	movb	%al, -28(%ebp,%ecx)
L659:
	incl	%ecx
L654:
	incl	%edi
	cmpb	$0, (%edi,%ebx)
	jne	L660
L678:
	xorl	%edi, %edi
	cmpl	16(%ebp), %edi
	jge	L662
	movl	12(%ebp), %esi
	movl	$0, -36(%ebp)
L674:
	cmpb	$0, (%esi)
	je	L662
	movb	$0, -29(%ebp)
	testb	$24, 11(%esi)
	jne	L666
	movl	12(%ebp), %ebx
	xorl	%ecx, %ecx
	addl	-36(%ebp), %ebx
L672:
	movzbl	(%ebx), %edx
	movsbl	-28(%ebp,%ecx),%eax
	cmpl	%eax, %edx
	jne	L682
	incl	%ecx
	incl	%ebx
	cmpl	$10, %ecx
	jle	L672
L666:
	movl	%esi, %eax
	cmpb	$1, -29(%ebp)
	jne	L646
	incl	%edi
	addl	$32, %esi
	addl	$32, -36(%ebp)
	cmpl	16(%ebp), %edi
	jl	L674
L662:
	xorl	%eax, %eax
L646:
	addl	$24, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L682:
	movb	$1, -29(%ebp)
	jmp	L666
L683:
	cmpl	$8, %ecx
	jg	L657
	movl	$8, %ecx
	jmp	L654
	.data
LC11:
	.ascii "console\0"
LC12:
	.ascii "processA\0"
LC13:
	.ascii "Welcome to DickOS\0"
LC14:
	.ascii "(%3d, %3d)\0"
LC16:
	.ascii "[lcr %4d %4d]\0"
LC15:
	.ascii "%02X\0"
	.text
	.balign 2
.globl _Main
	.def	_Main;	.scl	2;	.type	32;	.endef
_Main:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	leal	-1004(%ebp), %ebx
	subl	$1096, %esp
	movl	$0, -1056(%ebp)
	movl	$0, -1060(%ebp)
	movl	$-1, -1068(%ebp)
	movb	4081, %al
	sarb	$4, %al
	movl	%eax, %edx
	andl	$7, %edx
	movl	%edx, -1064(%ebp)
	call	_initGdtit
	call	_init_pic
	call	_io_sti
	leal	-572(%ebp), %eax
	pushl	$0
	pushl	%eax
	pushl	$128
	pushl	%ebx
	call	_QueueInit
	call	_initPit
	pushl	$256
	pushl	%ebx
	call	_initKeyboard
	leal	-716(%ebp), %eax
	pushl	%eax
	pushl	$512
	pushl	%ebx
	call	_enableMouse
	addl	$36, %esp
	pushl	$248
	pushl	$33
	call	_io_out8
	pushl	$239
	pushl	$161
	call	_io_out8
	leal	-700(%ebp), %eax
	pushl	$0
	pushl	%eax
	leal	-1036(%ebp), %eax
	pushl	$32
	pushl	%eax
	call	_QueueInit
	addl	$32, %esp
	call	_timerAlloc
	pushl	$1
	pushl	%ebx
	movl	%eax, -1096(%ebp)
	pushl	%eax
	call	_timerInit
	pushl	$50
	pushl	-1096(%ebp)
	call	_timerSetTime
	pushl	$-1073741825
	pushl	$4194304
	call	_memtest
	pushl	$3932160
	movl	%eax, -1072(%ebp)
	call	_memsegInit
	addl	$32, %esp
	pushl	$647168
	pushl	$4096
	pushl	$3932160
	call	_memsegFree
	movl	-1072(%ebp), %eax
	subl	$4194304, %eax
	pushl	%eax
	pushl	$4194304
	pushl	$3932160
	call	_memsegFree
	call	_init_palette
	movswl	4086,%eax
	pushl	%eax
	movswl	4084,%eax
	pushl	%eax
	pushl	4088
	pushl	$3932160
	call	_shtctlInit
	addl	$40, %esp
	movl	%eax, %esi
	pushl	$3932160
	call	_processInit
	pushl	$0
	pushl	$1
	pushl	%eax
	movl	%eax, -1100(%ebp)
	movl	%eax, -980(%ebp)
	call	_processRun
	pushl	%esi
	call	_sheetAlloc
	movswl	4086,%edx
	movl	%eax, -1076(%ebp)
	movswl	4084,%eax
	imull	%edx, %eax
	pushl	%eax
	pushl	$3932160
	call	_memsegAlloc4K
	pushl	$-1
	movl	%eax, %ebx
	movswl	4086,%eax
	pushl	%eax
	movswl	4084,%eax
	pushl	%eax
	pushl	%ebx
	pushl	-1076(%ebp)
	call	_sheetSetbuf
	addl	$48, %esp
	movswl	4086,%eax
	pushl	%eax
	movswl	4084,%eax
	pushl	%eax
	pushl	%ebx
	leal	-972(%ebp), %ebx
	call	_init_GUI
	pushl	%esi
	call	_sheetAlloc
	pushl	$42240
	pushl	$3932160
	movl	%eax, -1084(%ebp)
	call	_memsegAlloc4K
	pushl	$-1
	pushl	$165
	movl	%eax, -1092(%ebp)
	pushl	$256
	pushl	%eax
	pushl	-1084(%ebp)
	call	_sheetSetbuf
	addl	$44, %esp
	pushl	$0
	pushl	$LC11
	pushl	$165
	pushl	$256
	pushl	-1092(%ebp)
	call	_makeWindow
	pushl	$0
	pushl	$128
	pushl	$240
	pushl	$28
	pushl	$8
	pushl	-1084(%ebp)
	call	_makeTextBox
	addl	$44, %esp
	call	_processAlloc
	pushl	$65536
	pushl	$3932160
	movl	%eax, -1104(%ebp)
	call	_memsegAlloc4K
	movl	-1104(%ebp), %edx
	addl	$65524, %eax
	movl	%eax, 100(%edx)
	movl	-1084(%ebp), %edx
	movl	%edx, 4(%eax)
	movl	-1104(%ebp), %edx
	movl	100(%edx), %eax
	movl	-1072(%ebp), %edx
	movl	%edx, 8(%eax)
	movl	-1104(%ebp), %eax
	movl	$_consoleMain, 76(%eax)
	movl	$8, 116(%eax)
	movl	$16, 120(%eax)
	movl	$8, 124(%eax)
	movl	$8, 128(%eax)
	movl	$8, 132(%eax)
	movl	$8, 136(%eax)
	pushl	$2
	pushl	$2
	pushl	%eax
	call	_processRun
	pushl	%esi
	call	_sheetAlloc
	pushl	$8320
	pushl	$3932160
	movl	%eax, %edi
	call	_memsegAlloc4K
	addl	$32, %esp
	pushl	$-1
	movl	%eax, -1088(%ebp)
	pushl	$52
	pushl	$144
	pushl	%eax
	pushl	%edi
	call	_sheetSetbuf
	pushl	$1
	pushl	$LC12
	pushl	$52
	pushl	$144
	pushl	-1088(%ebp)
	call	_makeWindow
	addl	$40, %esp
	pushl	$7
	pushl	$16
	pushl	$128
	pushl	$28
	pushl	$8
	pushl	%edi
	call	_makeTextBox
	pushl	%esi
	movl	$8, -1048(%ebp)
	movl	$7, -1052(%ebp)
	call	_sheetAlloc
	pushl	$14
	pushl	$16
	pushl	$16
	movl	%eax, -1080(%ebp)
	pushl	%ebx
	pushl	%eax
	call	_sheetSetbuf
	addl	$48, %esp
	pushl	$14
	pushl	%ebx
	movl	$2, %ebx
	call	_initMouseCursor8
	movswl	4084,%eax
	leal	-16(%eax), %ecx
	movl	%ecx, %eax
	cltd
	idivl	%ebx
	movl	%eax, -1040(%ebp)
	movswl	4086,%eax
	pushl	$0
	leal	-44(%eax), %ecx
	pushl	$0
	movl	%ecx, %eax
	cltd
	idivl	%ebx
	pushl	-1076(%ebp)
	movl	%eax, -1044(%ebp)
	leal	-60(%ebp), %ebx
	call	_sheetSlide
	pushl	$64
	pushl	$168
	pushl	-1084(%ebp)
	call	_sheetSlide
	addl	$32, %esp
	pushl	$64
	pushl	$8
	pushl	%edi
	call	_sheetSlide
	pushl	-1044(%ebp)
	pushl	-1040(%ebp)
	pushl	-1080(%ebp)
	call	_sheetSlide
	pushl	$0
	pushl	-1076(%ebp)
	call	_sheetUpdown
	addl	$32, %esp
	pushl	$1
	pushl	-1084(%ebp)
	call	_sheetUpdown
	pushl	$2
	pushl	%edi
	call	_sheetUpdown
	pushl	$3
	pushl	-1080(%ebp)
	call	_sheetUpdown
	pushl	$17
	pushl	$LC13
	pushl	$14
	pushl	$7
	pushl	$32
	pushl	$0
	pushl	-1076(%ebp)
	call	_putFont8AscSheet
	addl	$52, %esp
	pushl	-1044(%ebp)
	pushl	-1040(%ebp)
	pushl	$LC14
	pushl	%ebx
	call	_sprintf
	pushl	$10
	pushl	%ebx
	pushl	$14
	pushl	$7
	pushl	$0
	pushl	$0
	pushl	-1076(%ebp)
	call	_putFont8AscSheet
	leal	-1036(%ebp), %edx
	addl	$44, %esp
	pushl	$237
	pushl	%edx
	call	_QueuePush
	leal	-1036(%ebp), %eax
	pushl	-1064(%ebp)
	pushl	%eax
	call	_QueuePush
	addl	$16, %esp
L685:
	leal	-1036(%ebp), %ebx
	pushl	%ebx
	call	_QueueSize
	popl	%edx
	testl	%eax, %eax
	jle	L688
	cmpl	$0, -1068(%ebp)
	js	L742
L688:
	leal	-1004(%ebp), %ebx
	call	_io_cli
	pushl	%ebx
	call	_QueueSize
	popl	%esi
	testl	%eax, %eax
	je	L743
	pushl	%ebx
	call	_QueuePop
	movl	%eax, %esi
	call	_io_sti
	popl	%edx
	leal	-256(%esi), %eax
	cmpl	$255, %eax
	jbe	L744
	leal	-512(%esi), %eax
	cmpl	$255, %eax
	jbe	L745
	cmpl	$1, %esi
	jg	L685
	decl	%esi
	je	L746
	pushl	$1
	pushl	%ebx
	pushl	-1096(%ebp)
	call	_timerInit
	addl	$12, %esp
	cmpl	$0, -1052(%ebp)
	js	L737
	movl	$7, -1052(%ebp)
L737:
	pushl	$50
	pushl	-1096(%ebp)
	call	_timerSetTime
	popl	%eax
	popl	%edx
	cmpl	$0, -1052(%ebp)
	js	L685
	movl	-1048(%ebp), %eax
	pushl	$43
	addl	$7, %eax
	pushl	%eax
	pushl	$28
	pushl	-1048(%ebp)
	movzbl	-1052(%ebp), %eax
	pushl	%eax
	pushl	4(%edi)
	pushl	(%edi)
	call	_boxFill8
	movl	-1048(%ebp), %eax
	pushl	$44
	addl	$8, %eax
	pushl	%eax
	pushl	$28
	pushl	-1048(%ebp)
	pushl	%edi
	call	_sheetRefresh
	addl	$48, %esp
	jmp	L685
L746:
	pushl	$0
	pushl	%ebx
	pushl	-1096(%ebp)
	call	_timerInit
	addl	$12, %esp
	cmpl	$0, -1052(%ebp)
	js	L737
	movl	$0, -1052(%ebp)
	jmp	L737
L745:
	movl	%esi, %edx
	movzbl	%dl, %eax
	pushl	%eax
	leal	-716(%ebp), %eax
	pushl	%eax
	call	_mouseDecode
	popl	%ecx
	popl	%ebx
	testl	%eax, %eax
	je	L685
	pushl	-708(%ebp)
	pushl	-712(%ebp)
	pushl	$LC16
	leal	-60(%ebp), %ebx
	pushl	%ebx
	call	_sprintf
	addl	$16, %esp
	testl	$1, -704(%ebp)
	je	L726
	movl	-1044(%ebp), %eax
	subl	$8, %eax
	pushl	%eax
	movl	-1040(%ebp), %eax
	subl	$80, %eax
	pushl	%eax
	pushl	%edi
	movb	$76, -59(%ebp)
	call	_sheetSlide
	addl	$12, %esp
L726:
	movl	-704(%ebp), %eax
	testl	$2, %eax
	je	L727
	movb	$82, -57(%ebp)
L727:
	andl	$4, %eax
	je	L728
	movb	$67, -58(%ebp)
L728:
	pushl	$15
	pushl	%ebx
	pushl	$14
	pushl	$7
	pushl	$16
	pushl	$32
	pushl	-1076(%ebp)
	call	_putFont8AscSheet
	movl	-712(%ebp), %edx
	movl	-708(%ebp), %eax
	addl	$28, %esp
	addl	%eax, -1044(%ebp)
	addl	%edx, -1040(%ebp)
	js	L747
L729:
	cmpl	$0, -1044(%ebp)
	js	L748
L730:
	movswl	4084,%eax
	decl	%eax
	cmpl	%eax, -1040(%ebp)
	jle	L731
	movl	%eax, -1040(%ebp)
L731:
	movswl	4086,%eax
	decl	%eax
	cmpl	%eax, -1044(%ebp)
	jle	L732
	movl	%eax, -1044(%ebp)
L732:
	pushl	-1044(%ebp)
	pushl	-1040(%ebp)
	pushl	$LC14
	pushl	%ebx
	call	_sprintf
	pushl	$10
	pushl	%ebx
	pushl	$14
	pushl	$7
	pushl	$0
	pushl	$0
	pushl	-1076(%ebp)
	call	_putFont8AscSheet
	addl	$44, %esp
	pushl	-1044(%ebp)
	pushl	-1040(%ebp)
	pushl	-1080(%ebp)
	call	_sheetSlide
	addl	$12, %esp
	jmp	L685
L748:
	movl	$0, -1044(%ebp)
	jmp	L730
L747:
	movl	$0, -1040(%ebp)
	jmp	L729
L744:
	pushl	%eax
	leal	-60(%ebp), %ebx
	pushl	$LC15
	pushl	%ebx
	call	_sprintf
	pushl	$2
	pushl	%ebx
	pushl	$14
	pushl	$7
	pushl	$16
	pushl	$0
	pushl	-1076(%ebp)
	call	_putFont8AscSheet
	addl	$40, %esp
	cmpl	$383, %esi
	jg	L692
	cmpl	$0, -1056(%ebp)
	jne	L693
	movb	_keyboardTable0-256(%esi), %al
L741:
	movb	%al, -60(%ebp)
L695:
	movb	-60(%ebp), %dl
	leal	-65(%edx), %eax
	cmpb	$25, %al
	ja	L696
	testl	$4, -1064(%ebp)
	jne	L740
	cmpl	$0, -1056(%ebp)
	je	L698
L696:
	movb	-60(%ebp), %al
	testb	%al, %al
	je	L700
	cmpl	$0, -1060(%ebp)
	jne	L701
	cmpl	$127, -1048(%ebp)
	jg	L700
	pushl	$1
	leal	-60(%ebp), %eax
	pushl	%eax
	pushl	$7
	pushl	$0
	pushl	$28
	pushl	-1048(%ebp)
	pushl	%edi
	movb	$0, -59(%ebp)
	call	_putFont8AscSheet
	addl	$28, %esp
	addl	$8, -1048(%ebp)
L700:
	cmpl	$270, %esi
	je	L749
L704:
	cmpl	$271, %esi
	je	L750
L708:
	cmpl	$298, %esi
	je	L751
L711:
	cmpl	$310, %esi
	je	L752
L712:
	cmpl	$426, %esi
	je	L753
L713:
	cmpl	$438, %esi
	je	L754
L714:
	cmpl	$314, %esi
	je	L755
L715:
	cmpl	$325, %esi
	je	L756
L716:
	cmpl	$326, %esi
	je	L757
L717:
	cmpl	$506, %esi
	je	L758
L718:
	cmpl	$510, %esi
	je	L759
L719:
	cmpl	$284, %esi
	je	L760
L720:
	cmpl	$0, -1052(%ebp)
	jle	L722
	movl	-1048(%ebp), %eax
	pushl	$43
	addl	$7, %eax
	pushl	%eax
	pushl	$28
	pushl	-1048(%ebp)
	movzbl	-1052(%ebp), %eax
	pushl	%eax
	pushl	4(%edi)
	pushl	(%edi)
	call	_boxFill8
	addl	$28, %esp
L722:
	movl	-1048(%ebp), %eax
	pushl	$44
	addl	$8, %eax
	pushl	%eax
	pushl	$28
	pushl	-1048(%ebp)
	pushl	%edi
	call	_sheetRefresh
	addl	$20, %esp
	jmp	L685
L760:
	cmpl	$0, -1060(%ebp)
	je	L720
	movl	-1104(%ebp), %eax
	pushl	$266
	addl	$16, %eax
	pushl	%eax
	call	_QueuePush
	popl	%esi
	popl	%eax
	jmp	L720
L759:
	call	_waitKeyboardControllerReady
	pushl	-1068(%ebp)
	pushl	$96
	call	_io_out8
	popl	%eax
	popl	%edx
	jmp	L719
L758:
	movl	$-1, -1068(%ebp)
	jmp	L718
L757:
	pushl	$237
	leal	-1036(%ebp), %ebx
	pushl	%ebx
	xorl	$1, -1064(%ebp)
	call	_QueuePush
	pushl	-1064(%ebp)
	pushl	%ebx
	call	_QueuePush
	addl	$16, %esp
	jmp	L717
L756:
	pushl	$237
	leal	-1036(%ebp), %ebx
	pushl	%ebx
	xorl	$2, -1064(%ebp)
	call	_QueuePush
	pushl	-1064(%ebp)
	pushl	%ebx
	call	_QueuePush
	addl	$16, %esp
	jmp	L716
L755:
	pushl	$237
	leal	-1036(%ebp), %ebx
	pushl	%ebx
	xorl	$4, -1064(%ebp)
	call	_QueuePush
	pushl	-1064(%ebp)
	pushl	%ebx
	call	_QueuePush
	addl	$16, %esp
	jmp	L715
L754:
	andl	$-3, -1056(%ebp)
	jmp	L714
L753:
	andl	$-2, -1056(%ebp)
	jmp	L713
L752:
	orl	$2, -1056(%ebp)
	jmp	L712
L751:
	orl	$1, -1056(%ebp)
	jmp	L711
L750:
	cmpl	$0, -1060(%ebp)
	jne	L709
	pushl	$0
	pushl	$LC12
	pushl	4(%edi)
	pushl	-1088(%ebp)
	movl	$1, -1060(%ebp)
	call	_makeWindowTitle
	movl	-1084(%ebp), %edx
	pushl	$1
	pushl	$LC11
	pushl	4(%edx)
	pushl	-1092(%ebp)
	call	_makeWindowTitle
	movl	-1048(%ebp), %eax
	addl	$32, %esp
	addl	$7, %eax
	movl	$-1, -1052(%ebp)
	pushl	$43
	pushl	%eax
	pushl	$28
	pushl	-1048(%ebp)
	pushl	$7
	pushl	4(%edi)
	pushl	(%edi)
	call	_boxFill8
	movl	-1104(%ebp), %eax
	pushl	$2
	addl	$16, %eax
	pushl	%eax
	call	_QueuePush
	addl	$36, %esp
L710:
	pushl	$21
	pushl	4(%edi)
	pushl	$0
	pushl	$0
	pushl	%edi
	call	_sheetRefresh
	movl	-1084(%ebp), %edx
	pushl	$21
	pushl	4(%edx)
	pushl	$0
	pushl	$0
	pushl	%edx
	call	_sheetRefresh
	addl	$40, %esp
	jmp	L708
L709:
	pushl	$1
	pushl	$LC12
	pushl	4(%edi)
	pushl	-1088(%ebp)
	movl	$0, -1060(%ebp)
	call	_makeWindowTitle
	movl	-1084(%ebp), %eax
	pushl	$0
	pushl	$LC11
	pushl	4(%eax)
	pushl	-1092(%ebp)
	call	_makeWindowTitle
	movl	-1104(%ebp), %eax
	addl	$32, %esp
	addl	$16, %eax
	movl	$0, -1052(%ebp)
	pushl	$3
	pushl	%eax
	call	_QueuePush
	popl	%ecx
	popl	%ebx
	jmp	L710
L749:
	cmpl	$0, -1060(%ebp)
	jne	L705
	cmpl	$8, -1048(%ebp)
	jle	L704
	pushl	$1
	pushl	$LC0
	pushl	$7
	pushl	$0
	pushl	$28
	pushl	-1048(%ebp)
	pushl	%edi
	call	_putFont8AscSheet
	addl	$28, %esp
	subl	$8, -1048(%ebp)
	jmp	L704
L705:
	movl	-1104(%ebp), %eax
	pushl	$264
	addl	$16, %eax
	pushl	%eax
	call	_QueuePush
	popl	%eax
	popl	%edx
	jmp	L704
L701:
	movsbl	%al,%eax
	addl	$256, %eax
	pushl	%eax
	movl	-1104(%ebp), %eax
	addl	$16, %eax
	pushl	%eax
	call	_QueuePush
	popl	%ecx
	popl	%ebx
	jmp	L700
L698:
	leal	32(%edx), %eax
	movb	%al, -60(%ebp)
	jmp	L696
L740:
	cmpl	$0, -1056(%ebp)
	je	L696
	jmp	L698
L693:
	movb	_keyboardTable1-256(%esi), %al
	jmp	L741
L692:
	movb	$0, -60(%ebp)
	jmp	L695
L743:
	pushl	-1100(%ebp)
	call	_processSleep
	call	_io_sti
	popl	%ecx
	jmp	L685
L742:
	pushl	%ebx
	call	_QueuePop
	movl	%eax, -1068(%ebp)
	call	_waitKeyboardControllerReady
	pushl	-1068(%ebp)
	pushl	$96
	call	_io_out8
	addl	$12, %esp
	jmp	L688
.globl _keybuf
	.data
	.balign 4
_keybuf:
	.space 4
.globl _keyData0
	.data
	.balign 4
_keyData0:
	.space 4
.globl _mousebuf
	.data
	.balign 4
_mousebuf:
	.space 4
.globl _mouseData0
	.data
	.balign 4
_mouseData0:
	.space 4
.globl _timerctl
	.data
	.balign 16
_timerctl:
	.space 10012
.globl _processctl
	.data
	.balign 4
_processctl:
	.space 4
.globl _mpTimer
	.data
	.balign 4
_mpTimer:
	.space 4
	.def	_io_sti;	.scl	2;	.type	32;	.endef
	.def	_readFat;	.scl	2;	.type	32;	.endef
	.def	_loadFile;	.scl	2;	.type	32;	.endef
	.def	_searchFile;	.scl	2;	.type	32;	.endef
	.def	_sprintf;	.scl	2;	.type	32;	.endef
	.def	_sheetRefreshSub;	.scl	2;	.type	32;	.endef
	.def	_memtest_sub;	.scl	2;	.type	32;	.endef
	.def	_storeCr0;	.scl	2;	.type	32;	.endef
	.def	_loadCr0;	.scl	2;	.type	32;	.endef
	.def	_sheetRefresh;	.scl	2;	.type	32;	.endef
	.def	_asm_interruptHandler2c;	.scl	2;	.type	32;	.endef
	.def	_asm_interruptHandler27;	.scl	2;	.type	32;	.endef
	.def	_asm_interruptHandler21;	.scl	2;	.type	32;	.endef
	.def	_asm_interruptHandler20;	.scl	2;	.type	32;	.endef
	.def	_loadIdtr;	.scl	2;	.type	32;	.endef
	.def	_loadGdtr;	.scl	2;	.type	32;	.endef
	.def	_farJmp;	.scl	2;	.type	32;	.endef
	.def	_loadTr;	.scl	2;	.type	32;	.endef
	.def	_processAlloc;	.scl	2;	.type	32;	.endef
	.def	_setSegmdesc;	.scl	2;	.type	32;	.endef
	.def	_memsegAlloc4K;	.scl	2;	.type	32;	.endef
	.def	_io_hlt;	.scl	2;	.type	32;	.endef
	.def	_io_store_eflags;	.scl	2;	.type	32;	.endef
	.def	_io_cli;	.scl	2;	.type	32;	.endef
	.def	_io_load_eflags;	.scl	2;	.type	32;	.endef
	.def	_timerAlloc;	.scl	2;	.type	32;	.endef
	.def	_io_out8;	.scl	2;	.type	32;	.endef
	.def	_io_in8;	.scl	2;	.type	32;	.endef
	.def	_processRun;	.scl	2;	.type	32;	.endef
