	.file	"bootpack.c"
	.text
	.balign 2
.globl _QueueInit
	.def	_QueueInit;	.scl	2;	.type	32;	.endef
_QueueInit:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	16(%ebp), %edx
	movl	12(%ebp), %ecx
	movl	%edx, (%eax)
	movl	%ecx, 12(%eax)
	movl	20(%ebp), %edx
	movl	%ecx, 16(%eax)
	movl	$0, 20(%eax)
	movl	$0, 8(%eax)
	movl	$0, 4(%eax)
	movl	%edx, 24(%eax)
	popl	%ebp
	ret
	.balign 2
.globl _QueuePush
	.def	_QueuePush;	.scl	2;	.type	32;	.endef
_QueuePush:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	8(%ebp), %ebx
	cmpl	$0, 16(%ebx)
	jne	L3
	orl	$1, 20(%ebx)
	orl	$-1, %eax
L2:
	movl	-4(%ebp), %ebx
	leave
	ret
L3:
	movl	4(%ebx), %ecx
	movl	(%ebx), %edx
	movl	12(%ebp), %eax
	movl	%eax, (%edx,%ecx,4)
	movl	4(%ebx), %eax
	decl	16(%ebx)
	incl	%eax
	cltd
	idivl	12(%ebx)
	movl	24(%ebx), %eax
	movl	%edx, 4(%ebx)
	testl	%eax, %eax
	je	L4
	cmpl	$2, 4(%eax)
	je	L4
	pushl	$0
	pushl	$-1
	pushl	%eax
	call	_processRun
	addl	$12, %esp
L4:
	xorl	%eax, %eax
	jmp	L2
	.balign 2
.globl _QueuePop
	.def	_QueuePop;	.scl	2;	.type	32;	.endef
_QueuePop:
	pushl	%ebp
	orl	$-1, %eax
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	movl	8(%ebp), %esi
	pushl	%ebx
	movl	16(%esi), %edi
	movl	12(%esi), %ebx
	cmpl	%ebx, %edi
	je	L6
	movl	8(%esi), %eax
	movl	(%esi), %edx
	movl	(%edx,%eax,4), %ecx
	incl	%eax
	cltd
	idivl	%ebx
	leal	1(%edi), %eax
	movl	%edx, 8(%esi)
	movl	%eax, 16(%esi)
	movl	%ecx, %eax
L6:
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _QueueSize
	.def	_QueueSize;	.scl	2;	.type	32;	.endef
_QueueSize:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %edx
	popl	%ebp
	movl	12(%edx), %eax
	subl	16(%edx), %eax
	ret
	.data
_keyboardTable:
	.byte	0
	.byte	0
	.byte	49
	.byte	50
	.byte	51
	.byte	52
	.byte	53
	.byte	54
	.byte	55
	.byte	56
	.byte	57
	.byte	48
	.byte	45
	.byte	61
	.byte	0
	.byte	0
	.byte	81
	.byte	87
	.byte	69
	.byte	82
	.byte	84
	.byte	89
	.byte	85
	.byte	73
	.byte	79
	.byte	80
	.byte	91
	.byte	93
	.byte	0
	.byte	0
	.byte	65
	.byte	83
	.byte	68
	.byte	70
	.byte	71
	.byte	72
	.byte	74
	.byte	75
	.byte	76
	.byte	59
	.byte	39
	.byte	96
	.byte	0
	.byte	92
	.byte	90
	.byte	88
	.byte	67
	.byte	86
	.byte	66
	.byte	78
	.byte	77
	.byte	44
	.byte	46
	.byte	47
	.byte	0
	.byte	42
	.byte	0
	.byte	32
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	55
	.byte	56
	.byte	57
	.byte	45
	.byte	52
	.byte	53
	.byte	54
	.byte	43
	.byte	49
	.byte	50
	.byte	51
	.byte	48
	.byte	46
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.text
	.balign 2
.globl _waitKeyboardControllerReady
	.def	_waitKeyboardControllerReady;	.scl	2;	.type	32;	.endef
_waitKeyboardControllerReady:
	pushl	%ebp
	movl	%esp, %ebp
L10:
	pushl	$100
	call	_io_in8
	popl	%edx
	andl	$2, %eax
	jne	L10
	leave
	ret
	.balign 2
.globl _initKeyboard
	.def	_initKeyboard;	.scl	2;	.type	32;	.endef
_initKeyboard:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	%eax, _keybuf
	movl	12(%ebp), %eax
	movl	%eax, _keyData0
	call	_waitKeyboardControllerReady
	pushl	$96
	pushl	$100
	call	_io_out8
	call	_waitKeyboardControllerReady
	popl	%ecx
	popl	%eax
	movl	$71, 12(%ebp)
	movl	$96, 8(%ebp)
	leave
	jmp	_io_out8
	.balign 2
.globl _enableMouse
	.def	_enableMouse;	.scl	2;	.type	32;	.endef
_enableMouse:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	%eax, _mousebuf
	movl	12(%ebp), %eax
	movl	%eax, _mouseData0
	call	_waitKeyboardControllerReady
	pushl	$212
	pushl	$100
	call	_io_out8
	call	_waitKeyboardControllerReady
	pushl	$244
	pushl	$96
	call	_io_out8
	movl	16(%ebp), %eax
	movb	$0, 3(%eax)
	leave
	ret
	.balign 2
.globl _mouseDecode
	.def	_mouseDecode;	.scl	2;	.type	32;	.endef
_mouseDecode:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	8(%ebp), %edx
	movl	12(%ebp), %ecx
	movl	%ecx, %esi
	movb	3(%edx), %al
	testb	%al, %al
	jne	L17
	cmpb	$-6, %cl
	je	L26
L25:
	xorl	%eax, %eax
L16:
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L26:
	movb	$1, 3(%edx)
	jmp	L25
L17:
	cmpb	$1, %al
	je	L27
	cmpb	$2, %al
	je	L28
	cmpb	$3, %al
	je	L29
	orl	$-1, %eax
	jmp	L16
L29:
	movb	(%edx), %bl
	andl	$255, %esi
	movl	%ebx, %eax
	movb	%cl, 2(%edx)
	andl	$7, %eax
	movl	%esi, 8(%edx)
	movl	%eax, 12(%edx)
	movb	%bl, %al
	movzbl	1(%edx), %ecx
	andl	$16, %eax
	movl	%ecx, 4(%edx)
	movb	$1, 3(%edx)
	testb	%al, %al
	je	L23
	orl	$-256, %ecx
	movl	%ecx, 4(%edx)
L23:
	andl	$32, %ebx
	testb	%bl, %bl
	je	L24
	orl	$-256, 8(%edx)
L24:
	negl	8(%edx)
	movl	$1, %eax
	jmp	L16
L28:
	movb	%cl, 1(%edx)
	movb	$3, 3(%edx)
	jmp	L25
L27:
	andl	$-56, %esi
	movl	%esi, %eax
	cmpb	$8, %al
	jne	L25
	movb	%cl, (%edx)
	movb	$2, 3(%edx)
	jmp	L25
	.balign 2
.globl _initPit
	.def	_initPit;	.scl	2;	.type	32;	.endef
_initPit:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$52
	pushl	$67
	call	_io_out8
	pushl	$156
	pushl	$64
	call	_io_out8
	pushl	$46
	pushl	$64
	call	_io_out8
	movl	$_timerctl+10000, %edx
	movl	$0, _timerctl
	addl	$24, %esp
	movl	$_timerctl+20, %eax
L35:
	movl	$0, (%eax)
	addl	$20, %eax
	cmpl	%edx, %eax
	jle	L35
	call	_timerAlloc
	movl	$-1, 4(%eax)
	movl	$2, 8(%eax)
	movl	$0, (%eax)
	movl	%eax, _timerctl+8
	movl	$-1, _timerctl+4
	leave
	ret
	.balign 2
.globl _timerAlloc
	.def	_timerAlloc;	.scl	2;	.type	32;	.endef
_timerAlloc:
	pushl	%ebp
	xorl	%edx, %edx
	movl	%esp, %ebp
	movl	$_timerctl+12, %eax
L44:
	cmpl	$0, 8(%eax)
	je	L47
	incl	%edx
	addl	$20, %eax
	cmpl	$499, %edx
	jle	L44
	xorl	%eax, %eax
L38:
	popl	%ebp
	ret
L47:
	movl	$1, 8(%eax)
	jmp	L38
	.balign 2
.globl _timerFree
	.def	_timerFree;	.scl	2;	.type	32;	.endef
_timerFree:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	$0, 8(%eax)
	popl	%ebp
	ret
	.balign 2
.globl _timerInit
	.def	_timerInit;	.scl	2;	.type	32;	.endef
_timerInit:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	12(%ebp), %edx
	movl	%edx, 12(%eax)
	movl	16(%ebp), %edx
	movb	%dl, 16(%eax)
	popl	%ebp
	ret
	.balign 2
.globl _timerSetTime
	.def	_timerSetTime;	.scl	2;	.type	32;	.endef
_timerSetTime:
	pushl	%ebp
	movl	_timerctl, %eax
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	8(%ebp), %ebx
	addl	12(%ebp), %eax
	movl	$2, 8(%ebx)
	movl	%eax, 4(%ebx)
	call	_io_load_eflags
	movl	%eax, %esi
	call	_io_cli
	movl	_timerctl+8, %eax
	movl	4(%ebx), %edx
	cmpl	4(%eax), %edx
	jbe	L57
L52:
	movl	%eax, %ecx
	movl	(%eax), %eax
	testl	%eax, %eax
	je	L53
	cmpl	4(%eax), %edx
	ja	L52
	movl	%ebx, (%ecx)
	movl	%eax, (%ebx)
L53:
	movl	%esi, 8(%ebp)
	popl	%ebx
	popl	%esi
	popl	%ebp
	jmp	_io_store_eflags
L57:
	movl	%ebx, _timerctl+8
	movl	%edx, _timerctl+4
	movl	%eax, (%ebx)
	jmp	L53
	.balign 2
.globl _processNow
	.def	_processNow;	.scl	2;	.type	32;	.endef
_processNow:
	movl	_processctl, %eax
	pushl	%ebp
	movl	%esp, %ebp
	popl	%ebp
	movl	(%eax), %edx
	imull	$408, %edx, %edx
	leal	8(%edx,%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax,%edx,4), %eax
	ret
	.balign 2
.globl _processAdd
	.def	_processAdd;	.scl	2;	.type	32;	.endef
_processAdd:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %ecx
	movl	8(%ecx), %edx
	imull	$408, %edx, %edx
	addl	_processctl, %edx
	movl	8(%edx), %eax
	movl	%ecx, 16(%edx,%eax,4)
	incl	%eax
	movl	%eax, 8(%edx)
	movl	$2, 4(%ecx)
	popl	%ebp
	ret
	.balign 2
.globl _processRemove
	.def	_processRemove;	.scl	2;	.type	32;	.endef
_processRemove:
	pushl	%ebp
	xorl	%ecx, %ecx
	movl	%esp, %ebp
	pushl	%ebx
	movl	8(%ebp), %ebx
	movl	8(%ebx), %eax
	imull	$408, %eax, %eax
	addl	_processctl, %eax
	leal	8(%eax), %edx
	cmpl	8(%eax), %ecx
	jge	L62
L66:
	cmpl	%ebx, 8(%edx,%ecx,4)
	je	L62
	incl	%ecx
	cmpl	(%edx), %ecx
	jl	L66
L62:
	movl	4(%edx), %eax
	decl	(%edx)
	cmpl	%eax, %ecx
	jge	L67
	decl	%eax
	movl	%eax, 4(%edx)
L67:
	movl	(%edx), %eax
	cmpl	%eax, 4(%edx)
	jl	L68
	movl	$0, 4(%edx)
L68:
	movl	$1, 4(%ebx)
	movl	(%edx), %ebx
	cmpl	%ebx, %ecx
	jge	L76
L73:
	movl	12(%edx,%ecx,4), %eax
	movl	%eax, 8(%edx,%ecx,4)
	incl	%ecx
	cmpl	%ebx, %ecx
	jl	L73
L76:
	popl	%ebx
	popl	%ebp
	ret
	.balign 2
.globl _processSwitchSub
	.def	_processSwitchSub;	.scl	2;	.type	32;	.endef
_processSwitchSub:
	pushl	%ebp
	xorl	%ecx, %ecx
	movl	%esp, %ebp
	movl	_processctl, %eax
	xorl	%edx, %edx
L83:
	cmpl	$0, 8(%eax,%edx)
	jg	L79
	incl	%ecx
	addl	$408, %edx
	cmpl	$9, %ecx
	jle	L83
L79:
	movl	%ecx, (%eax)
	movb	$0, 4(%eax)
	popl	%ebp
	ret
	.balign 2
.globl _processInit
	.def	_processInit;	.scl	2;	.type	32;	.endef
_processInit:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%edi, %edi
	pushl	%ebx
	xorl	%esi, %esi
	pushl	$124088
	movl	$999, %ebx
	pushl	8(%ebp)
	call	_memsegAlloc4K
	movl	%eax, _processctl
	popl	%eax
	popl	%edx
L90:
	movl	%edi, %eax
	leal	24(%esi), %edx
	addl	_processctl, %eax
	addl	$120, %edi
	movl	$0, 4092(%eax)
	movl	%edx, 4088(%eax)
	addl	$4104, %eax
	pushl	$137
	pushl	%eax
	leal	2555928(%esi), %eax
	pushl	$103
	addl	$8, %esi
	pushl	%eax
	call	_setSegmdesc
	addl	$16, %esp
	decl	%ebx
	jns	L90
	movl	_processctl, %ecx
	xorl	%edx, %edx
	movl	$9, %ebx
L95:
	leal	(%ecx,%edx), %eax
	addl	$408, %edx
	decl	%ebx
	movl	$0, 8(%eax)
	movl	$0, 12(%eax)
	jns	L95
	call	_processAlloc
	movl	%eax, %ebx
	movl	$2, 4(%eax)
	movl	$2, 12(%eax)
	movl	$0, 8(%eax)
	pushl	%eax
	call	_processAdd
	call	_processSwitchSub
	pushl	(%ebx)
	call	_loadTr
	call	_timerAlloc
	pushl	$2
	movl	%eax, _mpTimer
	pushl	%eax
	call	_timerSetTime
	leal	-12(%ebp), %esp
	movl	%ebx, %eax
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _processAlloc
	.def	_processAlloc;	.scl	2;	.type	32;	.endef
_processAlloc:
	pushl	%ebp
	xorl	%ecx, %ecx
	movl	%esp, %ebp
	xorl	%edx, %edx
L106:
	movl	%edx, %eax
	addl	_processctl, %eax
	cmpl	$0, 4092(%eax)
	je	L109
	incl	%ecx
	addl	$120, %edx
	cmpl	$999, %ecx
	jle	L106
	xorl	%eax, %eax
L100:
	popl	%ebp
	ret
L109:
	addl	$4088, %eax
	movl	$1, 4(%eax)
	movl	$514, 52(%eax)
	movl	$0, 56(%eax)
	movl	$0, 60(%eax)
	movl	$0, 64(%eax)
	movl	$0, 68(%eax)
	movl	$0, 76(%eax)
	movl	$0, 80(%eax)
	movl	$0, 84(%eax)
	movl	$0, 88(%eax)
	movl	$0, 100(%eax)
	movl	$0, 104(%eax)
	movl	$0, 108(%eax)
	movl	$0, 112(%eax)
	movl	$1073741824, 116(%eax)
	jmp	L100
	.balign 2
.globl _processRun
	.def	_processRun;	.scl	2;	.type	32;	.endef
_processRun:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	12(%ebp), %esi
	movl	16(%ebp), %eax
	movl	8(%ebp), %ebx
	testl	%esi, %esi
	js	L115
L111:
	testl	%eax, %eax
	jle	L112
	movl	%eax, 12(%ebx)
L112:
	cmpl	$2, 4(%ebx)
	je	L116
L113:
	cmpl	$2, 4(%ebx)
	je	L114
	movl	%esi, 8(%ebx)
	pushl	%ebx
	call	_processAdd
	popl	%ecx
L114:
	movl	_processctl, %eax
	movb	$1, 4(%eax)
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L116:
	cmpl	%esi, 8(%ebx)
	je	L113
	pushl	%ebx
	call	_processRemove
	popl	%eax
	jmp	L113
L115:
	movl	8(%ebx), %esi
	jmp	L111
	.balign 2
.globl _processSwitch
	.def	_processSwitch;	.scl	2;	.type	32;	.endef
_processSwitch:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	_processctl, %ebx
	movl	(%ebx), %edx
	imull	$408, %edx, %edx
	leal	(%edx,%ebx), %edx
	leal	8(%edx), %ecx
	movl	4(%ecx), %eax
	movl	8(%ecx,%eax,4), %esi
	incl	%eax
	movl	%eax, 4(%ecx)
	cmpl	8(%edx), %eax
	je	L121
L118:
	cmpb	$0, 4(%ebx)
	jne	L122
L119:
	movl	4(%ecx), %eax
	movl	8(%ecx,%eax,4), %ebx
	pushl	12(%ebx)
	pushl	_mpTimer
	call	_timerSetTime
	cmpl	%esi, %ebx
	popl	%ecx
	popl	%eax
	je	L117
	pushl	(%ebx)
	pushl	$0
	call	_farJmp
	popl	%eax
	popl	%edx
L117:
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L122:
	call	_processSwitchSub
	movl	_processctl, %edx
	movl	(%edx), %eax
	imull	$408, %eax, %eax
	leal	8(%eax,%edx), %ecx
	jmp	L119
L121:
	movl	$0, 4(%ecx)
	jmp	L118
	.balign 2
.globl _processSleep
	.def	_processSleep;	.scl	2;	.type	32;	.endef
_processSleep:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	8(%ebp), %esi
	cmpl	$2, 4(%esi)
	je	L126
L123:
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L126:
	call	_processNow
	pushl	%esi
	movl	%eax, %ebx
	call	_processRemove
	popl	%ecx
	cmpl	%ebx, %esi
	jne	L123
	call	_processSwitchSub
	call	_processNow
	pushl	(%eax)
	pushl	$0
	call	_farJmp
	popl	%eax
	popl	%edx
	jmp	L123
	.balign 2
.globl _init_pic
	.def	_init_pic;	.scl	2;	.type	32;	.endef
_init_pic:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$255
	pushl	$33
	call	_io_out8
	pushl	$255
	pushl	$161
	call	_io_out8
	pushl	$17
	pushl	$32
	call	_io_out8
	pushl	$32
	pushl	$33
	call	_io_out8
	addl	$32, %esp
	pushl	$4
	pushl	$33
	call	_io_out8
	pushl	$1
	pushl	$33
	call	_io_out8
	pushl	$17
	pushl	$160
	call	_io_out8
	pushl	$40
	pushl	$161
	call	_io_out8
	addl	$32, %esp
	pushl	$2
	pushl	$161
	call	_io_out8
	pushl	$1
	pushl	$161
	call	_io_out8
	pushl	$251
	pushl	$33
	call	_io_out8
	pushl	$255
	pushl	$161
	call	_io_out8
	leave
	ret
	.balign 2
.globl _interruptHandler21
	.def	_interruptHandler21;	.scl	2;	.type	32;	.endef
_interruptHandler21:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$97
	pushl	$32
	call	_io_out8
	pushl	$96
	call	_io_in8
	addl	_keyData0, %eax
	pushl	%eax
	pushl	_keybuf
	call	_QueuePush
	leave
	ret
	.balign 2
.globl _interruptHandler27
	.def	_interruptHandler27;	.scl	2;	.type	32;	.endef
_interruptHandler27:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$103
	pushl	$32
	call	_io_out8
	leave
	ret
	.balign 2
.globl _interruptHandler2c
	.def	_interruptHandler2c;	.scl	2;	.type	32;	.endef
_interruptHandler2c:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$100
	pushl	$160
	call	_io_out8
	pushl	$98
	pushl	$32
	call	_io_out8
	pushl	$96
	call	_io_in8
	addl	_mouseData0, %eax
	pushl	%eax
	pushl	_mousebuf
	call	_QueuePush
	leave
	ret
	.balign 2
.globl _interruptHandler20
	.def	_interruptHandler20;	.scl	2;	.type	32;	.endef
_interruptHandler20:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	xorl	%esi, %esi
	pushl	$96
	pushl	$32
	call	_io_out8
	movl	_timerctl, %eax
	incl	%eax
	movl	%eax, _timerctl
	cmpl	%eax, _timerctl+4
	popl	%ecx
	popl	%ebx
	ja	L131
	movl	_timerctl+8, %ebx
L133:
	movl	4(%ebx), %eax
	cmpl	_timerctl, %eax
	ja	L134
	movl	$1, 8(%ebx)
	cmpl	_mpTimer, %ebx
	je	L137
	movzbl	16(%ebx), %eax
	pushl	%eax
	pushl	12(%ebx)
	call	_QueuePush
	popl	%eax
	popl	%edx
L138:
	movl	(%ebx), %ebx
	jmp	L133
L137:
	movl	$1, %esi
	jmp	L138
L134:
	movl	%eax, _timerctl+4
	movl	%ebx, _timerctl+8
	movl	%esi, %eax
	testb	%al, %al
	jne	L140
L131:
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L140:
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	jmp	_processSwitch
	.balign 2
.globl _setSegmdesc
	.def	_setSegmdesc;	.scl	2;	.type	32;	.endef
_setSegmdesc:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	12(%ebp), %edx
	movl	16(%ebp), %ecx
	movl	8(%ebp), %ebx
	movl	20(%ebp), %eax
	cmpl	$1048575, %edx
	jbe	L142
	shrl	$12, %edx
	orl	$32768, %eax
L142:
	movw	%dx, (%ebx)
	movb	%al, 5(%ebx)
	shrl	$16, %edx
	sarl	$8, %eax
	andl	$15, %edx
	movw	%cx, 2(%ebx)
	andl	$-16, %eax
	sarl	$16, %ecx
	orl	%eax, %edx
	movb	%cl, 4(%ebx)
	movb	%dl, 6(%ebx)
	sarl	$8, %ecx
	movb	%cl, 7(%ebx)
	popl	%ebx
	popl	%ebp
	ret
	.balign 2
.globl _setGatedesc
	.def	_setGatedesc;	.scl	2;	.type	32;	.endef
_setGatedesc:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	8(%ebp), %edx
	movl	16(%ebp), %eax
	movl	20(%ebp), %ebx
	movl	12(%ebp), %ecx
	movw	%ax, 2(%edx)
	movb	%bl, 5(%edx)
	movw	%cx, (%edx)
	movl	%ebx, %eax
	sarl	$8, %eax
	sarl	$16, %ecx
	movb	%al, 4(%edx)
	movw	%cx, 6(%edx)
	popl	%ebx
	popl	%ebp
	ret
	.balign 2
.globl _initGdtit
	.def	_initGdtit;	.scl	2;	.type	32;	.endef
_initGdtit:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	$2555904, %esi
	movl	$8191, %ebx
L149:
	pushl	$0
	pushl	$0
	pushl	$0
	pushl	%esi
	addl	$8, %esi
	call	_setSegmdesc
	addl	$16, %esp
	decl	%ebx
	jns	L149
	pushl	$16530
	movl	$255, %ebx
	pushl	$0
	pushl	$-1
	pushl	$2555912
	call	_setSegmdesc
	pushl	$16538
	pushl	$2621440
	pushl	$524287
	pushl	$2555920
	call	_setSegmdesc
	addl	$32, %esp
	pushl	$2555904
	pushl	$65535
	call	_loadGdtr
	popl	%esi
	popl	%eax
	movl	$2553856, %esi
L154:
	pushl	$0
	pushl	$0
	pushl	$0
	pushl	%esi
	addl	$8, %esi
	call	_setGatedesc
	addl	$16, %esp
	decl	%ebx
	jns	L154
	pushl	$2553856
	pushl	$2047
	call	_loadIdtr
	pushl	$142
	pushl	$16
	pushl	$_asm_interruptHandler20
	pushl	$2554112
	call	_setGatedesc
	pushl	$142
	pushl	$16
	pushl	$_asm_interruptHandler21
	pushl	$2554120
	call	_setGatedesc
	addl	$40, %esp
	pushl	$142
	pushl	$16
	pushl	$_asm_interruptHandler27
	pushl	$2554168
	call	_setGatedesc
	pushl	$142
	pushl	$16
	pushl	$_asm_interruptHandler2c
	pushl	$2554208
	call	_setGatedesc
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
	.balign 2
.globl _set_palette
	.def	_set_palette;	.scl	2;	.type	32;	.endef
_set_palette:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%ecx
	movl	8(%ebp), %ebx
	movl	12(%ebp), %edi
	movl	16(%ebp), %esi
	call	_io_load_eflags
	movl	%eax, -16(%ebp)
	call	_io_cli
	pushl	%ebx
	pushl	$968
	call	_io_out8
	cmpl	%edi, %ebx
	popl	%eax
	popl	%edx
	jge	L166
	subl	%ebx, %edi
	movl	%edi, %ebx
L164:
	movb	(%esi), %al
	shrb	$2, %al
	movzbl	%al, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	movb	1(%esi), %al
	shrb	$2, %al
	movzbl	%al, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	movb	2(%esi), %al
	shrb	$2, %al
	addl	$3, %esi
	movzbl	%al, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	addl	$24, %esp
	decl	%ebx
	jne	L164
L166:
	movl	-16(%ebp), %eax
	movl	%eax, 8(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_io_store_eflags
	.data
_table_rgb.0:
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	0
	.byte	-1
	.byte	-1
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	-1
	.byte	0
	.byte	-1
	.byte	0
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-58
	.byte	-58
	.byte	-58
	.byte	-124
	.byte	0
	.byte	0
	.byte	0
	.byte	-124
	.byte	0
	.byte	-124
	.byte	-124
	.byte	0
	.byte	0
	.byte	0
	.byte	-124
	.byte	-124
	.byte	0
	.byte	-124
	.byte	0
	.byte	-124
	.byte	-124
	.byte	-124
	.byte	-124
	.byte	-124
	.text
	.balign 2
.globl _init_palette
	.def	_init_palette;	.scl	2;	.type	32;	.endef
_init_palette:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$_table_rgb.0
	pushl	$15
	pushl	$0
	call	_set_palette
	leave
	ret
	.balign 2
.globl _boxFill8
	.def	_boxFill8;	.scl	2;	.type	32;	.endef
_boxFill8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%edi
	pushl	%edi
	movb	16(%ebp), %al
	movl	24(%ebp), %ecx
	movl	28(%ebp), %edi
	movb	%al, -13(%ebp)
	cmpl	32(%ebp), %ecx
	jg	L180
	movl	12(%ebp), %ebx
	imull	%ecx, %ebx
L178:
	movl	20(%ebp), %edx
	cmpl	%edi, %edx
	jg	L182
	movl	8(%ebp), %esi
	addl	%ebx, %esi
	addl	%edx, %esi
	movl	%esi, -20(%ebp)
L177:
	movl	-20(%ebp), %esi
	movb	-13(%ebp), %al
	incl	%edx
	movb	%al, (%esi)
	incl	%esi
	movl	%esi, -20(%ebp)
	cmpl	%edi, %edx
	jle	L177
L182:
	incl	%ecx
	addl	12(%ebp), %ebx
	cmpl	32(%ebp), %ecx
	jle	L178
L180:
	popl	%ebx
	popl	%esi
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _init_GUI
	.def	_init_GUI;	.scl	2;	.type	32;	.endef
_init_GUI:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$12, %esp
	movl	16(%ebp), %eax
	movl	12(%ebp), %edi
	subl	$29, %eax
	decl	%edi
	pushl	%eax
	pushl	%edi
	pushl	$0
	pushl	$0
	pushl	$14
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	subl	$28, %eax
	pushl	%eax
	pushl	%edi
	pushl	%eax
	pushl	$0
	pushl	$8
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	addl	$56, %esp
	subl	$27, %eax
	pushl	%eax
	pushl	%edi
	pushl	%eax
	pushl	$0
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	decl	%eax
	pushl	%eax
	movl	16(%ebp), %eax
	pushl	%edi
	subl	$26, %eax
	pushl	%eax
	pushl	$0
	pushl	$8
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %esi
	addl	$56, %esp
	subl	$24, %esi
	pushl	%esi
	pushl	$59
	pushl	%esi
	pushl	$3
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	subl	$4, %eax
	pushl	%eax
	movl	%eax, -16(%ebp)
	pushl	$2
	pushl	%esi
	pushl	$2
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	addl	$56, %esp
	pushl	-16(%ebp)
	pushl	$59
	pushl	-16(%ebp)
	pushl	$3
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	subl	$5, %eax
	pushl	%eax
	movl	16(%ebp), %eax
	pushl	$59
	subl	$23, %eax
	pushl	%eax
	movl	%eax, -20(%ebp)
	pushl	$59
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	addl	$56, %esp
	subl	$3, %eax
	movl	%eax, -24(%ebp)
	pushl	%eax
	pushl	$59
	pushl	%eax
	pushl	$2
	pushl	$0
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	pushl	-24(%ebp)
	pushl	$60
	pushl	%esi
	pushl	$60
	pushl	$0
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	12(%ebp), %edi
	addl	$56, %esp
	movl	12(%ebp), %ebx
	subl	$4, %ebx
	subl	$47, %edi
	pushl	%esi
	pushl	%ebx
	pushl	%esi
	pushl	%edi
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	pushl	-16(%ebp)
	pushl	%edi
	pushl	-20(%ebp)
	pushl	%edi
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	addl	$56, %esp
	pushl	-24(%ebp)
	pushl	%ebx
	pushl	-24(%ebp)
	pushl	%edi
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	12(%ebp), %eax
	pushl	-24(%ebp)
	subl	$3, %eax
	pushl	%eax
	pushl	%esi
	pushl	%eax
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _putFont8
	.def	_putFont8;	.scl	2;	.type	32;	.endef
_putFont8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%esi, %esi
	pushl	%ebx
	movl	28(%ebp), %edi
	movb	24(%ebp), %bl
L197:
	movl	20(%ebp), %eax
	movl	16(%ebp), %edx
	addl	%esi, %eax
	imull	12(%ebp), %eax
	addl	8(%ebp), %eax
	leal	(%edx,%eax), %ecx
	movb	(%esi,%edi), %dl
	testb	%dl, %dl
	jns	L189
	movb	%bl, (%ecx)
L189:
	movb	%dl, %al
	andl	$64, %eax
	testb	%al, %al
	je	L190
	movb	%bl, 1(%ecx)
L190:
	movb	%dl, %al
	andl	$32, %eax
	testb	%al, %al
	je	L191
	movb	%bl, 2(%ecx)
L191:
	movb	%dl, %al
	andl	$16, %eax
	testb	%al, %al
	je	L192
	movb	%bl, 3(%ecx)
L192:
	movb	%dl, %al
	andl	$8, %eax
	testb	%al, %al
	je	L193
	movb	%bl, 4(%ecx)
L193:
	movb	%dl, %al
	andl	$4, %eax
	testb	%al, %al
	je	L194
	movb	%bl, 5(%ecx)
L194:
	movb	%dl, %al
	andl	$2, %eax
	testb	%al, %al
	je	L195
	movb	%bl, 6(%ecx)
L195:
	andl	$1, %edx
	testb	%dl, %dl
	je	L187
	movb	%bl, 7(%ecx)
L187:
	incl	%esi
	cmpl	$15, %esi
	jle	L197
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _putFont8_asc
	.def	_putFont8_asc;	.scl	2;	.type	32;	.endef
_putFont8_asc:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%eax
	movl	28(%ebp), %ebx
	movb	24(%ebp), %al
	movb	%al, -13(%ebp)
	movl	16(%ebp), %esi
	movl	20(%ebp), %edi
	cmpb	$0, (%ebx)
	jne	L205
L207:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L205:
	movzbl	(%ebx), %eax
	sall	$4, %eax
	incl	%ebx
	addl	$_font, %eax
	pushl	%eax
	movsbl	-13(%ebp),%eax
	pushl	%eax
	pushl	%edi
	pushl	%esi
	addl	$8, %esi
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_putFont8
	addl	$24, %esp
	cmpb	$0, (%ebx)
	jne	L205
	jmp	L207
	.balign 2
.globl _putFont8AscSheet
	.def	_putFont8AscSheet;	.scl	2;	.type	32;	.endef
_putFont8AscSheet:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	16(%ebp), %edi
	movl	%eax, -16(%ebp)
	movl	20(%ebp), %ebx
	movl	12(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	28(%ebp), %eax
	movl	%eax, -24(%ebp)
	leal	15(%edi), %eax
	pushl	%eax
	movl	-20(%ebp), %eax
	movl	32(%ebp), %esi
	movsbl	%bl,%ebx
	leal	(%eax,%esi,8), %esi
	leal	-1(%esi), %eax
	pushl	%eax
	pushl	%edi
	pushl	-20(%ebp)
	movzbl	24(%ebp), %eax
	pushl	%eax
	movl	-16(%ebp), %eax
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	pushl	-24(%ebp)
	pushl	%ebx
	pushl	%edi
	pushl	-20(%ebp)
	movl	-16(%ebp), %eax
	pushl	4(%eax)
	pushl	(%eax)
	call	_putFont8_asc
	movl	%edi, 16(%ebp)
	leal	16(%edi), %eax
	movl	%esi, 20(%ebp)
	movl	%eax, 24(%ebp)
	addl	$52, %esp
	movl	-20(%ebp), %eax
	movl	%eax, 12(%ebp)
	movl	-16(%ebp), %eax
	movl	%eax, 8(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_sheetRefresh
	.data
_cursor.1:
	.ascii "*..............."
	.ascii "**.............."
	.ascii "*O*............."
	.ascii "*OO*............"
	.ascii "*OOO*..........."
	.ascii "*OOOO*.........."
	.ascii "*OOOOO*........."
	.ascii "*OOOOOO*........"
	.ascii "*OOOOOOO*......."
	.ascii "*OOOO*****......"
	.ascii "*OO*O*.........."
	.ascii "*O*.*O*........."
	.ascii "**..*O*........."
	.ascii "*....*O*........"
	.ascii ".....*O*........"
	.ascii "......*........."
	.text
	.balign 2
.globl _initMouseCursor8
	.def	_initMouseCursor8;	.scl	2;	.type	32;	.endef
_initMouseCursor8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%edi, %edi
	pushl	%ebx
	xorl	%ebx, %ebx
	pushl	%eax
	movb	12(%ebp), %al
	movl	8(%ebp), %esi
	movb	%al, -13(%ebp)
L222:
	xorl	%edx, %edx
L221:
	leal	(%edx,%edi), %eax
	cmpb	$42, _cursor.1(%eax)
	je	L227
L218:
	cmpb	$79, _cursor.1(%eax)
	je	L228
L219:
	cmpb	$46, _cursor.1(%eax)
	je	L229
L216:
	incl	%edx
	cmpl	$15, %edx
	jle	L221
	incl	%ebx
	addl	$16, %edi
	cmpl	$15, %ebx
	jle	L222
	popl	%eax
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L229:
	movb	-13(%ebp), %cl
	movb	%cl, (%eax,%esi)
	jmp	L216
L228:
	movb	$7, (%eax,%esi)
	jmp	L219
L227:
	movb	$0, (%eax,%esi)
	jmp	L218
	.balign 2
.globl _putblock8_8
	.def	_putblock8_8;	.scl	2;	.type	32;	.endef
_putblock8_8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%esi, %esi
	pushl	%ebx
	subl	$12, %esp
	cmpl	20(%ebp), %esi
	jge	L242
	xorl	%edi, %edi
L240:
	xorl	%ebx, %ebx
	cmpl	16(%ebp), %ebx
	jge	L244
	movl	32(%ebp), %eax
	addl	%edi, %eax
	movl	%eax, -20(%ebp)
L239:
	movl	28(%ebp), %eax
	movl	24(%ebp), %edx
	addl	%esi, %eax
	addl	%ebx, %edx
	imull	12(%ebp), %eax
	addl	%edx, %eax
	movl	8(%ebp), %ecx
	movl	-20(%ebp), %edx
	incl	%ebx
	movb	(%edx), %dl
	movb	%dl, (%eax,%ecx)
	incl	-20(%ebp)
	cmpl	16(%ebp), %ebx
	jl	L239
L244:
	incl	%esi
	addl	36(%ebp), %edi
	cmpl	20(%ebp), %esi
	jl	L240
L242:
	addl	$12, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _memtest
	.def	_memtest;	.scl	2;	.type	32;	.endef
_memtest:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	xorl	%esi, %esi
	call	_io_load_eflags
	orl	$262144, %eax
	pushl	%eax
	call	_io_store_eflags
	call	_io_load_eflags
	popl	%edx
	testl	$262144, %eax
	je	L246
	movl	$1, %esi
L246:
	andl	$-262145, %eax
	pushl	%eax
	call	_io_store_eflags
	movl	%esi, %eax
	popl	%ebx
	testb	%al, %al
	jne	L249
L247:
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_memtest_sub
	movl	%eax, %ebx
	popl	%eax
	movl	%esi, %eax
	popl	%edx
	testb	%al, %al
	jne	L250
L248:
	leal	-8(%ebp), %esp
	movl	%ebx, %eax
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L250:
	call	_loadCr0
	andl	$-1610612737, %eax
	pushl	%eax
	call	_storeCr0
	popl	%eax
	jmp	L248
L249:
	call	_loadCr0
	orl	$1610612736, %eax
	pushl	%eax
	call	_storeCr0
	popl	%ecx
	jmp	L247
	.balign 2
.globl _memsegTotal
	.def	_memsegTotal;	.scl	2;	.type	32;	.endef
_memsegTotal:
	pushl	%ebp
	xorl	%eax, %eax
	movl	%esp, %ebp
	xorl	%edx, %edx
	pushl	%ebx
	movl	8(%ebp), %ebx
	movl	(%ebx), %ecx
	cmpl	%ecx, %eax
	jae	L258
L256:
	addl	20(%ebx,%edx,8), %eax
	incl	%edx
	cmpl	%ecx, %edx
	jb	L256
L258:
	popl	%ebx
	popl	%ebp
	ret
	.balign 2
.globl _memsegInit
	.def	_memsegInit;	.scl	2;	.type	32;	.endef
_memsegInit:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	$0, 8(%eax)
	movl	$0, 12(%eax)
	popl	%ebp
	ret
	.balign 2
.globl _memsegAlloc
	.def	_memsegAlloc;	.scl	2;	.type	32;	.endef
_memsegAlloc:
	pushl	%ebp
	xorl	%ecx, %ecx
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	movl	12(%ebp), %esi
	movl	8(%ebp), %ebx
	movl	(%ebx), %eax
	cmpl	%eax, %ecx
	jae	L274
L272:
	movl	20(%ebx,%ecx,8), %edx
	cmpl	%esi, %edx
	jae	L276
	incl	%ecx
	cmpl	%eax, %ecx
	jb	L272
L274:
	xorl	%eax, %eax
L260:
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L276:
	movl	16(%ebx,%ecx,8), %edi
	leal	(%esi,%edi), %eax
	movl	%eax, 16(%ebx,%ecx,8)
	movl	%edx, %eax
	subl	%esi, %eax
	movl	%eax, 20(%ebx,%ecx,8)
	testl	%eax, %eax
	jne	L266
	movl	(%ebx), %eax
	decl	%eax
	movl	%eax, (%ebx)
	cmpl	%eax, %ecx
	jae	L266
	movl	%eax, %esi
L271:
	movl	24(%ebx,%ecx,8), %eax
	movl	28(%ebx,%ecx,8), %edx
	movl	%eax, 16(%ebx,%ecx,8)
	movl	%edx, 20(%ebx,%ecx,8)
	incl	%ecx
	cmpl	%esi, %ecx
	jb	L271
L266:
	movl	%edi, %eax
	jmp	L260
	.balign 2
.globl _memsegFree
	.def	_memsegFree;	.scl	2;	.type	32;	.endef
_memsegFree:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	movl	8(%ebp), %esi
	pushl	%ebx
	xorl	%ebx, %ebx
	movl	(%esi), %edi
	cmpl	%edi, %ebx
	jge	L279
L283:
	movl	12(%ebp), %eax
	cmpl	%eax, 16(%esi,%ebx,8)
	ja	L279
	incl	%ebx
	cmpl	%edi, %ebx
	jl	L283
L279:
	testl	%ebx, %ebx
	jle	L284
	movl	12(%esi,%ebx,8), %edx
	movl	8(%esi,%ebx,8), %eax
	addl	%edx, %eax
	cmpl	12(%ebp), %eax
	je	L304
L284:
	cmpl	%edi, %ebx
	jge	L291
	movl	12(%ebp), %eax
	addl	16(%ebp), %eax
	cmpl	16(%esi,%ebx,8), %eax
	je	L305
L291:
	cmpl	$4089, %edi
	jg	L292
	movl	%edi, %ecx
	cmpl	%ebx, %edi
	jle	L302
L297:
	movl	8(%esi,%ecx,8), %eax
	movl	12(%esi,%ecx,8), %edx
	movl	%eax, 16(%esi,%ecx,8)
	movl	%edx, 20(%esi,%ecx,8)
	decl	%ecx
	cmpl	%ebx, %ecx
	jg	L297
L302:
	leal	1(%edi), %eax
	movl	%eax, (%esi)
	cmpl	%eax, 4(%esi)
	jge	L298
	movl	%eax, 4(%esi)
L298:
	movl	12(%ebp), %eax
	movl	%eax, 16(%esi,%ebx,8)
	movl	16(%ebp), %eax
	movl	%eax, 20(%esi,%ebx,8)
L303:
	xorl	%eax, %eax
L277:
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L292:
	movl	16(%ebp), %eax
	incl	12(%esi)
	addl	%eax, 8(%esi)
	orl	$-1, %eax
	jmp	L277
L305:
	movl	12(%ebp), %eax
	movl	%eax, 16(%esi,%ebx,8)
	movl	16(%ebp), %eax
	addl	%eax, 20(%esi,%ebx,8)
	jmp	L303
L304:
	addl	16(%ebp), %edx
	movl	%edx, 12(%esi,%ebx,8)
	cmpl	(%esi), %ebx
	jge	L303
	movl	12(%ebp), %eax
	addl	16(%ebp), %eax
	cmpl	16(%esi,%ebx,8), %eax
	jne	L303
	addl	20(%esi,%ebx,8), %edx
	movl	%edx, 12(%esi,%ebx,8)
	movl	(%esi), %eax
	decl	%eax
	movl	%eax, (%esi)
	cmpl	%eax, %ebx
	jge	L303
	movl	%eax, %ecx
L290:
	movl	24(%esi,%ebx,8), %eax
	movl	28(%esi,%ebx,8), %edx
	movl	%eax, 16(%esi,%ebx,8)
	movl	%edx, 20(%esi,%ebx,8)
	incl	%ebx
	cmpl	%ecx, %ebx
	jl	L290
	jmp	L303
	.balign 2
.globl _memsegAlloc4K
	.def	_memsegAlloc4K;	.scl	2;	.type	32;	.endef
_memsegAlloc4K:
	pushl	%ebp
	movl	%esp, %ebp
	movl	12(%ebp), %eax
	addl	$4095, %eax
	andl	$-4096, %eax
	movl	%eax, 12(%ebp)
	popl	%ebp
	jmp	_memsegAlloc
	.balign 2
.globl _memsegFree4K
	.def	_memsegFree4K;	.scl	2;	.type	32;	.endef
_memsegFree4K:
	pushl	%ebp
	movl	%esp, %ebp
	movl	16(%ebp), %eax
	addl	$4095, %eax
	andl	$-4096, %eax
	movl	%eax, 16(%ebp)
	popl	%ebp
	jmp	_memsegFree
	.balign 2
.globl _shtctlInit
	.def	_shtctlInit;	.scl	2;	.type	32;	.endef
_shtctlInit:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	movl	8(%ebp), %esi
	pushl	$10260
	movl	16(%ebp), %edi
	pushl	%esi
	call	_memsegAlloc4K
	popl	%ecx
	movl	%eax, %ebx
	popl	%eax
	xorl	%eax, %eax
	testl	%ebx, %ebx
	je	L308
	movl	20(%ebp), %eax
	imull	%edi, %eax
	pushl	%eax
	pushl	%esi
	call	_memsegAlloc4K
	testl	%eax, %eax
	movl	%eax, 4(%ebx)
	popl	%ecx
	popl	%edx
	je	L319
	movl	12(%ebp), %eax
	movl	%edi, 8(%ebx)
	movl	%eax, (%ebx)
	leal	9180(%ebx), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%ebx)
	movl	%ebx, %eax
	movl	$-1, 16(%ebx)
L315:
	movl	$0, 1072(%eax)
	movl	%ebx, 1076(%eax)
	addl	$36, %eax
	cmpl	%edx, %eax
	jle	L315
L318:
	movl	%ebx, %eax
L308:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L319:
	pushl	$10260
	pushl	%ebx
	pushl	%esi
	call	_memsegFree4K
	jmp	L318
	.balign 2
.globl _sheetAlloc
	.def	_sheetAlloc;	.scl	2;	.type	32;	.endef
_sheetAlloc:
	pushl	%ebp
	xorl	%edx, %edx
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	addl	$1044, %eax
L326:
	cmpl	$0, 28(%eax)
	je	L329
	incl	%edx
	addl	$36, %eax
	cmpl	$255, %edx
	jle	L326
	xorl	%eax, %eax
L320:
	popl	%ebp
	ret
L329:
	movl	$1, 28(%eax)
	movl	$-1, 24(%eax)
	jmp	L320
	.balign 2
.globl _sheetSetbuf
	.def	_sheetSetbuf;	.scl	2;	.type	32;	.endef
_sheetSetbuf:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %edx
	movl	12(%ebp), %eax
	movl	%eax, (%edx)
	movl	16(%ebp), %eax
	movl	%eax, 4(%edx)
	movl	20(%ebp), %eax
	movl	%eax, 8(%edx)
	movl	24(%ebp), %eax
	movl	%eax, 20(%edx)
	popl	%ebp
	ret
	.balign 2
.globl _sheetRefreshMap
	.def	_sheetRefreshMap;	.scl	2;	.type	32;	.endef
_sheetRefreshMap:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$40, %esp
	movl	8(%ebp), %eax
	cmpl	$0, 12(%ebp)
	movl	4(%eax), %eax
	movl	%eax, -40(%ebp)
	js	L362
L332:
	cmpl	$0, 16(%ebp)
	js	L363
L333:
	movl	8(%ebp), %edx
	movl	8(%edx), %eax
	cmpl	%eax, 20(%ebp)
	jle	L334
	movl	%eax, 20(%ebp)
L334:
	movl	8(%ebp), %esi
	movl	12(%esi), %eax
	cmpl	%eax, 24(%ebp)
	jle	L335
	movl	%eax, 24(%ebp)
L335:
	movl	8(%ebp), %eax
	movl	28(%ebp), %edi
	movl	%edi, -16(%ebp)
	cmpl	16(%eax), %edi
	jg	L357
L355:
	movl	8(%ebp), %esi
	movl	-16(%ebp), %edx
	movl	16(%ebp), %ebx
	movl	20(%esi,%edx,4), %ecx
	movl	%ecx, %eax
	subl	%esi, %eax
	movl	(%ecx), %edi
	subl	$1044, %eax
	movl	16(%ecx), %edx
	sarl	$2, %eax
	movl	%edi, -32(%ebp)
	imull	$954437177, %eax, %eax
	movl	24(%ebp), %edi
	subl	%edx, %ebx
	subl	%edx, %edi
	movb	%al, -33(%ebp)
	movl	20(%ebp), %esi
	movl	12(%ebp), %edx
	movl	12(%ecx), %eax
	movl	%edi, -44(%ebp)
	subl	%eax, %esi
	subl	%eax, %edx
	movl	%esi, -52(%ebp)
	movl	%edx, -28(%ebp)
	js	L364
L340:
	testl	%ebx, %ebx
	js	L365
L341:
	movl	4(%ecx), %eax
	cmpl	%eax, -52(%ebp)
	jle	L342
	movl	%eax, -52(%ebp)
L342:
	movl	8(%ecx), %eax
	cmpl	%eax, -44(%ebp)
	jle	L343
	movl	%eax, -44(%ebp)
L343:
	cmpl	-44(%ebp), %ebx
	jge	L359
L354:
	movl	16(%ecx), %esi
	movl	-28(%ebp), %edx
	addl	%ebx, %esi
	cmpl	-52(%ebp), %edx
	movl	%esi, -24(%ebp)
	jge	L361
L353:
	movl	%ebx, %eax
	movl	12(%ecx), %edi
	imull	4(%ecx), %eax
	addl	%edx, %edi
	movl	-32(%ebp), %esi
	addl	%edx, %eax
	movl	%edi, -20(%ebp)
	movzbl	(%eax,%esi), %esi
	cmpl	20(%ecx), %esi
	je	L350
	movl	8(%ebp), %edi
	movl	-24(%ebp), %eax
	movl	-40(%ebp), %esi
	imull	8(%edi), %eax
	addl	-20(%ebp), %eax
	movl	%eax, -48(%ebp)
	movb	-33(%ebp), %al
	movl	-48(%ebp), %edi
	movb	%al, (%edi,%esi)
L350:
	incl	%edx
	cmpl	-52(%ebp), %edx
	jl	L353
L361:
	incl	%ebx
	cmpl	-44(%ebp), %ebx
	jl	L354
L359:
	movl	8(%ebp), %edx
	incl	-16(%ebp)
	movl	-16(%ebp), %eax
	cmpl	16(%edx), %eax
	jle	L355
L357:
	addl	$40, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L365:
	xorl	%ebx, %ebx
	jmp	L341
L364:
	movl	$0, -28(%ebp)
	jmp	L340
L363:
	movl	$0, 16(%ebp)
	jmp	L333
L362:
	movl	$0, 12(%ebp)
	jmp	L332
	.balign 2
.globl _sheetUpdown
	.def	_sheetUpdown;	.scl	2;	.type	32;	.endef
_sheetUpdown:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	movl	8(%ebp), %edi
	pushl	%ebx
	movl	12(%ebp), %esi
	movl	32(%edi), %ebx
	movl	24(%edi), %eax
	movl	16(%ebx), %edx
	incl	%edx
	cmpl	%edx, %esi
	jle	L367
	movl	%edx, %esi
L367:
	cmpl	$-1, %esi
	jge	L368
	orl	$-1, %esi
L368:
	movl	%esi, 24(%edi)
	cmpl	%esi, %eax
	jle	L369
	testl	%esi, %esi
	js	L370
	movl	%eax, %ecx
L375:
	movl	16(%ebx,%ecx,4), %eax
	movl	%eax, 20(%ebx,%ecx,4)
	movl	%ecx, 24(%eax)
	decl	%ecx
	cmpl	%esi, %ecx
	jg	L375
	movl	%edi, 20(%ebx,%esi,4)
	leal	1(%esi), %ebx
	pushl	%ebx
	movl	16(%edi), %ecx
	movl	%ecx, %eax
	addl	8(%edi), %eax
	pushl	%eax
	movl	12(%edi), %edx
	movl	%edx, %eax
	addl	4(%edi), %eax
	pushl	%eax
	pushl	%ecx
	pushl	%edx
	pushl	32(%edi)
	call	_sheetRefreshMap
	pushl	%ebx
L404:
	movl	16(%edi), %ecx
	movl	%ecx, %eax
	addl	8(%edi), %eax
	pushl	%eax
	movl	12(%edi), %edx
	movl	%edx, %eax
	addl	4(%edi), %eax
	pushl	%eax
	pushl	%ecx
	pushl	%edx
	pushl	32(%edi)
	call	_sheetRefreshSub
	addl	$48, %esp
L366:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L370:
	movl	16(%ebx), %edx
	cmpl	%eax, %edx
	jle	L377
	movl	%eax, %ecx
	cmpl	%edx, %eax
	jge	L377
L382:
	movl	24(%ebx,%ecx,4), %eax
	movl	%eax, 20(%ebx,%ecx,4)
	movl	%ecx, 24(%eax)
	incl	%ecx
	cmpl	16(%ebx), %ecx
	jl	L382
L377:
	decl	16(%ebx)
	pushl	$0
	movl	16(%edi), %ecx
	movl	%ecx, %eax
	addl	8(%edi), %eax
	pushl	%eax
	movl	12(%edi), %edx
	movl	%edx, %eax
	addl	4(%edi), %eax
	pushl	%eax
	pushl	%ecx
	pushl	%edx
	pushl	32(%edi)
	call	_sheetRefreshMap
	pushl	$0
	jmp	L404
L369:
	cmpl	%esi, %eax
	jge	L366
	testl	%eax, %eax
	js	L385
	movl	%eax, %ecx
	cmpl	%esi, %eax
	jge	L401
L390:
	movl	24(%ebx,%ecx,4), %eax
	movl	%eax, 20(%ebx,%ecx,4)
	movl	%ecx, 24(%eax)
	incl	%ecx
	cmpl	%esi, %ecx
	jl	L390
L401:
	movl	%edi, 20(%ebx,%esi,4)
L391:
	pushl	%esi
	movl	16(%edi), %ecx
	movl	%ecx, %eax
	addl	8(%edi), %eax
	pushl	%eax
	movl	12(%edi), %edx
	movl	%edx, %eax
	addl	4(%edi), %eax
	pushl	%eax
	pushl	%ecx
	pushl	%edx
	pushl	32(%edi)
	call	_sheetRefreshMap
	pushl	%esi
	jmp	L404
L385:
	movl	16(%ebx), %ecx
	cmpl	%esi, %ecx
	jl	L403
L396:
	movl	20(%ebx,%ecx,4), %edx
	leal	1(%ecx), %eax
	movl	%edx, 24(%ebx,%ecx,4)
	decl	%ecx
	movl	%eax, 24(%edx)
	cmpl	%esi, %ecx
	jge	L396
L403:
	movl	%edi, 20(%ebx,%esi,4)
	incl	16(%ebx)
	jmp	L391
	.balign 2
.globl _sheetRefresh
	.def	_sheetRefresh;	.scl	2;	.type	32;	.endef
_sheetRefresh:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	8(%ebp), %ebx
	movl	24(%ebx), %eax
	testl	%eax, %eax
	js	L405
	pushl	%eax
	movl	16(%ebx), %ecx
	movl	%ecx, %eax
	addl	16(%ebp), %ecx
	addl	24(%ebp), %eax
	pushl	%eax
	movl	12(%ebx), %edx
	movl	%edx, %eax
	addl	12(%ebp), %edx
	addl	20(%ebp), %eax
	pushl	%eax
	pushl	%ecx
	pushl	%edx
	pushl	32(%ebx)
	call	_sheetRefreshSub
	addl	$24, %esp
L405:
	movl	-4(%ebp), %ebx
	leave
	ret
	.balign 2
.globl _sheetRefreshSub
	.def	_sheetRefreshSub;	.scl	2;	.type	32;	.endef
_sheetRefreshSub:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$44, %esp
	movl	8(%ebp), %eax
	movl	8(%ebp), %edx
	cmpl	$0, 12(%ebp)
	movl	(%eax), %eax
	movl	4(%edx), %edx
	movl	%eax, -36(%ebp)
	movl	%edx, -40(%ebp)
	js	L438
L408:
	cmpl	$0, 16(%ebp)
	js	L439
L409:
	movl	8(%ebp), %esi
	movl	8(%esi), %eax
	cmpl	%eax, 20(%ebp)
	jle	L410
	movl	%eax, 20(%ebp)
L410:
	movl	8(%ebp), %edi
	movl	12(%edi), %eax
	cmpl	%eax, 24(%ebp)
	jle	L411
	movl	%eax, 24(%ebp)
L411:
	movl	8(%ebp), %edx
	movl	28(%ebp), %eax
	movl	%eax, -16(%ebp)
	cmpl	16(%edx), %eax
	jg	L433
L431:
	movl	8(%ebp), %edi
	movl	-16(%ebp), %esi
	movl	16(%ebp), %ecx
	movl	20(%edi,%esi,4), %ebx
	movl	20(%ebp), %esi
	movl	%ebx, %eax
	subl	%edi, %eax
	movl	16(%ebx), %edx
	subl	$1044, %eax
	movl	24(%ebp), %edi
	sarl	$2, %eax
	subl	%edx, %edi
	imull	$954437177, %eax, %eax
	movb	%al, -41(%ebp)
	subl	%edx, %ecx
	movl	(%ebx), %eax
	movl	12(%ebp), %edx
	movl	%eax, -32(%ebp)
	movl	%edi, -56(%ebp)
	movl	12(%ebx), %eax
	subl	%eax, %esi
	subl	%eax, %edx
	movl	%esi, -28(%ebp)
	movl	%edx, -24(%ebp)
	js	L440
L416:
	testl	%ecx, %ecx
	js	L441
L417:
	movl	4(%ebx), %eax
	cmpl	%eax, -28(%ebp)
	jle	L418
	movl	%eax, -28(%ebp)
L418:
	movl	8(%ebx), %eax
	cmpl	%eax, -56(%ebp)
	jle	L419
	movl	%eax, -56(%ebp)
L419:
	movl	%ecx, %esi
	cmpl	-56(%ebp), %ecx
	jge	L435
L430:
	movl	16(%ebx), %edi
	movl	-24(%ebp), %ecx
	addl	%esi, %edi
	cmpl	-28(%ebp), %ecx
	movl	%edi, -20(%ebp)
	jge	L437
L429:
	movl	8(%ebp), %edx
	movl	-20(%ebp), %edi
	movl	12(%ebx), %eax
	imull	8(%edx), %edi
	addl	%ecx, %eax
	movb	-41(%ebp), %dl
	addl	%edi, %eax
	movl	-40(%ebp), %edi
	movl	%eax, -52(%ebp)
	cmpb	%dl, (%eax,%edi)
	je	L442
L426:
	incl	%ecx
	cmpl	-28(%ebp), %ecx
	jl	L429
L437:
	incl	%esi
	cmpl	-56(%ebp), %esi
	jl	L430
L435:
	movl	8(%ebp), %edi
	incl	-16(%ebp)
	movl	-16(%ebp), %esi
	cmpl	16(%edi), %esi
	jle	L431
L433:
	addl	$44, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L442:
	movl	%esi, %eax
	movl	-32(%ebp), %edx
	imull	4(%ebx), %eax
	addl	%ecx, %eax
	movl	-36(%ebp), %edi
	movb	(%eax,%edx), %al
	movl	-52(%ebp), %edx
	movb	%al, (%edx,%edi)
	jmp	L426
L441:
	xorl	%ecx, %ecx
	jmp	L417
L440:
	movl	$0, -24(%ebp)
	jmp	L416
L439:
	movl	$0, 16(%ebp)
	jmp	L409
L438:
	movl	$0, 12(%ebp)
	jmp	L408
	.balign 2
.globl _sheetSlide
	.def	_sheetSlide;	.scl	2;	.type	32;	.endef
_sheetSlide:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	movl	12(%ebp), %eax
	movl	8(%ebp), %ebx
	movl	12(%ebx), %edi
	movl	16(%ebx), %esi
	movl	%eax, 12(%ebx)
	movl	16(%ebp), %eax
	movl	%eax, 16(%ebx)
	cmpl	$0, 24(%ebx)
	js	L443
	pushl	$0
	movl	%esi, %eax
	addl	8(%ebx), %eax
	pushl	%eax
	movl	%edi, %eax
	addl	4(%ebx), %eax
	pushl	%eax
	pushl	%esi
	pushl	%edi
	pushl	32(%ebx)
	call	_sheetRefreshMap
	movl	16(%ebp), %eax
	pushl	24(%ebx)
	addl	8(%ebx), %eax
	pushl	%eax
	movl	12(%ebp), %eax
	addl	4(%ebx), %eax
	pushl	%eax
	pushl	16(%ebp)
	pushl	12(%ebp)
	pushl	32(%ebx)
	call	_sheetRefreshMap
	movl	%esi, %eax
	addl	$48, %esp
	pushl	$0
	addl	8(%ebx), %eax
	pushl	%eax
	movl	%edi, %eax
	addl	4(%ebx), %eax
	pushl	%eax
	pushl	%esi
	pushl	%edi
	pushl	32(%ebx)
	call	_sheetRefreshSub
	movl	16(%ebp), %eax
	pushl	24(%ebx)
	addl	8(%ebx), %eax
	pushl	%eax
	movl	12(%ebp), %eax
	addl	4(%ebx), %eax
	pushl	%eax
	pushl	16(%ebp)
	pushl	12(%ebp)
	pushl	32(%ebx)
	call	_sheetRefreshSub
	addl	$48, %esp
L443:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _sheetFree
	.def	_sheetFree;	.scl	2;	.type	32;	.endef
_sheetFree:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	8(%ebp), %ebx
	cmpl	$0, 24(%ebx)
	js	L446
	pushl	$-1
	pushl	%ebx
	call	_sheetUpdown
	popl	%eax
	popl	%edx
L446:
	movl	$0, 28(%ebx)
	movl	-4(%ebp), %ebx
	leave
	ret
	.data
LC0:
	.ascii "%011d\0"
	.text
	.balign 2
.globl _taskBmain
	.def	_taskBmain;	.scl	2;	.type	32;	.endef
_taskBmain:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%edi, %edi
	pushl	%ebx
	leal	-556(%ebp), %eax
	subl	$564, %esp
	leal	-44(%ebp), %ebx
	movl	$0, -576(%ebp)
	pushl	$0
	pushl	%eax
	pushl	$128
	pushl	%ebx
	call	_QueueInit
	call	_timerAlloc
	pushl	$100
	pushl	%ebx
	movl	%eax, %esi
	pushl	%eax
	call	_timerInit
	pushl	$100
	pushl	%esi
	call	_timerSetTime
	addl	$36, %esp
L448:
	leal	-44(%ebp), %ebx
	call	_io_cli
	pushl	%ebx
	incl	%edi
	call	_QueueSize
	popl	%edx
	testl	%eax, %eax
	je	L454
	pushl	%ebx
	call	_QueuePop
	movl	%eax, %ebx
	call	_io_sti
	popl	%eax
	cmpl	$100, %ebx
	jne	L448
	movl	%edi, %eax
	leal	-572(%ebp), %ebx
	subl	-576(%ebp), %eax
	pushl	%eax
	pushl	$LC0
	pushl	%ebx
	call	_sprintf
	pushl	$11
	pushl	%ebx
	pushl	$8
	pushl	$0
	pushl	$28
	pushl	$24
	pushl	8(%ebp)
	call	_putFont8AscSheet
	addl	$40, %esp
	movl	%edi, -576(%ebp)
	pushl	$100
	pushl	%esi
	call	_timerSetTime
	popl	%ecx
	popl	%ebx
	jmp	L448
L454:
	call	_io_sti
	jmp	L448
	.balign 2
.globl _makeTextBox
	.def	_makeTextBox;	.scl	2;	.type	32;	.endef
_makeTextBox:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$20, %esp
	movl	12(%ebp), %eax
	movl	16(%ebp), %esi
	addl	20(%ebp), %eax
	subl	$3, %esi
	pushl	%esi
	movl	%eax, -16(%ebp)
	movl	16(%ebp), %eax
	addl	24(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-16(%ebp), %eax
	incl	%eax
	pushl	%eax
	movl	%eax, -24(%ebp)
	movl	12(%ebp), %eax
	pushl	%esi
	subl	$2, %eax
	pushl	%eax
	movl	%eax, -28(%ebp)
	movl	8(%ebp), %eax
	pushl	$15
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	movl	12(%ebp), %edi
	movl	-20(%ebp), %eax
	subl	$3, %edi
	incl	%eax
	pushl	%eax
	movl	%eax, -32(%ebp)
	pushl	%edi
	movl	8(%ebp), %eax
	pushl	%esi
	pushl	%edi
	pushl	$15
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	movl	8(%ebp), %eax
	addl	$56, %esp
	movl	-20(%ebp), %ebx
	addl	$2, %ebx
	pushl	%ebx
	pushl	-24(%ebp)
	pushl	%ebx
	pushl	%edi
	pushl	$7
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	movl	-16(%ebp), %eax
	pushl	%ebx
	addl	$2, %eax
	pushl	%eax
	pushl	%esi
	pushl	%eax
	movl	8(%ebp), %eax
	pushl	$7
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	movl	8(%ebp), %eax
	addl	$56, %esp
	movl	16(%ebp), %ebx
	subl	$2, %ebx
	movl	12(%ebp), %edi
	pushl	%ebx
	decl	%edi
	pushl	-16(%ebp)
	pushl	%ebx
	pushl	%edi
	pushl	$0
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	movl	8(%ebp), %eax
	pushl	-20(%ebp)
	pushl	-28(%ebp)
	pushl	%ebx
	pushl	-28(%ebp)
	pushl	$0
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	movl	8(%ebp), %eax
	addl	$56, %esp
	pushl	-32(%ebp)
	pushl	-16(%ebp)
	pushl	-32(%ebp)
	pushl	-28(%ebp)
	pushl	$8
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	movl	8(%ebp), %eax
	pushl	-32(%ebp)
	pushl	-24(%ebp)
	pushl	%ebx
	pushl	-24(%ebp)
	pushl	$8
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	movl	16(%ebp), %eax
	addl	$56, %esp
	decl	%eax
	pushl	-20(%ebp)
	pushl	-16(%ebp)
	pushl	%eax
	pushl	%edi
	movzbl	28(%ebp), %eax
	pushl	%eax
	movl	8(%ebp), %eax
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.data
_closeBtn.2:
	.ascii "OOOOOOOOOOOOOOO@"
	.ascii "OQQQQQQQQQQQQQ$@"
	.ascii "OQQQQQQQQQQQQQ$@"
	.ascii "OQQQ@@QQQQ@@QQ$@"
	.ascii "OQQQQ@@QQ@@QQQ$@"
	.ascii "OQQQQQ@@@@QQQQ$@"
	.ascii "OQQQQQQ@@QQQQQ$@"
	.ascii "OQQQQQ@@@@QQQQ$@"
	.ascii "OQQQQ@@QQ@@QQQ$@"
	.ascii "OQQQ@@QQQQ@@QQ$@"
	.ascii "OQQQQQQQQQQQQQ$@"
	.ascii "OQQQQQQQQQQQQQ$@"
	.ascii "O$$$$$$$$$$$$$$@"
	.ascii "@@@@@@@@@@@@@@@@"
	.text
	.balign 2
.globl _makeWindow
	.def	_makeWindow;	.scl	2;	.type	32;	.endef
_makeWindow:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$12, %esp
	cmpb	$0, 24(%ebp)
	je	L457
	movb	$7, -17(%ebp)
	movb	$12, -18(%ebp)
L458:
	movl	12(%ebp), %eax
	pushl	$0
	decl	%eax
	pushl	%eax
	movl	%eax, -24(%ebp)
	pushl	$0
	pushl	$0
	pushl	$8
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	12(%ebp), %esi
	pushl	$1
	subl	$2, %esi
	pushl	%esi
	pushl	$1
	pushl	$1
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %edi
	addl	$56, %esp
	decl	%edi
	pushl	%edi
	pushl	$0
	pushl	$0
	pushl	$0
	pushl	$8
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %ebx
	subl	$2, %ebx
	pushl	%ebx
	pushl	$1
	pushl	$1
	pushl	$1
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	addl	$56, %esp
	pushl	%ebx
	pushl	%esi
	pushl	$1
	pushl	%esi
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	pushl	%edi
	pushl	-24(%ebp)
	pushl	$0
	pushl	-24(%ebp)
	pushl	$0
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	addl	$56, %esp
	subl	$3, %eax
	pushl	%eax
	movl	12(%ebp), %eax
	subl	$3, %eax
	pushl	%eax
	pushl	$2
	pushl	$2
	pushl	$8
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	12(%ebp), %eax
	pushl	$20
	subl	$4, %eax
	pushl	%eax
	pushl	$3
	pushl	$3
	movzbl	-18(%ebp), %eax
	pushl	%eax
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	addl	$56, %esp
	pushl	%ebx
	pushl	%esi
	pushl	%ebx
	pushl	$1
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	pushl	%edi
	pushl	-24(%ebp)
	pushl	%edi
	xorl	%edi, %edi
	pushl	$0
	pushl	$0
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	addl	$56, %esp
	pushl	20(%ebp)
	movsbl	-17(%ebp),%eax
	pushl	%eax
	pushl	$4
	pushl	$24
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_putFont8_asc
	addl	$24, %esp
	imull	$5, 12(%ebp), %ebx
	movl	$0, -16(%ebp)
L474:
	movl	12(%ebp), %eax
	movl	8(%ebp), %edx
	addl	%ebx, %eax
	xorl	%esi, %esi
	leal	-21(%edx,%eax), %ecx
L473:
	movb	_closeBtn.2(%esi,%edi), %dl
	cmpb	$64, %dl
	je	L479
	cmpb	$36, %dl
	je	L480
	cmpb	$81, %dl
	movb	$8, %dl
	setne	%al
	subb	%al, %dl
L468:
	incl	%esi
	movb	%dl, (%ecx)
	incl	%ecx
	cmpl	$15, %esi
	jle	L473
	incl	-16(%ebp)
	addl	$16, %edi
	addl	12(%ebp), %ebx
	cmpl	$13, -16(%ebp)
	jle	L474
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L480:
	movb	$15, %dl
	jmp	L468
L479:
	xorl	%edx, %edx
	jmp	L468
L457:
	movb	$8, -17(%ebp)
	movb	$15, -18(%ebp)
	jmp	L458
	.data
LC1:
	.ascii "processB%d\0"
LC2:
	.ascii "processA\0"
LC3:
	.ascii "Welcome to DickOS\0"
LC4:
	.ascii "(%3d, %3d)\0"
LC5:
	.ascii "memory %dMB free : %dKB\0"
LC8:
	.ascii "[lcr %4d %4d]\0"
LC6:
	.ascii "%02X\0"
LC7:
	.ascii " \0"
	.text
	.balign 2
.globl _Main
	.def	_Main;	.scl	2;	.type	32;	.endef
_Main:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%esi, %esi
	pushl	%ebx
	leal	-892(%ebp), %ebx
	subl	$940, %esp
	call	_initGdtit
	call	_init_pic
	call	_io_sti
	leal	-572(%ebp), %eax
	pushl	$0
	pushl	%eax
	pushl	$128
	pushl	%ebx
	call	_QueueInit
	call	_initPit
	pushl	$256
	pushl	%ebx
	call	_initKeyboard
	leal	-588(%ebp), %eax
	pushl	%eax
	pushl	$512
	pushl	%ebx
	call	_enableMouse
	addl	$36, %esp
	pushl	$248
	pushl	$33
	call	_io_out8
	pushl	$239
	pushl	$161
	call	_io_out8
	call	_timerAlloc
	pushl	$1
	pushl	%ebx
	pushl	%eax
	movl	%eax, -940(%ebp)
	call	_timerInit
	pushl	$50
	pushl	-940(%ebp)
	call	_timerSetTime
	addl	$36, %esp
	pushl	$-1073741825
	pushl	$4194304
	call	_memtest
	pushl	$3932160
	movl	%eax, %ebx
	call	_memsegInit
	pushl	$647168
	pushl	$4096
	pushl	$3932160
	call	_memsegFree
	leal	-4194304(%ebx), %eax
	pushl	%eax
	pushl	$4194304
	pushl	$3932160
	call	_memsegFree
	addl	$36, %esp
	call	_init_palette
	movswl	4086,%eax
	pushl	%eax
	movswl	4084,%eax
	pushl	%eax
	pushl	4088
	pushl	$3932160
	call	_shtctlInit
	pushl	$3932160
	movl	%eax, -928(%ebp)
	call	_processInit
	pushl	$0
	pushl	$1
	movl	%eax, -944(%ebp)
	pushl	%eax
	movl	%eax, -868(%ebp)
	call	_processRun
	addl	$32, %esp
	pushl	-928(%ebp)
	call	_sheetAlloc
	movswl	4086,%edx
	movl	%eax, -932(%ebp)
	movswl	4084,%eax
	imull	%edx, %eax
	pushl	%eax
	pushl	$3932160
	call	_memsegAlloc4K
	pushl	$-1
	movl	%eax, %ebx
	movswl	4086,%eax
	pushl	%eax
	movswl	4084,%eax
	pushl	%eax
	pushl	%ebx
	pushl	-932(%ebp)
	call	_sheetSetbuf
	addl	$32, %esp
	movswl	4086,%eax
	pushl	%eax
	movswl	4084,%eax
	pushl	%eax
	pushl	%ebx
	call	_init_GUI
	addl	$12, %esp
L486:
	pushl	-928(%ebp)
	call	_sheetAlloc
	pushl	$7488
	pushl	$3932160
	movl	%eax, -604(%ebp,%esi,4)
	call	_memsegAlloc4K
	pushl	$-1
	movl	%eax, %ebx
	pushl	$52
	pushl	$144
	pushl	%eax
	pushl	-604(%ebp,%esi,4)
	call	_sheetSetbuf
	leal	-60(%ebp), %eax
	addl	$32, %esp
	pushl	%esi
	pushl	$LC1
	pushl	%eax
	call	_sprintf
	leal	-60(%ebp), %edx
	pushl	$0
	pushl	%edx
	pushl	$52
	pushl	$144
	pushl	%ebx
	call	_makeWindow
	addl	$32, %esp
	call	_processAlloc
	pushl	$65536
	movl	%eax, %ebx
	pushl	$3932160
	movl	%eax, -908(%ebp,%esi,4)
	call	_memsegAlloc4K
	addl	$65528, %eax
	movl	%eax, 72(%ebx)
	movl	-604(%ebp,%esi,4), %ebx
	movl	-908(%ebp,%esi,4), %eax
	movl	72(%eax), %ecx
	movl	%ebx, 4(%ecx)
	leal	1(%esi), %ebx
	movl	$_taskBmain, 48(%eax)
	movl	$8, 88(%eax)
	movl	$16, 92(%eax)
	movl	$8, 96(%eax)
	movl	$8, 100(%eax)
	movl	$8, 104(%eax)
	movl	$8, 108(%eax)
	pushl	%ebx
	movl	%ebx, %esi
	pushl	$2
	pushl	%eax
	call	_processRun
	addl	$20, %esp
	cmpl	$2, %ebx
	jle	L486
	pushl	-928(%ebp)
	call	_sheetAlloc
	pushl	$8320
	pushl	$3932160
	movl	%eax, %edi
	call	_memsegAlloc4K
	pushl	$-1
	pushl	$52
	movl	%eax, %ebx
	pushl	$144
	pushl	%eax
	pushl	%edi
	call	_sheetSetbuf
	addl	$32, %esp
	pushl	$1
	pushl	$LC2
	pushl	$52
	pushl	$144
	pushl	%ebx
	leal	-860(%ebp), %ebx
	call	_makeWindow
	pushl	$7
	pushl	$16
	pushl	$128
	pushl	$28
	pushl	$8
	pushl	%edi
	call	_makeTextBox
	addl	$44, %esp
	pushl	-928(%ebp)
	movl	$8, -920(%ebp)
	movl	$7, -924(%ebp)
	call	_sheetAlloc
	pushl	$14
	pushl	$16
	pushl	$16
	movl	%eax, -936(%ebp)
	pushl	%ebx
	pushl	%eax
	call	_sheetSetbuf
	pushl	$14
	pushl	%ebx
	movl	$2, %ebx
	call	_initMouseCursor8
	addl	$32, %esp
	movswl	4084,%eax
	leal	-16(%eax), %ecx
	movl	%ecx, %eax
	cltd
	idivl	%ebx
	movl	%eax, -912(%ebp)
	movswl	4086,%eax
	pushl	$0
	leal	-44(%eax), %ecx
	pushl	$0
	movl	%ecx, %eax
	cltd
	idivl	%ebx
	pushl	-932(%ebp)
	movl	%eax, -916(%ebp)
	leal	-60(%ebp), %ebx
	call	_sheetSlide
	pushl	$64
	pushl	$168
	pushl	-604(%ebp)
	call	_sheetSlide
	pushl	$124
	pushl	$8
	pushl	-600(%ebp)
	call	_sheetSlide
	addl	$36, %esp
	pushl	$124
	pushl	$168
	pushl	-596(%ebp)
	call	_sheetSlide
	pushl	$64
	pushl	$8
	pushl	%edi
	call	_sheetSlide
	pushl	-916(%ebp)
	pushl	-912(%ebp)
	pushl	-936(%ebp)
	call	_sheetSlide
	addl	$36, %esp
	pushl	$0
	pushl	-932(%ebp)
	call	_sheetUpdown
	pushl	$1
	pushl	-604(%ebp)
	call	_sheetUpdown
	pushl	$2
	pushl	-600(%ebp)
	call	_sheetUpdown
	pushl	$3
	pushl	-596(%ebp)
	call	_sheetUpdown
	addl	$32, %esp
	pushl	$4
	pushl	%edi
	call	_sheetUpdown
	pushl	$5
	pushl	-936(%ebp)
	call	_sheetUpdown
	pushl	$17
	pushl	$LC3
	pushl	$14
	pushl	$7
	pushl	$32
	pushl	$0
	pushl	-932(%ebp)
	call	_putFont8AscSheet
	addl	$44, %esp
	pushl	-916(%ebp)
	pushl	-912(%ebp)
	pushl	$LC4
	pushl	%ebx
	call	_sprintf
	pushl	$10
	pushl	%ebx
	pushl	$14
	pushl	$7
	pushl	$0
	pushl	$0
	pushl	-932(%ebp)
	call	_putFont8AscSheet
	addl	$44, %esp
	pushl	$3932160
	call	_memsegTotal
	shrl	$10, %eax
	movl	%eax, (%esp)
	pushl	$-1073741825
	pushl	$4194304
	call	_memtest
	popl	%esi
	shrl	$20, %eax
	popl	%edx
	pushl	%eax
	pushl	$LC5
	pushl	%ebx
	call	_sprintf
	pushl	$26
	pushl	%ebx
	pushl	$14
	pushl	$7
	pushl	$48
	pushl	$0
	pushl	-932(%ebp)
	call	_putFont8AscSheet
	addl	$44, %esp
L487:
	leal	-892(%ebp), %esi
	call	_io_cli
	pushl	%esi
	call	_QueueSize
	popl	%ebx
	testl	%eax, %eax
	je	L513
	pushl	%esi
	call	_QueuePop
	movl	%eax, %ebx
	call	_io_sti
	popl	%edx
	leal	-256(%ebx), %eax
	cmpl	$255, %eax
	jbe	L514
	leal	-512(%ebx), %eax
	cmpl	$255, %eax
	jbe	L515
	cmpl	$1, %ebx
	jg	L487
	decl	%ebx
	je	L516
	pushl	$1
	pushl	%esi
	pushl	-940(%ebp)
	call	_timerInit
	movl	$7, -924(%ebp)
L512:
	addl	$12, %esp
	movl	-920(%ebp), %eax
	addl	$7, %eax
	pushl	$43
	pushl	%eax
	pushl	$28
	pushl	-920(%ebp)
	pushl	-924(%ebp)
	pushl	4(%edi)
	pushl	(%edi)
	call	_boxFill8
	pushl	$50
	pushl	-940(%ebp)
	call	_timerSetTime
	movl	-920(%ebp), %eax
	addl	$36, %esp
	addl	$8, %eax
	pushl	$44
	pushl	%eax
	pushl	$28
	pushl	-920(%ebp)
	pushl	%edi
	call	_sheetRefresh
	addl	$20, %esp
	jmp	L487
L516:
	pushl	$0
	pushl	%esi
	pushl	-940(%ebp)
	call	_timerInit
	movl	$0, -924(%ebp)
	jmp	L512
L515:
	movzbl	%bl, %eax
	pushl	%eax
	leal	-588(%ebp), %eax
	pushl	%eax
	call	_mouseDecode
	popl	%ecx
	popl	%ebx
	testl	%eax, %eax
	je	L487
	pushl	-580(%ebp)
	pushl	-584(%ebp)
	pushl	$LC8
	leal	-60(%ebp), %ebx
	pushl	%ebx
	call	_sprintf
	addl	$16, %esp
	testl	$1, -576(%ebp)
	je	L499
	movl	-916(%ebp), %eax
	subl	$8, %eax
	pushl	%eax
	movl	-912(%ebp), %eax
	subl	$80, %eax
	pushl	%eax
	pushl	%edi
	movb	$76, -59(%ebp)
	call	_sheetSlide
	addl	$12, %esp
L499:
	movl	-576(%ebp), %eax
	testl	$2, %eax
	je	L500
	movb	$82, -57(%ebp)
L500:
	andl	$4, %eax
	je	L501
	movb	$67, -58(%ebp)
L501:
	pushl	$15
	pushl	%ebx
	pushl	$14
	pushl	$7
	pushl	$16
	pushl	$32
	pushl	-932(%ebp)
	call	_putFont8AscSheet
	movl	-584(%ebp), %edx
	movl	-580(%ebp), %eax
	addl	$28, %esp
	addl	%eax, -916(%ebp)
	addl	%edx, -912(%ebp)
	js	L517
L502:
	cmpl	$0, -916(%ebp)
	js	L518
L503:
	movswl	4084,%eax
	decl	%eax
	cmpl	%eax, -912(%ebp)
	jle	L504
	movl	%eax, -912(%ebp)
L504:
	movswl	4086,%eax
	decl	%eax
	cmpl	%eax, -916(%ebp)
	jle	L505
	movl	%eax, -916(%ebp)
L505:
	pushl	-916(%ebp)
	pushl	-912(%ebp)
	pushl	$LC4
	pushl	%ebx
	call	_sprintf
	pushl	$10
	pushl	%ebx
	pushl	$14
	pushl	$7
	pushl	$0
	pushl	$0
	pushl	-932(%ebp)
	call	_putFont8AscSheet
	addl	$44, %esp
	pushl	-916(%ebp)
	pushl	-912(%ebp)
	pushl	-936(%ebp)
	call	_sheetSlide
	addl	$12, %esp
	jmp	L487
L518:
	movl	$0, -916(%ebp)
	jmp	L503
L517:
	movl	$0, -912(%ebp)
	jmp	L502
L514:
	pushl	%eax
	leal	-60(%ebp), %esi
	pushl	$LC6
	pushl	%esi
	call	_sprintf
	pushl	$2
	pushl	%esi
	pushl	$14
	pushl	$7
	pushl	$16
	pushl	$0
	pushl	-932(%ebp)
	call	_putFont8AscSheet
	addl	$40, %esp
	cmpl	$383, %ebx
	jg	L493
	movb	_keyboardTable-256(%ebx), %al
	testb	%al, %al
	je	L493
	cmpl	$143, -920(%ebp)
	jg	L493
	pushl	$1
	movb	%al, -60(%ebp)
	pushl	%esi
	pushl	$7
	pushl	$0
	pushl	$28
	pushl	-920(%ebp)
	pushl	%edi
	movb	$0, -59(%ebp)
	call	_putFont8AscSheet
	addl	$28, %esp
	addl	$8, -920(%ebp)
L493:
	cmpl	$270, %ebx
	je	L519
L495:
	movl	-920(%ebp), %eax
	pushl	$43
	addl	$7, %eax
	pushl	%eax
	pushl	$28
	pushl	-920(%ebp)
	pushl	-924(%ebp)
	pushl	4(%edi)
	pushl	(%edi)
	call	_boxFill8
	movl	-920(%ebp), %eax
	pushl	$44
	addl	$8, %eax
	pushl	%eax
	pushl	$28
	pushl	-920(%ebp)
	pushl	%edi
	call	_sheetRefresh
	addl	$48, %esp
	jmp	L487
L519:
	cmpl	$8, -920(%ebp)
	jle	L495
	pushl	$1
	pushl	$LC7
	pushl	$7
	pushl	$0
	pushl	$28
	pushl	-920(%ebp)
	pushl	%edi
	call	_putFont8AscSheet
	addl	$28, %esp
	subl	$8, -920(%ebp)
	jmp	L495
L513:
	pushl	-944(%ebp)
	call	_processSleep
	call	_io_sti
	popl	%ecx
	jmp	L487
.globl _keybuf
	.data
	.balign 4
_keybuf:
	.space 4
.globl _keyData0
	.data
	.balign 4
_keyData0:
	.space 4
.globl _mousebuf
	.data
	.balign 4
_mousebuf:
	.space 4
.globl _mouseData0
	.data
	.balign 4
_mouseData0:
	.space 4
.globl _timerctl
	.data
	.balign 16
_timerctl:
	.space 10012
.globl _processctl
	.data
	.balign 4
_processctl:
	.space 4
.globl _mpTimer
	.data
	.balign 4
_mpTimer:
	.space 4
	.def	_sprintf;	.scl	2;	.type	32;	.endef
	.def	_io_sti;	.scl	2;	.type	32;	.endef
	.def	_sheetRefreshSub;	.scl	2;	.type	32;	.endef
	.def	_memtest_sub;	.scl	2;	.type	32;	.endef
	.def	_storeCr0;	.scl	2;	.type	32;	.endef
	.def	_loadCr0;	.scl	2;	.type	32;	.endef
	.def	_sheetRefresh;	.scl	2;	.type	32;	.endef
	.def	_asm_interruptHandler2c;	.scl	2;	.type	32;	.endef
	.def	_asm_interruptHandler27;	.scl	2;	.type	32;	.endef
	.def	_asm_interruptHandler21;	.scl	2;	.type	32;	.endef
	.def	_asm_interruptHandler20;	.scl	2;	.type	32;	.endef
	.def	_loadIdtr;	.scl	2;	.type	32;	.endef
	.def	_loadGdtr;	.scl	2;	.type	32;	.endef
	.def	_farJmp;	.scl	2;	.type	32;	.endef
	.def	_loadTr;	.scl	2;	.type	32;	.endef
	.def	_processAlloc;	.scl	2;	.type	32;	.endef
	.def	_setSegmdesc;	.scl	2;	.type	32;	.endef
	.def	_memsegAlloc4K;	.scl	2;	.type	32;	.endef
	.def	_io_store_eflags;	.scl	2;	.type	32;	.endef
	.def	_io_cli;	.scl	2;	.type	32;	.endef
	.def	_io_load_eflags;	.scl	2;	.type	32;	.endef
	.def	_timerAlloc;	.scl	2;	.type	32;	.endef
	.def	_io_out8;	.scl	2;	.type	32;	.endef
	.def	_io_in8;	.scl	2;	.type	32;	.endef
	.def	_processRun;	.scl	2;	.type	32;	.endef
