	.file	"bootpack.c"
	.text
	.balign 2
.globl _QueueInit
	.def	_QueueInit;	.scl	2;	.type	32;	.endef
_QueueInit:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	12(%ebp), %ecx
	movl	16(%ebp), %edx
	movl	%ecx, 12(%eax)
	movl	%edx, (%eax)
	movl	%ecx, 16(%eax)
	movl	$0, 20(%eax)
	movl	$0, 8(%eax)
	movl	$0, 4(%eax)
	popl	%ebp
	ret
	.balign 2
.globl _QueuePush
	.def	_QueuePush;	.scl	2;	.type	32;	.endef
_QueuePush:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	8(%ebp), %ebx
	cmpl	$0, 16(%ebx)
	jne	L3
	orl	$1, 20(%ebx)
	orl	$-1, %eax
L2:
	popl	%ebx
	popl	%ebp
	ret
L3:
	movl	4(%ebx), %ecx
	movl	(%ebx), %edx
	movl	12(%ebp), %eax
	movl	%eax, (%edx,%ecx,4)
	movl	4(%ebx), %eax
	decl	16(%ebx)
	incl	%eax
	cltd
	idivl	12(%ebx)
	xorl	%eax, %eax
	movl	%edx, 4(%ebx)
	jmp	L2
	.balign 2
.globl _QueuePop
	.def	_QueuePop;	.scl	2;	.type	32;	.endef
_QueuePop:
	pushl	%ebp
	orl	$-1, %eax
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	movl	8(%ebp), %esi
	pushl	%ebx
	movl	16(%esi), %edi
	movl	12(%esi), %ebx
	cmpl	%ebx, %edi
	je	L4
	movl	8(%esi), %eax
	movl	(%esi), %edx
	movl	(%edx,%eax,4), %ecx
	incl	%eax
	cltd
	idivl	%ebx
	leal	1(%edi), %eax
	movl	%edx, 8(%esi)
	movl	%eax, 16(%esi)
	movl	%ecx, %eax
L4:
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _QueueSize
	.def	_QueueSize;	.scl	2;	.type	32;	.endef
_QueueSize:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %edx
	popl	%ebp
	movl	12(%edx), %eax
	subl	16(%edx), %eax
	ret
	.balign 2
.globl _waitKeyboardControllerReady
	.def	_waitKeyboardControllerReady;	.scl	2;	.type	32;	.endef
_waitKeyboardControllerReady:
	pushl	%ebp
	movl	%esp, %ebp
L8:
	pushl	$100
	call	_io_in8
	popl	%edx
	andl	$2, %eax
	jne	L8
	leave
	ret
	.balign 2
.globl _initKeyboard
	.def	_initKeyboard;	.scl	2;	.type	32;	.endef
_initKeyboard:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	%eax, _keybuf
	movl	12(%ebp), %eax
	movl	%eax, _keyData0
	call	_waitKeyboardControllerReady
	pushl	$96
	pushl	$100
	call	_io_out8
	call	_waitKeyboardControllerReady
	popl	%ecx
	popl	%eax
	movl	$71, 12(%ebp)
	movl	$96, 8(%ebp)
	leave
	jmp	_io_out8
	.balign 2
.globl _enableMouse
	.def	_enableMouse;	.scl	2;	.type	32;	.endef
_enableMouse:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	%eax, _mousebuf
	movl	12(%ebp), %eax
	movl	%eax, _mouseData0
	call	_waitKeyboardControllerReady
	pushl	$212
	pushl	$100
	call	_io_out8
	call	_waitKeyboardControllerReady
	pushl	$244
	pushl	$96
	call	_io_out8
	movl	16(%ebp), %eax
	movb	$0, 3(%eax)
	leave
	ret
	.balign 2
.globl _mouseDecode
	.def	_mouseDecode;	.scl	2;	.type	32;	.endef
_mouseDecode:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	8(%ebp), %edx
	movl	12(%ebp), %ecx
	movl	%ecx, %esi
	movb	3(%edx), %al
	testb	%al, %al
	jne	L15
	cmpb	$-6, %cl
	je	L24
L23:
	xorl	%eax, %eax
L14:
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L24:
	movb	$1, 3(%edx)
	jmp	L23
L15:
	cmpb	$1, %al
	je	L25
	cmpb	$2, %al
	je	L26
	cmpb	$3, %al
	je	L27
	orl	$-1, %eax
	jmp	L14
L27:
	movb	(%edx), %bl
	andl	$255, %esi
	movl	%ebx, %eax
	movb	%cl, 2(%edx)
	andl	$7, %eax
	movl	%esi, 8(%edx)
	movl	%eax, 12(%edx)
	movb	%bl, %al
	movzbl	1(%edx), %ecx
	andl	$16, %eax
	movl	%ecx, 4(%edx)
	movb	$1, 3(%edx)
	testb	%al, %al
	je	L21
	orl	$-256, %ecx
	movl	%ecx, 4(%edx)
L21:
	andl	$32, %ebx
	testb	%bl, %bl
	je	L22
	orl	$-256, 8(%edx)
L22:
	negl	8(%edx)
	movl	$1, %eax
	jmp	L14
L26:
	movb	%cl, 1(%edx)
	movb	$3, 3(%edx)
	jmp	L23
L25:
	andl	$-56, %esi
	movl	%esi, %eax
	cmpb	$8, %al
	jne	L23
	movb	%cl, (%edx)
	movb	$2, 3(%edx)
	jmp	L23
	.balign 2
.globl _initPit
	.def	_initPit;	.scl	2;	.type	32;	.endef
_initPit:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$52
	pushl	$67
	call	_io_out8
	pushl	$156
	pushl	$64
	call	_io_out8
	pushl	$46
	pushl	$64
	call	_io_out8
	movl	$_timerctl+10000, %edx
	movl	$0, _timerctl
	addl	$24, %esp
	movl	$_timerctl+20, %eax
L33:
	movl	$0, (%eax)
	addl	$20, %eax
	cmpl	%edx, %eax
	jle	L33
	call	_timerAlloc
	movl	$-1, 4(%eax)
	movl	$2, 8(%eax)
	movl	$0, (%eax)
	movl	%eax, _timerctl+8
	movl	$-1, _timerctl+4
	leave
	ret
	.balign 2
.globl _timerAlloc
	.def	_timerAlloc;	.scl	2;	.type	32;	.endef
_timerAlloc:
	pushl	%ebp
	xorl	%edx, %edx
	movl	%esp, %ebp
	movl	$_timerctl+12, %eax
L42:
	cmpl	$0, 8(%eax)
	je	L45
	incl	%edx
	addl	$20, %eax
	cmpl	$499, %edx
	jle	L42
	xorl	%eax, %eax
L36:
	popl	%ebp
	ret
L45:
	movl	$1, 8(%eax)
	jmp	L36
	.balign 2
.globl _timerFree
	.def	_timerFree;	.scl	2;	.type	32;	.endef
_timerFree:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	$0, 8(%eax)
	popl	%ebp
	ret
	.balign 2
.globl _timerInit
	.def	_timerInit;	.scl	2;	.type	32;	.endef
_timerInit:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	12(%ebp), %edx
	movl	%edx, 12(%eax)
	movl	16(%ebp), %edx
	movb	%dl, 16(%eax)
	popl	%ebp
	ret
	.balign 2
.globl _timerSetTime
	.def	_timerSetTime;	.scl	2;	.type	32;	.endef
_timerSetTime:
	pushl	%ebp
	movl	_timerctl, %eax
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	8(%ebp), %ebx
	addl	12(%ebp), %eax
	movl	$2, 8(%ebx)
	movl	%eax, 4(%ebx)
	call	_io_load_eflags
	movl	%eax, %esi
	call	_io_cli
	movl	_timerctl+8, %eax
	movl	4(%ebx), %edx
	cmpl	4(%eax), %edx
	jbe	L55
L50:
	movl	%eax, %ecx
	movl	(%eax), %eax
	testl	%eax, %eax
	je	L51
	cmpl	4(%eax), %edx
	ja	L50
	movl	%ebx, (%ecx)
	movl	%eax, (%ebx)
L51:
	movl	%esi, 8(%ebp)
	popl	%ebx
	popl	%esi
	popl	%ebp
	jmp	_io_store_eflags
L55:
	movl	%ebx, _timerctl+8
	movl	%edx, _timerctl+4
	movl	%eax, (%ebx)
	jmp	L51
	.balign 2
.globl _init_pic
	.def	_init_pic;	.scl	2;	.type	32;	.endef
_init_pic:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$255
	pushl	$33
	call	_io_out8
	pushl	$255
	pushl	$161
	call	_io_out8
	pushl	$17
	pushl	$32
	call	_io_out8
	pushl	$32
	pushl	$33
	call	_io_out8
	addl	$32, %esp
	pushl	$4
	pushl	$33
	call	_io_out8
	pushl	$1
	pushl	$33
	call	_io_out8
	pushl	$17
	pushl	$160
	call	_io_out8
	pushl	$40
	pushl	$161
	call	_io_out8
	addl	$32, %esp
	pushl	$2
	pushl	$161
	call	_io_out8
	pushl	$1
	pushl	$161
	call	_io_out8
	pushl	$251
	pushl	$33
	call	_io_out8
	pushl	$255
	pushl	$161
	call	_io_out8
	leave
	ret
	.balign 2
.globl _interruptHandler21
	.def	_interruptHandler21;	.scl	2;	.type	32;	.endef
_interruptHandler21:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$97
	pushl	$32
	call	_io_out8
	pushl	$96
	call	_io_in8
	addl	_keyData0, %eax
	pushl	%eax
	pushl	_keybuf
	call	_QueuePush
	leave
	ret
	.balign 2
.globl _interruptHandler27
	.def	_interruptHandler27;	.scl	2;	.type	32;	.endef
_interruptHandler27:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$103
	pushl	$32
	call	_io_out8
	leave
	ret
	.balign 2
.globl _interruptHandler2c
	.def	_interruptHandler2c;	.scl	2;	.type	32;	.endef
_interruptHandler2c:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$100
	pushl	$160
	call	_io_out8
	pushl	$98
	pushl	$32
	call	_io_out8
	pushl	$96
	call	_io_in8
	addl	_mouseData0, %eax
	pushl	%eax
	pushl	_mousebuf
	call	_QueuePush
	leave
	ret
	.balign 2
.globl _interruptHandler20
	.def	_interruptHandler20;	.scl	2;	.type	32;	.endef
_interruptHandler20:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	pushl	$96
	pushl	$32
	call	_io_out8
	popl	%ecx
	movl	_timerctl, %eax
	popl	%ebx
	incl	%eax
	movl	%eax, _timerctl
	cmpl	%eax, _timerctl+4
	ja	L60
	movl	_timerctl+8, %ebx
L62:
	movl	4(%ebx), %eax
	cmpl	_timerctl, %eax
	ja	L63
	movzbl	16(%ebx), %eax
	movl	$1, 8(%ebx)
	pushl	%eax
	pushl	12(%ebx)
	call	_QueuePush
	popl	%eax
	movl	(%ebx), %ebx
	popl	%edx
	jmp	L62
L63:
	movl	%ebx, _timerctl+8
	movl	%eax, _timerctl+4
L60:
	movl	-4(%ebp), %ebx
	leave
	ret
	.balign 2
.globl _setSegmdesc
	.def	_setSegmdesc;	.scl	2;	.type	32;	.endef
_setSegmdesc:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	12(%ebp), %edx
	movl	16(%ebp), %ecx
	movl	8(%ebp), %ebx
	movl	20(%ebp), %eax
	cmpl	$1048575, %edx
	jbe	L67
	shrl	$12, %edx
	orl	$32768, %eax
L67:
	movw	%dx, (%ebx)
	movb	%al, 5(%ebx)
	shrl	$16, %edx
	sarl	$8, %eax
	andl	$15, %edx
	movw	%cx, 2(%ebx)
	andl	$-16, %eax
	sarl	$16, %ecx
	orl	%eax, %edx
	movb	%cl, 4(%ebx)
	movb	%dl, 6(%ebx)
	sarl	$8, %ecx
	movb	%cl, 7(%ebx)
	popl	%ebx
	popl	%ebp
	ret
	.balign 2
.globl _setGatedesc
	.def	_setGatedesc;	.scl	2;	.type	32;	.endef
_setGatedesc:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	8(%ebp), %edx
	movl	16(%ebp), %eax
	movl	20(%ebp), %ebx
	movl	12(%ebp), %ecx
	movw	%ax, 2(%edx)
	movb	%bl, 5(%edx)
	movw	%cx, (%edx)
	movl	%ebx, %eax
	sarl	$8, %eax
	sarl	$16, %ecx
	movb	%al, 4(%edx)
	movw	%cx, 6(%edx)
	popl	%ebx
	popl	%ebp
	ret
	.balign 2
.globl _initGdtit
	.def	_initGdtit;	.scl	2;	.type	32;	.endef
_initGdtit:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	$2555904, %esi
	movl	$8191, %ebx
L74:
	pushl	$0
	pushl	$0
	pushl	$0
	pushl	%esi
	addl	$8, %esi
	call	_setSegmdesc
	addl	$16, %esp
	decl	%ebx
	jns	L74
	pushl	$16530
	movl	$255, %ebx
	pushl	$0
	pushl	$-1
	pushl	$2555912
	call	_setSegmdesc
	pushl	$16538
	pushl	$2621440
	pushl	$524287
	pushl	$2555920
	call	_setSegmdesc
	addl	$32, %esp
	pushl	$2555904
	pushl	$65535
	call	_loadGdtr
	popl	%esi
	popl	%eax
	movl	$2553856, %esi
L79:
	pushl	$0
	pushl	$0
	pushl	$0
	pushl	%esi
	addl	$8, %esi
	call	_setGatedesc
	addl	$16, %esp
	decl	%ebx
	jns	L79
	pushl	$2553856
	pushl	$2047
	call	_loadIdtr
	pushl	$142
	pushl	$16
	pushl	$_asm_interruptHandler20
	pushl	$2554112
	call	_setGatedesc
	pushl	$142
	pushl	$16
	pushl	$_asm_interruptHandler21
	pushl	$2554120
	call	_setGatedesc
	addl	$40, %esp
	pushl	$142
	pushl	$16
	pushl	$_asm_interruptHandler27
	pushl	$2554168
	call	_setGatedesc
	pushl	$142
	pushl	$16
	pushl	$_asm_interruptHandler2c
	pushl	$2554208
	call	_setGatedesc
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
	.balign 2
.globl _set_palette
	.def	_set_palette;	.scl	2;	.type	32;	.endef
_set_palette:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%ecx
	movl	8(%ebp), %ebx
	movl	12(%ebp), %edi
	movl	16(%ebp), %esi
	call	_io_load_eflags
	movl	%eax, -16(%ebp)
	call	_io_cli
	pushl	%ebx
	pushl	$968
	call	_io_out8
	cmpl	%edi, %ebx
	popl	%eax
	popl	%edx
	jge	L91
	subl	%ebx, %edi
	movl	%edi, %ebx
L89:
	movb	(%esi), %al
	shrb	$2, %al
	movzbl	%al, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	movb	1(%esi), %al
	shrb	$2, %al
	movzbl	%al, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	movb	2(%esi), %al
	shrb	$2, %al
	addl	$3, %esi
	movzbl	%al, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	addl	$24, %esp
	decl	%ebx
	jne	L89
L91:
	movl	-16(%ebp), %eax
	movl	%eax, 8(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_io_store_eflags
	.data
_table_rgb.0:
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	0
	.byte	-1
	.byte	-1
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	-1
	.byte	0
	.byte	-1
	.byte	0
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-58
	.byte	-58
	.byte	-58
	.byte	-124
	.byte	0
	.byte	0
	.byte	0
	.byte	-124
	.byte	0
	.byte	-124
	.byte	-124
	.byte	0
	.byte	0
	.byte	0
	.byte	-124
	.byte	-124
	.byte	0
	.byte	-124
	.byte	0
	.byte	-124
	.byte	-124
	.byte	-124
	.byte	-124
	.byte	-124
	.text
	.balign 2
.globl _init_palette
	.def	_init_palette;	.scl	2;	.type	32;	.endef
_init_palette:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$_table_rgb.0
	pushl	$15
	pushl	$0
	call	_set_palette
	leave
	ret
	.balign 2
.globl _boxFill8
	.def	_boxFill8;	.scl	2;	.type	32;	.endef
_boxFill8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%edi
	pushl	%edi
	movb	16(%ebp), %al
	movl	24(%ebp), %ecx
	movl	28(%ebp), %edi
	movb	%al, -13(%ebp)
	cmpl	32(%ebp), %ecx
	jg	L105
	movl	12(%ebp), %ebx
	imull	%ecx, %ebx
L103:
	movl	20(%ebp), %edx
	cmpl	%edi, %edx
	jg	L107
	movl	8(%ebp), %esi
	addl	%ebx, %esi
	addl	%edx, %esi
	movl	%esi, -20(%ebp)
L102:
	movl	-20(%ebp), %esi
	movb	-13(%ebp), %al
	incl	%edx
	movb	%al, (%esi)
	incl	%esi
	movl	%esi, -20(%ebp)
	cmpl	%edi, %edx
	jle	L102
L107:
	incl	%ecx
	addl	12(%ebp), %ebx
	cmpl	32(%ebp), %ecx
	jle	L103
L105:
	popl	%ebx
	popl	%esi
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _init_GUI
	.def	_init_GUI;	.scl	2;	.type	32;	.endef
_init_GUI:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$12, %esp
	movl	16(%ebp), %eax
	movl	12(%ebp), %edi
	subl	$29, %eax
	decl	%edi
	pushl	%eax
	pushl	%edi
	pushl	$0
	pushl	$0
	pushl	$14
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	subl	$28, %eax
	pushl	%eax
	pushl	%edi
	pushl	%eax
	pushl	$0
	pushl	$8
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	addl	$56, %esp
	subl	$27, %eax
	pushl	%eax
	pushl	%edi
	pushl	%eax
	pushl	$0
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	decl	%eax
	pushl	%eax
	movl	16(%ebp), %eax
	pushl	%edi
	subl	$26, %eax
	pushl	%eax
	pushl	$0
	pushl	$8
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %esi
	addl	$56, %esp
	subl	$24, %esi
	pushl	%esi
	pushl	$59
	pushl	%esi
	pushl	$3
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	subl	$4, %eax
	pushl	%eax
	movl	%eax, -16(%ebp)
	pushl	$2
	pushl	%esi
	pushl	$2
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	addl	$56, %esp
	pushl	-16(%ebp)
	pushl	$59
	pushl	-16(%ebp)
	pushl	$3
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	subl	$5, %eax
	pushl	%eax
	movl	16(%ebp), %eax
	pushl	$59
	subl	$23, %eax
	pushl	%eax
	movl	%eax, -20(%ebp)
	pushl	$59
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	addl	$56, %esp
	subl	$3, %eax
	movl	%eax, -24(%ebp)
	pushl	%eax
	pushl	$59
	pushl	%eax
	pushl	$2
	pushl	$0
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	pushl	-24(%ebp)
	pushl	$60
	pushl	%esi
	pushl	$60
	pushl	$0
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	12(%ebp), %edi
	addl	$56, %esp
	movl	12(%ebp), %ebx
	subl	$4, %ebx
	subl	$47, %edi
	pushl	%esi
	pushl	%ebx
	pushl	%esi
	pushl	%edi
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	pushl	-16(%ebp)
	pushl	%edi
	pushl	-20(%ebp)
	pushl	%edi
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	addl	$56, %esp
	pushl	-24(%ebp)
	pushl	%ebx
	pushl	-24(%ebp)
	pushl	%edi
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	12(%ebp), %eax
	pushl	-24(%ebp)
	subl	$3, %eax
	pushl	%eax
	pushl	%esi
	pushl	%eax
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _putFont8
	.def	_putFont8;	.scl	2;	.type	32;	.endef
_putFont8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%esi, %esi
	pushl	%ebx
	movl	28(%ebp), %edi
	movb	24(%ebp), %bl
L122:
	movl	20(%ebp), %eax
	movl	16(%ebp), %edx
	addl	%esi, %eax
	imull	12(%ebp), %eax
	addl	8(%ebp), %eax
	leal	(%edx,%eax), %ecx
	movb	(%esi,%edi), %dl
	testb	%dl, %dl
	jns	L114
	movb	%bl, (%ecx)
L114:
	movb	%dl, %al
	andl	$64, %eax
	testb	%al, %al
	je	L115
	movb	%bl, 1(%ecx)
L115:
	movb	%dl, %al
	andl	$32, %eax
	testb	%al, %al
	je	L116
	movb	%bl, 2(%ecx)
L116:
	movb	%dl, %al
	andl	$16, %eax
	testb	%al, %al
	je	L117
	movb	%bl, 3(%ecx)
L117:
	movb	%dl, %al
	andl	$8, %eax
	testb	%al, %al
	je	L118
	movb	%bl, 4(%ecx)
L118:
	movb	%dl, %al
	andl	$4, %eax
	testb	%al, %al
	je	L119
	movb	%bl, 5(%ecx)
L119:
	movb	%dl, %al
	andl	$2, %eax
	testb	%al, %al
	je	L120
	movb	%bl, 6(%ecx)
L120:
	andl	$1, %edx
	testb	%dl, %dl
	je	L112
	movb	%bl, 7(%ecx)
L112:
	incl	%esi
	cmpl	$15, %esi
	jle	L122
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _putFont8_asc
	.def	_putFont8_asc;	.scl	2;	.type	32;	.endef
_putFont8_asc:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%eax
	movl	28(%ebp), %ebx
	movb	24(%ebp), %al
	movb	%al, -13(%ebp)
	movl	16(%ebp), %esi
	movl	20(%ebp), %edi
	cmpb	$0, (%ebx)
	jne	L130
L132:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L130:
	movzbl	(%ebx), %eax
	sall	$4, %eax
	incl	%ebx
	addl	$_font, %eax
	pushl	%eax
	movsbl	-13(%ebp),%eax
	pushl	%eax
	pushl	%edi
	pushl	%esi
	addl	$8, %esi
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_putFont8
	addl	$24, %esp
	cmpb	$0, (%ebx)
	jne	L130
	jmp	L132
	.balign 2
.globl _putFont8AscSheet
	.def	_putFont8AscSheet;	.scl	2;	.type	32;	.endef
_putFont8AscSheet:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	16(%ebp), %edi
	movl	%eax, -16(%ebp)
	movl	20(%ebp), %ebx
	movl	12(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	28(%ebp), %eax
	movl	%eax, -24(%ebp)
	leal	15(%edi), %eax
	pushl	%eax
	movl	-20(%ebp), %eax
	movl	32(%ebp), %esi
	movsbl	%bl,%ebx
	leal	(%eax,%esi,8), %esi
	leal	-1(%esi), %eax
	pushl	%eax
	pushl	%edi
	pushl	-20(%ebp)
	movzbl	24(%ebp), %eax
	pushl	%eax
	movl	-16(%ebp), %eax
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	pushl	-24(%ebp)
	pushl	%ebx
	pushl	%edi
	pushl	-20(%ebp)
	movl	-16(%ebp), %eax
	pushl	4(%eax)
	pushl	(%eax)
	call	_putFont8_asc
	movl	%edi, 16(%ebp)
	leal	16(%edi), %eax
	movl	%esi, 20(%ebp)
	movl	%eax, 24(%ebp)
	addl	$52, %esp
	movl	-20(%ebp), %eax
	movl	%eax, 12(%ebp)
	movl	-16(%ebp), %eax
	movl	%eax, 8(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_sheetRefresh
	.data
_cursor.1:
	.ascii "*..............."
	.ascii "**.............."
	.ascii "*O*............."
	.ascii "*OO*............"
	.ascii "*OOO*..........."
	.ascii "*OOOO*.........."
	.ascii "*OOOOO*........."
	.ascii "*OOOOOO*........"
	.ascii "*OOOOOOO*......."
	.ascii "*OOOO*****......"
	.ascii "*OO*O*.........."
	.ascii "*O*.*O*........."
	.ascii "**..*O*........."
	.ascii "*....*O*........"
	.ascii ".....*O*........"
	.ascii "......*........."
	.text
	.balign 2
.globl _initMouseCursor8
	.def	_initMouseCursor8;	.scl	2;	.type	32;	.endef
_initMouseCursor8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%edi, %edi
	pushl	%ebx
	xorl	%ebx, %ebx
	pushl	%eax
	movb	12(%ebp), %al
	movl	8(%ebp), %esi
	movb	%al, -13(%ebp)
L147:
	xorl	%edx, %edx
L146:
	leal	(%edx,%edi), %eax
	cmpb	$42, _cursor.1(%eax)
	je	L152
L143:
	cmpb	$79, _cursor.1(%eax)
	je	L153
L144:
	cmpb	$46, _cursor.1(%eax)
	je	L154
L141:
	incl	%edx
	cmpl	$15, %edx
	jle	L146
	incl	%ebx
	addl	$16, %edi
	cmpl	$15, %ebx
	jle	L147
	popl	%eax
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L154:
	movb	-13(%ebp), %cl
	movb	%cl, (%eax,%esi)
	jmp	L141
L153:
	movb	$7, (%eax,%esi)
	jmp	L144
L152:
	movb	$0, (%eax,%esi)
	jmp	L143
	.balign 2
.globl _putblock8_8
	.def	_putblock8_8;	.scl	2;	.type	32;	.endef
_putblock8_8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%esi, %esi
	pushl	%ebx
	subl	$12, %esp
	cmpl	20(%ebp), %esi
	jge	L167
	xorl	%edi, %edi
L165:
	xorl	%ebx, %ebx
	cmpl	16(%ebp), %ebx
	jge	L169
	movl	32(%ebp), %eax
	addl	%edi, %eax
	movl	%eax, -20(%ebp)
L164:
	movl	28(%ebp), %eax
	movl	24(%ebp), %edx
	addl	%esi, %eax
	addl	%ebx, %edx
	imull	12(%ebp), %eax
	addl	%edx, %eax
	movl	8(%ebp), %ecx
	movl	-20(%ebp), %edx
	incl	%ebx
	movb	(%edx), %dl
	movb	%dl, (%eax,%ecx)
	incl	-20(%ebp)
	cmpl	16(%ebp), %ebx
	jl	L164
L169:
	incl	%esi
	addl	36(%ebp), %edi
	cmpl	20(%ebp), %esi
	jl	L165
L167:
	addl	$12, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _memtest
	.def	_memtest;	.scl	2;	.type	32;	.endef
_memtest:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	xorl	%esi, %esi
	call	_io_load_eflags
	orl	$262144, %eax
	pushl	%eax
	call	_io_store_eflags
	call	_io_load_eflags
	popl	%edx
	testl	$262144, %eax
	je	L171
	movl	$1, %esi
L171:
	andl	$-262145, %eax
	pushl	%eax
	call	_io_store_eflags
	movl	%esi, %eax
	popl	%ebx
	testb	%al, %al
	jne	L174
L172:
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_memtest_sub
	movl	%eax, %ebx
	popl	%eax
	movl	%esi, %eax
	popl	%edx
	testb	%al, %al
	jne	L175
L173:
	leal	-8(%ebp), %esp
	movl	%ebx, %eax
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L175:
	call	_loadCr0
	andl	$-1610612737, %eax
	pushl	%eax
	call	_storeCr0
	popl	%eax
	jmp	L173
L174:
	call	_loadCr0
	orl	$1610612736, %eax
	pushl	%eax
	call	_storeCr0
	popl	%ecx
	jmp	L172
	.balign 2
.globl _memsegTotal
	.def	_memsegTotal;	.scl	2;	.type	32;	.endef
_memsegTotal:
	pushl	%ebp
	xorl	%eax, %eax
	movl	%esp, %ebp
	xorl	%edx, %edx
	pushl	%ebx
	movl	8(%ebp), %ebx
	movl	(%ebx), %ecx
	cmpl	%ecx, %eax
	jae	L183
L181:
	addl	20(%ebx,%edx,8), %eax
	incl	%edx
	cmpl	%ecx, %edx
	jb	L181
L183:
	popl	%ebx
	popl	%ebp
	ret
	.balign 2
.globl _memsegInit
	.def	_memsegInit;	.scl	2;	.type	32;	.endef
_memsegInit:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	$0, 8(%eax)
	movl	$0, 12(%eax)
	popl	%ebp
	ret
	.balign 2
.globl _memsegAlloc
	.def	_memsegAlloc;	.scl	2;	.type	32;	.endef
_memsegAlloc:
	pushl	%ebp
	xorl	%ecx, %ecx
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	movl	12(%ebp), %esi
	movl	8(%ebp), %ebx
	movl	(%ebx), %eax
	cmpl	%eax, %ecx
	jae	L199
L197:
	movl	20(%ebx,%ecx,8), %edx
	cmpl	%esi, %edx
	jae	L201
	incl	%ecx
	cmpl	%eax, %ecx
	jb	L197
L199:
	xorl	%eax, %eax
L185:
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L201:
	movl	16(%ebx,%ecx,8), %edi
	leal	(%esi,%edi), %eax
	movl	%eax, 16(%ebx,%ecx,8)
	movl	%edx, %eax
	subl	%esi, %eax
	movl	%eax, 20(%ebx,%ecx,8)
	testl	%eax, %eax
	jne	L191
	movl	(%ebx), %eax
	decl	%eax
	movl	%eax, (%ebx)
	cmpl	%eax, %ecx
	jae	L191
	movl	%eax, %esi
L196:
	movl	24(%ebx,%ecx,8), %eax
	movl	28(%ebx,%ecx,8), %edx
	movl	%eax, 16(%ebx,%ecx,8)
	movl	%edx, 20(%ebx,%ecx,8)
	incl	%ecx
	cmpl	%esi, %ecx
	jb	L196
L191:
	movl	%edi, %eax
	jmp	L185
	.balign 2
.globl _memsegFree
	.def	_memsegFree;	.scl	2;	.type	32;	.endef
_memsegFree:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	movl	8(%ebp), %esi
	pushl	%ebx
	xorl	%ebx, %ebx
	movl	(%esi), %edi
	cmpl	%edi, %ebx
	jge	L204
L208:
	movl	12(%ebp), %eax
	cmpl	%eax, 16(%esi,%ebx,8)
	ja	L204
	incl	%ebx
	cmpl	%edi, %ebx
	jl	L208
L204:
	testl	%ebx, %ebx
	jle	L209
	movl	12(%esi,%ebx,8), %edx
	movl	8(%esi,%ebx,8), %eax
	addl	%edx, %eax
	cmpl	12(%ebp), %eax
	je	L229
L209:
	cmpl	%edi, %ebx
	jge	L216
	movl	12(%ebp), %eax
	addl	16(%ebp), %eax
	cmpl	16(%esi,%ebx,8), %eax
	je	L230
L216:
	cmpl	$4089, %edi
	jg	L217
	movl	%edi, %ecx
	cmpl	%ebx, %edi
	jle	L227
L222:
	movl	8(%esi,%ecx,8), %eax
	movl	12(%esi,%ecx,8), %edx
	movl	%eax, 16(%esi,%ecx,8)
	movl	%edx, 20(%esi,%ecx,8)
	decl	%ecx
	cmpl	%ebx, %ecx
	jg	L222
L227:
	leal	1(%edi), %eax
	movl	%eax, (%esi)
	cmpl	%eax, 4(%esi)
	jge	L223
	movl	%eax, 4(%esi)
L223:
	movl	12(%ebp), %eax
	movl	%eax, 16(%esi,%ebx,8)
	movl	16(%ebp), %eax
	movl	%eax, 20(%esi,%ebx,8)
L228:
	xorl	%eax, %eax
L202:
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L217:
	movl	16(%ebp), %eax
	incl	12(%esi)
	addl	%eax, 8(%esi)
	orl	$-1, %eax
	jmp	L202
L230:
	movl	12(%ebp), %eax
	movl	%eax, 16(%esi,%ebx,8)
	movl	16(%ebp), %eax
	addl	%eax, 20(%esi,%ebx,8)
	jmp	L228
L229:
	addl	16(%ebp), %edx
	movl	%edx, 12(%esi,%ebx,8)
	cmpl	(%esi), %ebx
	jge	L228
	movl	12(%ebp), %eax
	addl	16(%ebp), %eax
	cmpl	16(%esi,%ebx,8), %eax
	jne	L228
	addl	20(%esi,%ebx,8), %edx
	movl	%edx, 12(%esi,%ebx,8)
	movl	(%esi), %eax
	decl	%eax
	movl	%eax, (%esi)
	cmpl	%eax, %ebx
	jge	L228
	movl	%eax, %ecx
L215:
	movl	24(%esi,%ebx,8), %eax
	movl	28(%esi,%ebx,8), %edx
	movl	%eax, 16(%esi,%ebx,8)
	movl	%edx, 20(%esi,%ebx,8)
	incl	%ebx
	cmpl	%ecx, %ebx
	jl	L215
	jmp	L228
	.balign 2
.globl _memsegAlloc4K
	.def	_memsegAlloc4K;	.scl	2;	.type	32;	.endef
_memsegAlloc4K:
	pushl	%ebp
	movl	%esp, %ebp
	movl	12(%ebp), %eax
	addl	$4095, %eax
	andl	$-4096, %eax
	movl	%eax, 12(%ebp)
	popl	%ebp
	jmp	_memsegAlloc
	.balign 2
.globl _memsegFree4K
	.def	_memsegFree4K;	.scl	2;	.type	32;	.endef
_memsegFree4K:
	pushl	%ebp
	movl	%esp, %ebp
	movl	16(%ebp), %eax
	addl	$4095, %eax
	andl	$-4096, %eax
	movl	%eax, 16(%ebp)
	popl	%ebp
	jmp	_memsegFree
	.balign 2
.globl _shtctlInit
	.def	_shtctlInit;	.scl	2;	.type	32;	.endef
_shtctlInit:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	movl	8(%ebp), %esi
	pushl	$10260
	movl	16(%ebp), %edi
	pushl	%esi
	call	_memsegAlloc4K
	popl	%ecx
	movl	%eax, %ebx
	popl	%eax
	xorl	%eax, %eax
	testl	%ebx, %ebx
	je	L233
	movl	20(%ebp), %eax
	imull	%edi, %eax
	pushl	%eax
	pushl	%esi
	call	_memsegAlloc4K
	testl	%eax, %eax
	movl	%eax, 4(%ebx)
	popl	%ecx
	popl	%edx
	je	L244
	movl	12(%ebp), %eax
	movl	%edi, 8(%ebx)
	movl	%eax, (%ebx)
	leal	9180(%ebx), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%ebx)
	movl	%ebx, %eax
	movl	$-1, 16(%ebx)
L240:
	movl	$0, 1072(%eax)
	movl	%ebx, 1076(%eax)
	addl	$36, %eax
	cmpl	%edx, %eax
	jle	L240
L243:
	movl	%ebx, %eax
L233:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L244:
	pushl	$10260
	pushl	%ebx
	pushl	%esi
	call	_memsegFree4K
	jmp	L243
	.balign 2
.globl _sheetAlloc
	.def	_sheetAlloc;	.scl	2;	.type	32;	.endef
_sheetAlloc:
	pushl	%ebp
	xorl	%edx, %edx
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	addl	$1044, %eax
L251:
	cmpl	$0, 28(%eax)
	je	L254
	incl	%edx
	addl	$36, %eax
	cmpl	$255, %edx
	jle	L251
	xorl	%eax, %eax
L245:
	popl	%ebp
	ret
L254:
	movl	$1, 28(%eax)
	movl	$-1, 24(%eax)
	jmp	L245
	.balign 2
.globl _sheetSetbuf
	.def	_sheetSetbuf;	.scl	2;	.type	32;	.endef
_sheetSetbuf:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %edx
	movl	12(%ebp), %eax
	movl	%eax, (%edx)
	movl	16(%ebp), %eax
	movl	%eax, 4(%edx)
	movl	20(%ebp), %eax
	movl	%eax, 8(%edx)
	movl	24(%ebp), %eax
	movl	%eax, 20(%edx)
	popl	%ebp
	ret
	.balign 2
.globl _sheetRefreshMap
	.def	_sheetRefreshMap;	.scl	2;	.type	32;	.endef
_sheetRefreshMap:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$40, %esp
	movl	8(%ebp), %eax
	cmpl	$0, 12(%ebp)
	movl	4(%eax), %eax
	movl	%eax, -40(%ebp)
	js	L287
L257:
	cmpl	$0, 16(%ebp)
	js	L288
L258:
	movl	8(%ebp), %edx
	movl	8(%edx), %eax
	cmpl	%eax, 20(%ebp)
	jle	L259
	movl	%eax, 20(%ebp)
L259:
	movl	8(%ebp), %esi
	movl	12(%esi), %eax
	cmpl	%eax, 24(%ebp)
	jle	L260
	movl	%eax, 24(%ebp)
L260:
	movl	8(%ebp), %eax
	movl	28(%ebp), %edi
	movl	%edi, -16(%ebp)
	cmpl	16(%eax), %edi
	jg	L282
L280:
	movl	8(%ebp), %esi
	movl	-16(%ebp), %edx
	movl	16(%ebp), %ebx
	movl	20(%esi,%edx,4), %ecx
	movl	%ecx, %eax
	subl	%esi, %eax
	movl	(%ecx), %edi
	subl	$1044, %eax
	movl	16(%ecx), %edx
	sarl	$2, %eax
	movl	%edi, -32(%ebp)
	imull	$954437177, %eax, %eax
	movl	24(%ebp), %edi
	subl	%edx, %ebx
	subl	%edx, %edi
	movb	%al, -33(%ebp)
	movl	20(%ebp), %esi
	movl	12(%ebp), %edx
	movl	12(%ecx), %eax
	movl	%edi, -44(%ebp)
	subl	%eax, %esi
	subl	%eax, %edx
	movl	%esi, -52(%ebp)
	movl	%edx, -28(%ebp)
	js	L289
L265:
	testl	%ebx, %ebx
	js	L290
L266:
	movl	4(%ecx), %eax
	cmpl	%eax, -52(%ebp)
	jle	L267
	movl	%eax, -52(%ebp)
L267:
	movl	8(%ecx), %eax
	cmpl	%eax, -44(%ebp)
	jle	L268
	movl	%eax, -44(%ebp)
L268:
	cmpl	-44(%ebp), %ebx
	jge	L284
L279:
	movl	16(%ecx), %esi
	movl	-28(%ebp), %edx
	addl	%ebx, %esi
	cmpl	-52(%ebp), %edx
	movl	%esi, -24(%ebp)
	jge	L286
L278:
	movl	%ebx, %eax
	movl	12(%ecx), %edi
	imull	4(%ecx), %eax
	addl	%edx, %edi
	movl	-32(%ebp), %esi
	addl	%edx, %eax
	movl	%edi, -20(%ebp)
	movzbl	(%eax,%esi), %esi
	cmpl	20(%ecx), %esi
	je	L275
	movl	8(%ebp), %edi
	movl	-24(%ebp), %eax
	movl	-40(%ebp), %esi
	imull	8(%edi), %eax
	addl	-20(%ebp), %eax
	movl	%eax, -48(%ebp)
	movb	-33(%ebp), %al
	movl	-48(%ebp), %edi
	movb	%al, (%edi,%esi)
L275:
	incl	%edx
	cmpl	-52(%ebp), %edx
	jl	L278
L286:
	incl	%ebx
	cmpl	-44(%ebp), %ebx
	jl	L279
L284:
	movl	8(%ebp), %edx
	incl	-16(%ebp)
	movl	-16(%ebp), %eax
	cmpl	16(%edx), %eax
	jle	L280
L282:
	addl	$40, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L290:
	xorl	%ebx, %ebx
	jmp	L266
L289:
	movl	$0, -28(%ebp)
	jmp	L265
L288:
	movl	$0, 16(%ebp)
	jmp	L258
L287:
	movl	$0, 12(%ebp)
	jmp	L257
	.balign 2
.globl _sheetUpdown
	.def	_sheetUpdown;	.scl	2;	.type	32;	.endef
_sheetUpdown:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	movl	8(%ebp), %edi
	pushl	%ebx
	movl	12(%ebp), %esi
	movl	32(%edi), %ebx
	movl	24(%edi), %eax
	movl	16(%ebx), %edx
	incl	%edx
	cmpl	%edx, %esi
	jle	L292
	movl	%edx, %esi
L292:
	cmpl	$-1, %esi
	jge	L293
	orl	$-1, %esi
L293:
	movl	%esi, 24(%edi)
	cmpl	%esi, %eax
	jle	L294
	testl	%esi, %esi
	js	L295
	movl	%eax, %ecx
L300:
	movl	16(%ebx,%ecx,4), %eax
	movl	%eax, 20(%ebx,%ecx,4)
	movl	%ecx, 24(%eax)
	decl	%ecx
	cmpl	%esi, %ecx
	jg	L300
	movl	%edi, 20(%ebx,%esi,4)
	leal	1(%esi), %ebx
	pushl	%ebx
	movl	16(%edi), %ecx
	movl	%ecx, %eax
	addl	8(%edi), %eax
	pushl	%eax
	movl	12(%edi), %edx
	movl	%edx, %eax
	addl	4(%edi), %eax
	pushl	%eax
	pushl	%ecx
	pushl	%edx
	pushl	32(%edi)
	call	_sheetRefreshMap
	pushl	%ebx
L329:
	movl	16(%edi), %ecx
	movl	%ecx, %eax
	addl	8(%edi), %eax
	pushl	%eax
	movl	12(%edi), %edx
	movl	%edx, %eax
	addl	4(%edi), %eax
	pushl	%eax
	pushl	%ecx
	pushl	%edx
	pushl	32(%edi)
	call	_sheetRefreshSub
	addl	$48, %esp
L291:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L295:
	movl	16(%ebx), %edx
	cmpl	%eax, %edx
	jle	L302
	movl	%eax, %ecx
	cmpl	%edx, %eax
	jge	L302
L307:
	movl	24(%ebx,%ecx,4), %eax
	movl	%eax, 20(%ebx,%ecx,4)
	movl	%ecx, 24(%eax)
	incl	%ecx
	cmpl	16(%ebx), %ecx
	jl	L307
L302:
	decl	16(%ebx)
	pushl	$0
	movl	16(%edi), %ecx
	movl	%ecx, %eax
	addl	8(%edi), %eax
	pushl	%eax
	movl	12(%edi), %edx
	movl	%edx, %eax
	addl	4(%edi), %eax
	pushl	%eax
	pushl	%ecx
	pushl	%edx
	pushl	32(%edi)
	call	_sheetRefreshMap
	pushl	$0
	jmp	L329
L294:
	cmpl	%esi, %eax
	jge	L291
	testl	%eax, %eax
	js	L310
	movl	%eax, %ecx
	cmpl	%esi, %eax
	jge	L326
L315:
	movl	24(%ebx,%ecx,4), %eax
	movl	%eax, 20(%ebx,%ecx,4)
	movl	%ecx, 24(%eax)
	incl	%ecx
	cmpl	%esi, %ecx
	jl	L315
L326:
	movl	%edi, 20(%ebx,%esi,4)
L316:
	pushl	%esi
	movl	16(%edi), %ecx
	movl	%ecx, %eax
	addl	8(%edi), %eax
	pushl	%eax
	movl	12(%edi), %edx
	movl	%edx, %eax
	addl	4(%edi), %eax
	pushl	%eax
	pushl	%ecx
	pushl	%edx
	pushl	32(%edi)
	call	_sheetRefreshMap
	pushl	%esi
	jmp	L329
L310:
	movl	16(%ebx), %ecx
	cmpl	%esi, %ecx
	jl	L328
L321:
	movl	20(%ebx,%ecx,4), %edx
	leal	1(%ecx), %eax
	movl	%edx, 24(%ebx,%ecx,4)
	decl	%ecx
	movl	%eax, 24(%edx)
	cmpl	%esi, %ecx
	jge	L321
L328:
	movl	%edi, 20(%ebx,%esi,4)
	incl	16(%ebx)
	jmp	L316
	.balign 2
.globl _sheetRefresh
	.def	_sheetRefresh;	.scl	2;	.type	32;	.endef
_sheetRefresh:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	8(%ebp), %ebx
	movl	24(%ebx), %eax
	testl	%eax, %eax
	js	L330
	pushl	%eax
	movl	16(%ebx), %ecx
	movl	%ecx, %eax
	addl	16(%ebp), %ecx
	addl	24(%ebp), %eax
	pushl	%eax
	movl	12(%ebx), %edx
	movl	%edx, %eax
	addl	12(%ebp), %edx
	addl	20(%ebp), %eax
	pushl	%eax
	pushl	%ecx
	pushl	%edx
	pushl	32(%ebx)
	call	_sheetRefreshSub
	addl	$24, %esp
L330:
	movl	-4(%ebp), %ebx
	leave
	ret
	.balign 2
.globl _sheetRefreshSub
	.def	_sheetRefreshSub;	.scl	2;	.type	32;	.endef
_sheetRefreshSub:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$44, %esp
	movl	8(%ebp), %eax
	movl	8(%ebp), %edx
	cmpl	$0, 12(%ebp)
	movl	(%eax), %eax
	movl	4(%edx), %edx
	movl	%eax, -36(%ebp)
	movl	%edx, -40(%ebp)
	js	L363
L333:
	cmpl	$0, 16(%ebp)
	js	L364
L334:
	movl	8(%ebp), %esi
	movl	8(%esi), %eax
	cmpl	%eax, 20(%ebp)
	jle	L335
	movl	%eax, 20(%ebp)
L335:
	movl	8(%ebp), %edi
	movl	12(%edi), %eax
	cmpl	%eax, 24(%ebp)
	jle	L336
	movl	%eax, 24(%ebp)
L336:
	movl	8(%ebp), %edx
	movl	28(%ebp), %eax
	movl	%eax, -16(%ebp)
	cmpl	16(%edx), %eax
	jg	L358
L356:
	movl	8(%ebp), %edi
	movl	-16(%ebp), %esi
	movl	16(%ebp), %ecx
	movl	20(%edi,%esi,4), %ebx
	movl	20(%ebp), %esi
	movl	%ebx, %eax
	subl	%edi, %eax
	movl	16(%ebx), %edx
	subl	$1044, %eax
	movl	24(%ebp), %edi
	sarl	$2, %eax
	subl	%edx, %edi
	imull	$954437177, %eax, %eax
	movb	%al, -41(%ebp)
	subl	%edx, %ecx
	movl	(%ebx), %eax
	movl	12(%ebp), %edx
	movl	%eax, -32(%ebp)
	movl	%edi, -56(%ebp)
	movl	12(%ebx), %eax
	subl	%eax, %esi
	subl	%eax, %edx
	movl	%esi, -28(%ebp)
	movl	%edx, -24(%ebp)
	js	L365
L341:
	testl	%ecx, %ecx
	js	L366
L342:
	movl	4(%ebx), %eax
	cmpl	%eax, -28(%ebp)
	jle	L343
	movl	%eax, -28(%ebp)
L343:
	movl	8(%ebx), %eax
	cmpl	%eax, -56(%ebp)
	jle	L344
	movl	%eax, -56(%ebp)
L344:
	movl	%ecx, %esi
	cmpl	-56(%ebp), %ecx
	jge	L360
L355:
	movl	16(%ebx), %edi
	movl	-24(%ebp), %ecx
	addl	%esi, %edi
	cmpl	-28(%ebp), %ecx
	movl	%edi, -20(%ebp)
	jge	L362
L354:
	movl	8(%ebp), %edx
	movl	-20(%ebp), %edi
	movl	12(%ebx), %eax
	imull	8(%edx), %edi
	addl	%ecx, %eax
	movb	-41(%ebp), %dl
	addl	%edi, %eax
	movl	-40(%ebp), %edi
	movl	%eax, -52(%ebp)
	cmpb	%dl, (%eax,%edi)
	je	L367
L351:
	incl	%ecx
	cmpl	-28(%ebp), %ecx
	jl	L354
L362:
	incl	%esi
	cmpl	-56(%ebp), %esi
	jl	L355
L360:
	movl	8(%ebp), %edi
	incl	-16(%ebp)
	movl	-16(%ebp), %esi
	cmpl	16(%edi), %esi
	jle	L356
L358:
	addl	$44, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L367:
	movl	%esi, %eax
	movl	-32(%ebp), %edx
	imull	4(%ebx), %eax
	addl	%ecx, %eax
	movl	-36(%ebp), %edi
	movb	(%eax,%edx), %al
	movl	-52(%ebp), %edx
	movb	%al, (%edx,%edi)
	jmp	L351
L366:
	xorl	%ecx, %ecx
	jmp	L342
L365:
	movl	$0, -24(%ebp)
	jmp	L341
L364:
	movl	$0, 16(%ebp)
	jmp	L334
L363:
	movl	$0, 12(%ebp)
	jmp	L333
	.balign 2
.globl _sheetSlide
	.def	_sheetSlide;	.scl	2;	.type	32;	.endef
_sheetSlide:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	movl	12(%ebp), %eax
	movl	8(%ebp), %ebx
	movl	12(%ebx), %edi
	movl	16(%ebx), %esi
	movl	%eax, 12(%ebx)
	movl	16(%ebp), %eax
	movl	%eax, 16(%ebx)
	cmpl	$0, 24(%ebx)
	js	L368
	pushl	$0
	movl	%esi, %eax
	addl	8(%ebx), %eax
	pushl	%eax
	movl	%edi, %eax
	addl	4(%ebx), %eax
	pushl	%eax
	pushl	%esi
	pushl	%edi
	pushl	32(%ebx)
	call	_sheetRefreshMap
	movl	16(%ebp), %eax
	pushl	24(%ebx)
	addl	8(%ebx), %eax
	pushl	%eax
	movl	12(%ebp), %eax
	addl	4(%ebx), %eax
	pushl	%eax
	pushl	16(%ebp)
	pushl	12(%ebp)
	pushl	32(%ebx)
	call	_sheetRefreshMap
	movl	%esi, %eax
	addl	$48, %esp
	pushl	$0
	addl	8(%ebx), %eax
	pushl	%eax
	movl	%edi, %eax
	addl	4(%ebx), %eax
	pushl	%eax
	pushl	%esi
	pushl	%edi
	pushl	32(%ebx)
	call	_sheetRefreshSub
	movl	16(%ebp), %eax
	pushl	24(%ebx)
	addl	8(%ebx), %eax
	pushl	%eax
	movl	12(%ebp), %eax
	addl	4(%ebx), %eax
	pushl	%eax
	pushl	16(%ebp)
	pushl	12(%ebp)
	pushl	32(%ebx)
	call	_sheetRefreshSub
	addl	$48, %esp
L368:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _sheetFree
	.def	_sheetFree;	.scl	2;	.type	32;	.endef
_sheetFree:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	8(%ebp), %ebx
	cmpl	$0, 24(%ebx)
	js	L371
	pushl	$-1
	pushl	%ebx
	call	_sheetUpdown
	popl	%eax
	popl	%edx
L371:
	movl	$0, 28(%ebx)
	movl	-4(%ebp), %ebx
	leave
	ret
	.data
_closeBtn.2:
	.ascii "OOOOOOOOOOOOOOO@"
	.ascii "OQQQQQQQQQQQQQ$@"
	.ascii "OQQQQQQQQQQQQQ$@"
	.ascii "OQQQ@@QQQQ@@QQ$@"
	.ascii "OQQQQ@@QQ@@QQQ$@"
	.ascii "OQQQQQ@@@@QQQQ$@"
	.ascii "OQQQQQQ@@QQQQQ$@"
	.ascii "OQQQQQ@@@@QQQQ$@"
	.ascii "OQQQQ@@QQ@@QQQ$@"
	.ascii "OQQQ@@QQQQ@@QQ$@"
	.ascii "OQQQQQQQQQQQQQ$@"
	.ascii "OQQQQQQQQQQQQQ$@"
	.ascii "O$$$$$$$$$$$$$$@"
	.ascii "@@@@@@@@@@@@@@@@"
	.text
	.balign 2
.globl _makeWindow
	.def	_makeWindow;	.scl	2;	.type	32;	.endef
_makeWindow:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$20, %esp
	movl	12(%ebp), %ebx
	pushl	$0
	leal	-1(%ebx), %eax
	leal	-2(%ebx), %edi
	pushl	%eax
	movl	%eax, -20(%ebp)
	pushl	$0
	pushl	$0
	pushl	$8
	pushl	%ebx
	pushl	8(%ebp)
	call	_boxFill8
	pushl	$1
	pushl	%edi
	pushl	$1
	pushl	$1
	pushl	$7
	pushl	%ebx
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %edx
	addl	$56, %esp
	decl	%edx
	movl	%edx, -24(%ebp)
	pushl	%edx
	pushl	$0
	pushl	$0
	pushl	$0
	pushl	$8
	pushl	%ebx
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %esi
	subl	$2, %esi
	pushl	%esi
	pushl	$1
	pushl	$1
	pushl	$1
	pushl	$7
	pushl	%ebx
	pushl	8(%ebp)
	call	_boxFill8
	addl	$56, %esp
	pushl	%esi
	pushl	%edi
	pushl	$1
	pushl	%edi
	pushl	$15
	pushl	%ebx
	pushl	8(%ebp)
	call	_boxFill8
	pushl	-24(%ebp)
	pushl	-20(%ebp)
	pushl	$0
	pushl	-20(%ebp)
	pushl	$0
	pushl	%ebx
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	addl	$56, %esp
	subl	$3, %eax
	pushl	%eax
	leal	-3(%ebx), %eax
	pushl	%eax
	pushl	$2
	pushl	$2
	pushl	$8
	pushl	%ebx
	pushl	8(%ebp)
	call	_boxFill8
	leal	-4(%ebx), %eax
	pushl	$20
	pushl	%eax
	pushl	$3
	pushl	$3
	pushl	$12
	pushl	%ebx
	pushl	8(%ebp)
	call	_boxFill8
	addl	$56, %esp
	pushl	%esi
	pushl	%edi
	pushl	%esi
	pushl	$1
	pushl	$15
	pushl	%ebx
	pushl	8(%ebp)
	call	_boxFill8
	pushl	-24(%ebp)
	pushl	-20(%ebp)
	pushl	-24(%ebp)
	pushl	$0
	pushl	$0
	imull	$5, %ebx, %esi
	pushl	%ebx
	pushl	8(%ebp)
	call	_boxFill8
	addl	$56, %esp
	pushl	20(%ebp)
	pushl	$7
	pushl	$4
	pushl	$24
	pushl	%ebx
	pushl	8(%ebp)
	call	_putFont8_asc
	addl	$24, %esp
	movl	$0, -16(%ebp)
	movl	$0, -32(%ebp)
L388:
	leal	(%esi,%ebx), %eax
	movl	8(%ebp), %edx
	xorl	%edi, %edi
	leal	-21(%edx,%eax), %ecx
L387:
	movl	-32(%ebp), %eax
	movb	_closeBtn.2(%edi,%eax), %dl
	cmpb	$64, %dl
	je	L393
	cmpb	$36, %dl
	je	L394
	cmpb	$81, %dl
	movb	$8, %dl
	setne	%al
	subb	%al, %dl
L382:
	incl	%edi
	movb	%dl, (%ecx)
	incl	%ecx
	cmpl	$15, %edi
	jle	L387
	incl	-16(%ebp)
	addl	%ebx, %esi
	addl	$16, -32(%ebp)
	cmpl	$13, -16(%ebp)
	jle	L388
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L394:
	movb	$15, %dl
	jmp	L382
L393:
	xorl	%edx, %edx
	jmp	L382
	.data
LC0:
	.ascii "counter\0"
LC1:
	.ascii "DickOS\0"
LC2:
	.ascii "(%3d, %3d)\0"
LC3:
	.ascii "memory %dMB free : %dKB\0"
LC8:
	.ascii "3[sec]\0"
LC6:
	.ascii "10[sec]\0"
LC7:
	.ascii "%010d\0"
LC5:
	.ascii "[lcr %4d %4d]\0"
LC4:
	.ascii "%02X\0"
	.text
	.balign 2
.globl _Main
	.def	_Main;	.scl	2;	.type	32;	.endef
_Main:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	leal	-876(%ebp), %esi
	subl	$900, %esp
	movl	$0, -888(%ebp)
	call	_initGdtit
	call	_init_pic
	call	_io_sti
	leal	-572(%ebp), %eax
	pushl	%eax
	pushl	$128
	pushl	%esi
	call	_QueueInit
	call	_initPit
	pushl	$256
	pushl	%esi
	call	_initKeyboard
	leal	-588(%ebp), %eax
	pushl	%eax
	pushl	$512
	pushl	%esi
	call	_enableMouse
	addl	$32, %esp
	pushl	$248
	pushl	$33
	call	_io_out8
	pushl	$239
	pushl	$161
	call	_io_out8
	call	_timerAlloc
	pushl	$10
	pushl	%esi
	movl	%eax, %ebx
	pushl	%eax
	call	_timerInit
	pushl	$1000
	pushl	%ebx
	call	_timerSetTime
	addl	$36, %esp
	call	_timerAlloc
	pushl	$3
	movl	%eax, %ebx
	pushl	%esi
	pushl	%eax
	call	_timerInit
	pushl	$300
	pushl	%ebx
	call	_timerSetTime
	call	_timerAlloc
	pushl	$1
	pushl	%esi
	pushl	%eax
	movl	%eax, -904(%ebp)
	call	_timerInit
	addl	$32, %esp
	pushl	$50
	pushl	-904(%ebp)
	call	_timerSetTime
	pushl	$-1073741825
	pushl	$4194304
	call	_memtest
	pushl	$3932160
	movl	%eax, %ebx
	call	_memsegInit
	pushl	$647168
	pushl	$4096
	pushl	$3932160
	call	_memsegFree
	leal	-4194304(%ebx), %eax
	addl	$32, %esp
	pushl	%eax
	pushl	$4194304
	pushl	$3932160
	call	_memsegFree
	call	_init_palette
	movswl	4086,%eax
	pushl	%eax
	movswl	4084,%eax
	pushl	%eax
	pushl	4088
	pushl	$3932160
	call	_shtctlInit
	movl	%eax, %ebx
	pushl	%eax
	call	_sheetAlloc
	addl	$32, %esp
	movl	%eax, %edi
	pushl	%ebx
	call	_sheetAlloc
	pushl	%ebx
	leal	-844(%ebp), %ebx
	movl	%eax, -892(%ebp)
	call	_sheetAlloc
	movswl	4086,%edx
	movl	%eax, -896(%ebp)
	movswl	4084,%eax
	imull	%edx, %eax
	pushl	%eax
	pushl	$3932160
	call	_memsegAlloc4K
	pushl	$8320
	pushl	$3932160
	movl	%eax, -900(%ebp)
	call	_memsegAlloc4K
	pushl	$-1
	movl	%eax, %esi
	movswl	4086,%eax
	pushl	%eax
	movswl	4084,%eax
	pushl	%eax
	pushl	-900(%ebp)
	pushl	%edi
	call	_sheetSetbuf
	addl	$44, %esp
	pushl	$14
	pushl	$16
	pushl	$16
	pushl	%ebx
	pushl	-892(%ebp)
	call	_sheetSetbuf
	pushl	$-1
	pushl	$52
	pushl	$160
	pushl	%esi
	pushl	-896(%ebp)
	call	_sheetSetbuf
	addl	$40, %esp
	movswl	4086,%eax
	pushl	%eax
	movswl	4084,%eax
	pushl	%eax
	pushl	-900(%ebp)
	call	_init_GUI
	pushl	$14
	pushl	%ebx
	movl	$2, %ebx
	call	_initMouseCursor8
	pushl	$LC0
	pushl	$52
	pushl	$160
	pushl	%esi
	call	_makeWindow
	addl	$36, %esp
	pushl	$0
	pushl	$0
	pushl	%edi
	call	_sheetSlide
	movswl	4084,%eax
	leal	-16(%eax), %ecx
	movl	%ecx, %eax
	cltd
	idivl	%ebx
	movl	%eax, -880(%ebp)
	movswl	4086,%eax
	leal	-44(%eax), %ecx
	movl	%ecx, %eax
	cltd
	idivl	%ebx
	pushl	%eax
	movl	%eax, -884(%ebp)
	pushl	-880(%ebp)
	pushl	-892(%ebp)
	leal	-60(%ebp), %ebx
	call	_sheetSlide
	pushl	$80
	pushl	$80
	pushl	-896(%ebp)
	call	_sheetSlide
	addl	$36, %esp
	pushl	$0
	pushl	%edi
	call	_sheetUpdown
	pushl	$1
	pushl	-896(%ebp)
	call	_sheetUpdown
	pushl	$2
	pushl	-892(%ebp)
	call	_sheetUpdown
	pushl	$6
	pushl	$LC1
	pushl	$14
	pushl	$7
	pushl	$32
	pushl	$30
	pushl	%edi
	call	_putFont8AscSheet
	addl	$52, %esp
	pushl	-884(%ebp)
	pushl	-880(%ebp)
	pushl	$LC2
	pushl	%ebx
	call	_sprintf
	pushl	$10
	pushl	%ebx
	pushl	$14
	pushl	$7
	pushl	$0
	pushl	$0
	pushl	%edi
	call	_putFont8AscSheet
	addl	$44, %esp
	pushl	$3932160
	call	_memsegTotal
	shrl	$10, %eax
	movl	%eax, (%esp)
	pushl	$-1073741825
	pushl	$4194304
	call	_memtest
	popl	%esi
	shrl	$20, %eax
	popl	%edx
	pushl	%eax
	pushl	$LC3
	pushl	%ebx
	call	_sprintf
	pushl	$26
	pushl	%ebx
	pushl	$14
	pushl	$7
	pushl	$48
	pushl	$0
	pushl	%edi
	call	_putFont8AscSheet
	addl	$44, %esp
L396:
	leal	-876(%ebp), %esi
	incl	-888(%ebp)
	call	_io_cli
	pushl	%esi
	call	_QueueSize
	popl	%ecx
	testl	%eax, %eax
	je	L422
	pushl	%esi
	call	_QueuePop
	movl	%eax, %ebx
	call	_io_sti
	popl	%edx
	leal	-256(%ebx), %eax
	cmpl	$255, %eax
	jbe	L423
	leal	-512(%ebx), %eax
	cmpl	$255, %eax
	jbe	L424
	cmpl	$10, %ebx
	je	L425
	cmpl	$3, %ebx
	je	L426
	cmpl	$1, %ebx
	je	L427
	testl	%ebx, %ebx
	jne	L396
	pushl	$1
	pushl	%esi
	pushl	-904(%ebp)
	call	_timerInit
	pushl	$127
	pushl	$15
	pushl	$112
	pushl	$8
	pushl	$14
L420:
	movswl	4084,%eax
	pushl	%eax
	pushl	-900(%ebp)
	call	_boxFill8
	addl	$40, %esp
	pushl	$50
	pushl	-904(%ebp)
	call	_timerSetTime
	pushl	$128
	pushl	$16
	pushl	$112
	pushl	$8
	pushl	%edi
	call	_sheetRefresh
L421:
	addl	$28, %esp
	jmp	L396
L427:
	pushl	$0
	pushl	%esi
	pushl	-904(%ebp)
	call	_timerInit
	pushl	$127
	pushl	$15
	pushl	$112
	pushl	$8
	pushl	$7
	jmp	L420
L426:
	pushl	$6
	pushl	$LC8
	pushl	$14
	pushl	$7
	pushl	$96
	pushl	$0
	pushl	%edi
	call	_putFont8AscSheet
	movl	$0, -888(%ebp)
	jmp	L421
L425:
	pushl	$7
	leal	-60(%ebp), %ebx
	pushl	$LC6
	pushl	$14
	pushl	$7
	pushl	$80
	pushl	$0
	pushl	%edi
	call	_putFont8AscSheet
	pushl	-888(%ebp)
	pushl	$LC7
	pushl	%ebx
	call	_sprintf
	addl	$40, %esp
	pushl	$11
	pushl	%ebx
	pushl	$8
	pushl	$0
	pushl	$28
	pushl	$40
	pushl	-896(%ebp)
	call	_putFont8AscSheet
	jmp	L421
L424:
	movzbl	%bl, %eax
	pushl	%eax
	leal	-588(%ebp), %eax
	pushl	%eax
	call	_mouseDecode
	popl	%ecx
	popl	%ebx
	testl	%eax, %eax
	je	L396
	pushl	-580(%ebp)
	pushl	-584(%ebp)
	pushl	$LC5
	leal	-60(%ebp), %ebx
	pushl	%ebx
	call	_sprintf
	addl	$16, %esp
	movl	-576(%ebp), %eax
	testl	$1, %eax
	je	L405
	movb	$76, -59(%ebp)
L405:
	testl	$2, %eax
	je	L406
	movb	$82, -57(%ebp)
L406:
	andl	$4, %eax
	je	L407
	movb	$67, -58(%ebp)
L407:
	pushl	$15
	pushl	%ebx
	pushl	$14
	pushl	$7
	pushl	$16
	pushl	$32
	pushl	%edi
	call	_putFont8AscSheet
	movl	-584(%ebp), %edx
	movl	-580(%ebp), %eax
	addl	$28, %esp
	addl	%eax, -884(%ebp)
	addl	%edx, -880(%ebp)
	js	L428
L408:
	cmpl	$0, -884(%ebp)
	js	L429
L409:
	movswl	4084,%eax
	decl	%eax
	cmpl	%eax, -880(%ebp)
	jle	L410
	movl	%eax, -880(%ebp)
L410:
	movswl	4086,%eax
	decl	%eax
	cmpl	%eax, -884(%ebp)
	jle	L411
	movl	%eax, -884(%ebp)
L411:
	pushl	-884(%ebp)
	pushl	-880(%ebp)
	pushl	$LC2
	pushl	%ebx
	call	_sprintf
	pushl	$10
	pushl	%ebx
	pushl	$14
	pushl	$7
	pushl	$0
	pushl	$0
	pushl	%edi
	call	_putFont8AscSheet
	addl	$44, %esp
	pushl	-884(%ebp)
	pushl	-880(%ebp)
	pushl	-892(%ebp)
	call	_sheetSlide
	addl	$12, %esp
	jmp	L396
L429:
	movl	$0, -884(%ebp)
	jmp	L409
L428:
	movl	$0, -880(%ebp)
	jmp	L408
L423:
	pushl	%ebx
	leal	-60(%ebp), %ebx
	pushl	$LC4
	pushl	%ebx
	call	_sprintf
	pushl	$2
	pushl	%ebx
	pushl	$14
	pushl	$7
	pushl	$16
	pushl	$0
	pushl	%edi
	call	_putFont8AscSheet
	addl	$40, %esp
	jmp	L396
L422:
	call	_io_sti
	jmp	L396
.globl _keybuf
	.data
	.balign 4
_keybuf:
	.space 4
.globl _keyData0
	.data
	.balign 4
_keyData0:
	.space 4
.globl _mousebuf
	.data
	.balign 4
_mousebuf:
	.space 4
.globl _mouseData0
	.data
	.balign 4
_mouseData0:
	.space 4
.globl _timerctl
	.data
	.balign 16
_timerctl:
	.space 10012
	.def	_sprintf;	.scl	2;	.type	32;	.endef
	.def	_io_sti;	.scl	2;	.type	32;	.endef
	.def	_sheetRefreshSub;	.scl	2;	.type	32;	.endef
	.def	_memtest_sub;	.scl	2;	.type	32;	.endef
	.def	_storeCr0;	.scl	2;	.type	32;	.endef
	.def	_loadCr0;	.scl	2;	.type	32;	.endef
	.def	_sheetRefresh;	.scl	2;	.type	32;	.endef
	.def	_asm_interruptHandler2c;	.scl	2;	.type	32;	.endef
	.def	_asm_interruptHandler27;	.scl	2;	.type	32;	.endef
	.def	_asm_interruptHandler21;	.scl	2;	.type	32;	.endef
	.def	_asm_interruptHandler20;	.scl	2;	.type	32;	.endef
	.def	_loadIdtr;	.scl	2;	.type	32;	.endef
	.def	_loadGdtr;	.scl	2;	.type	32;	.endef
	.def	_io_store_eflags;	.scl	2;	.type	32;	.endef
	.def	_io_cli;	.scl	2;	.type	32;	.endef
	.def	_io_load_eflags;	.scl	2;	.type	32;	.endef
	.def	_timerAlloc;	.scl	2;	.type	32;	.endef
	.def	_io_out8;	.scl	2;	.type	32;	.endef
	.def	_io_in8;	.scl	2;	.type	32;	.endef
