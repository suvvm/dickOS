	.file	"bootpack.c"
	.text
	.balign 2
.globl _QueueInit
	.def	_QueueInit;	.scl	2;	.type	32;	.endef
_QueueInit:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	16(%ebp), %edx
	movl	12(%ebp), %ecx
	movl	%edx, (%eax)
	movl	%ecx, 12(%eax)
	movl	20(%ebp), %edx
	movl	%ecx, 16(%eax)
	movl	$0, 20(%eax)
	movl	$0, 8(%eax)
	movl	$0, 4(%eax)
	movl	%edx, 24(%eax)
	popl	%ebp
	ret
	.balign 2
.globl _QueuePush
	.def	_QueuePush;	.scl	2;	.type	32;	.endef
_QueuePush:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	8(%ebp), %ebx
	cmpl	$0, 16(%ebx)
	jne	L3
	orl	$1, 20(%ebx)
	orl	$-1, %eax
L2:
	movl	-4(%ebp), %ebx
	leave
	ret
L3:
	movl	4(%ebx), %ecx
	movl	(%ebx), %edx
	movl	12(%ebp), %eax
	movl	%eax, (%edx,%ecx,4)
	movl	4(%ebx), %eax
	decl	16(%ebx)
	incl	%eax
	cltd
	idivl	12(%ebx)
	movl	24(%ebx), %eax
	movl	%edx, 4(%ebx)
	testl	%eax, %eax
	je	L4
	cmpl	$2, 4(%eax)
	je	L4
	pushl	$0
	pushl	$-1
	pushl	%eax
	call	_processRun
	addl	$12, %esp
L4:
	xorl	%eax, %eax
	jmp	L2
	.balign 2
.globl _QueuePop
	.def	_QueuePop;	.scl	2;	.type	32;	.endef
_QueuePop:
	pushl	%ebp
	orl	$-1, %eax
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	movl	8(%ebp), %esi
	pushl	%ebx
	movl	16(%esi), %edi
	movl	12(%esi), %ebx
	cmpl	%ebx, %edi
	je	L6
	movl	8(%esi), %eax
	movl	(%esi), %edx
	movl	(%edx,%eax,4), %ecx
	incl	%eax
	cltd
	idivl	%ebx
	leal	1(%edi), %eax
	movl	%edx, 8(%esi)
	movl	%eax, 16(%esi)
	movl	%ecx, %eax
L6:
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _QueueSize
	.def	_QueueSize;	.scl	2;	.type	32;	.endef
_QueueSize:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %edx
	popl	%ebp
	movl	12(%edx), %eax
	subl	16(%edx), %eax
	ret
	.data
_keyboardTable0:
	.byte	0
	.byte	0
	.byte	49
	.byte	50
	.byte	51
	.byte	52
	.byte	53
	.byte	54
	.byte	55
	.byte	56
	.byte	57
	.byte	48
	.byte	45
	.byte	61
	.byte	0
	.byte	0
	.byte	81
	.byte	87
	.byte	69
	.byte	82
	.byte	84
	.byte	89
	.byte	85
	.byte	73
	.byte	79
	.byte	80
	.byte	91
	.byte	93
	.byte	0
	.byte	0
	.byte	65
	.byte	83
	.byte	68
	.byte	70
	.byte	71
	.byte	72
	.byte	74
	.byte	75
	.byte	76
	.byte	59
	.byte	39
	.byte	96
	.byte	0
	.byte	92
	.byte	90
	.byte	88
	.byte	67
	.byte	86
	.byte	66
	.byte	78
	.byte	77
	.byte	44
	.byte	46
	.byte	47
	.byte	0
	.byte	42
	.byte	0
	.byte	32
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	55
	.byte	56
	.byte	57
	.byte	45
	.byte	52
	.byte	53
	.byte	54
	.byte	43
	.byte	49
	.byte	50
	.byte	51
	.byte	48
	.byte	46
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
_keyboardTable1:
	.byte	0
	.byte	0
	.byte	33
	.byte	64
	.byte	35
	.byte	36
	.byte	37
	.byte	94
	.byte	38
	.byte	42
	.byte	40
	.byte	41
	.byte	95
	.byte	43
	.byte	0
	.byte	0
	.byte	81
	.byte	87
	.byte	69
	.byte	82
	.byte	84
	.byte	89
	.byte	85
	.byte	73
	.byte	79
	.byte	80
	.byte	123
	.byte	125
	.byte	0
	.byte	0
	.byte	65
	.byte	83
	.byte	68
	.byte	70
	.byte	71
	.byte	72
	.byte	74
	.byte	75
	.byte	76
	.byte	58
	.byte	34
	.byte	126
	.byte	0
	.byte	124
	.byte	90
	.byte	88
	.byte	67
	.byte	86
	.byte	66
	.byte	78
	.byte	77
	.byte	60
	.byte	62
	.byte	63
	.byte	0
	.byte	42
	.byte	0
	.byte	32
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	55
	.byte	56
	.byte	57
	.byte	45
	.byte	52
	.byte	53
	.byte	54
	.byte	43
	.byte	49
	.byte	50
	.byte	51
	.byte	48
	.byte	46
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.text
	.balign 2
.globl _waitKeyboardControllerReady
	.def	_waitKeyboardControllerReady;	.scl	2;	.type	32;	.endef
_waitKeyboardControllerReady:
	pushl	%ebp
	movl	%esp, %ebp
L10:
	pushl	$100
	call	_io_in8
	popl	%edx
	andl	$2, %eax
	jne	L10
	leave
	ret
	.balign 2
.globl _initKeyboard
	.def	_initKeyboard;	.scl	2;	.type	32;	.endef
_initKeyboard:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	%eax, _keybuf
	movl	12(%ebp), %eax
	movl	%eax, _keyData0
	call	_waitKeyboardControllerReady
	pushl	$96
	pushl	$100
	call	_io_out8
	call	_waitKeyboardControllerReady
	popl	%ecx
	popl	%eax
	movl	$71, 12(%ebp)
	movl	$96, 8(%ebp)
	leave
	jmp	_io_out8
	.balign 2
.globl _enableMouse
	.def	_enableMouse;	.scl	2;	.type	32;	.endef
_enableMouse:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	%eax, _mousebuf
	movl	12(%ebp), %eax
	movl	%eax, _mouseData0
	call	_waitKeyboardControllerReady
	pushl	$212
	pushl	$100
	call	_io_out8
	call	_waitKeyboardControllerReady
	pushl	$244
	pushl	$96
	call	_io_out8
	movl	16(%ebp), %eax
	movb	$0, 3(%eax)
	leave
	ret
	.balign 2
.globl _mouseDecode
	.def	_mouseDecode;	.scl	2;	.type	32;	.endef
_mouseDecode:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	8(%ebp), %edx
	movl	12(%ebp), %ecx
	movl	%ecx, %esi
	movb	3(%edx), %al
	testb	%al, %al
	jne	L17
	cmpb	$-6, %cl
	je	L26
L25:
	xorl	%eax, %eax
L16:
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L26:
	movb	$1, 3(%edx)
	jmp	L25
L17:
	cmpb	$1, %al
	je	L27
	cmpb	$2, %al
	je	L28
	cmpb	$3, %al
	je	L29
	orl	$-1, %eax
	jmp	L16
L29:
	movb	(%edx), %bl
	andl	$255, %esi
	movl	%ebx, %eax
	movb	%cl, 2(%edx)
	andl	$7, %eax
	movl	%esi, 8(%edx)
	movl	%eax, 12(%edx)
	movb	%bl, %al
	movzbl	1(%edx), %ecx
	andl	$16, %eax
	movl	%ecx, 4(%edx)
	movb	$1, 3(%edx)
	testb	%al, %al
	je	L23
	orl	$-256, %ecx
	movl	%ecx, 4(%edx)
L23:
	andl	$32, %ebx
	testb	%bl, %bl
	je	L24
	orl	$-256, 8(%edx)
L24:
	negl	8(%edx)
	movl	$1, %eax
	jmp	L16
L28:
	movb	%cl, 1(%edx)
	movb	$3, 3(%edx)
	jmp	L25
L27:
	andl	$-56, %esi
	movl	%esi, %eax
	cmpb	$8, %al
	jne	L25
	movb	%cl, (%edx)
	movb	$2, 3(%edx)
	jmp	L25
	.balign 2
.globl _initPit
	.def	_initPit;	.scl	2;	.type	32;	.endef
_initPit:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$52
	pushl	$67
	call	_io_out8
	pushl	$156
	pushl	$64
	call	_io_out8
	pushl	$46
	pushl	$64
	call	_io_out8
	movl	$_timerctl+10000, %edx
	movl	$0, _timerctl
	addl	$24, %esp
	movl	$_timerctl+20, %eax
L35:
	movl	$0, (%eax)
	addl	$20, %eax
	cmpl	%edx, %eax
	jle	L35
	call	_timerAlloc
	movl	$-1, 4(%eax)
	movl	$2, 8(%eax)
	movl	$0, (%eax)
	movl	%eax, _timerctl+8
	movl	$-1, _timerctl+4
	leave
	ret
	.balign 2
.globl _timerAlloc
	.def	_timerAlloc;	.scl	2;	.type	32;	.endef
_timerAlloc:
	pushl	%ebp
	xorl	%edx, %edx
	movl	%esp, %ebp
	movl	$_timerctl+12, %eax
L44:
	cmpl	$0, 8(%eax)
	je	L47
	incl	%edx
	addl	$20, %eax
	cmpl	$499, %edx
	jle	L44
	xorl	%eax, %eax
L38:
	popl	%ebp
	ret
L47:
	movl	$1, 8(%eax)
	jmp	L38
	.balign 2
.globl _timerFree
	.def	_timerFree;	.scl	2;	.type	32;	.endef
_timerFree:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	$0, 8(%eax)
	popl	%ebp
	ret
	.balign 2
.globl _timerInit
	.def	_timerInit;	.scl	2;	.type	32;	.endef
_timerInit:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	12(%ebp), %edx
	movl	%edx, 12(%eax)
	movl	16(%ebp), %edx
	movb	%dl, 16(%eax)
	popl	%ebp
	ret
	.balign 2
.globl _timerSetTime
	.def	_timerSetTime;	.scl	2;	.type	32;	.endef
_timerSetTime:
	pushl	%ebp
	movl	_timerctl, %eax
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	8(%ebp), %ebx
	addl	12(%ebp), %eax
	movl	$2, 8(%ebx)
	movl	%eax, 4(%ebx)
	call	_io_load_eflags
	movl	%eax, %esi
	call	_io_cli
	movl	_timerctl+8, %eax
	movl	4(%ebx), %edx
	cmpl	4(%eax), %edx
	jbe	L57
L52:
	movl	%eax, %ecx
	movl	(%eax), %eax
	testl	%eax, %eax
	je	L53
	cmpl	4(%eax), %edx
	ja	L52
	movl	%ebx, (%ecx)
	movl	%eax, (%ebx)
L53:
	movl	%esi, 8(%ebp)
	popl	%ebx
	popl	%esi
	popl	%ebp
	jmp	_io_store_eflags
L57:
	movl	%ebx, _timerctl+8
	movl	%edx, _timerctl+4
	movl	%eax, (%ebx)
	jmp	L53
	.balign 2
.globl _processIdle
	.def	_processIdle;	.scl	2;	.type	32;	.endef
_processIdle:
	pushl	%ebp
	movl	%esp, %ebp
L59:
	call	_io_hlt
	jmp	L59
	.balign 2
.globl _processNow
	.def	_processNow;	.scl	2;	.type	32;	.endef
_processNow:
	movl	_processctl, %eax
	pushl	%ebp
	movl	%esp, %ebp
	popl	%ebp
	movl	(%eax), %edx
	imull	$408, %edx, %edx
	leal	8(%edx,%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax,%edx,4), %eax
	ret
	.balign 2
.globl _processAdd
	.def	_processAdd;	.scl	2;	.type	32;	.endef
_processAdd:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %ecx
	movl	8(%ecx), %edx
	imull	$408, %edx, %edx
	addl	_processctl, %edx
	movl	8(%edx), %eax
	movl	%ecx, 16(%edx,%eax,4)
	incl	%eax
	movl	%eax, 8(%edx)
	movl	$2, 4(%ecx)
	popl	%ebp
	ret
	.balign 2
.globl _processRemove
	.def	_processRemove;	.scl	2;	.type	32;	.endef
_processRemove:
	pushl	%ebp
	xorl	%ecx, %ecx
	movl	%esp, %ebp
	pushl	%ebx
	movl	8(%ebp), %ebx
	movl	8(%ebx), %eax
	imull	$408, %eax, %eax
	addl	_processctl, %eax
	leal	8(%eax), %edx
	cmpl	8(%eax), %ecx
	jge	L66
L70:
	cmpl	%ebx, 8(%edx,%ecx,4)
	je	L66
	incl	%ecx
	cmpl	(%edx), %ecx
	jl	L70
L66:
	movl	4(%edx), %eax
	decl	(%edx)
	cmpl	%eax, %ecx
	jge	L71
	decl	%eax
	movl	%eax, 4(%edx)
L71:
	movl	(%edx), %eax
	cmpl	%eax, 4(%edx)
	jl	L72
	movl	$0, 4(%edx)
L72:
	movl	$1, 4(%ebx)
	movl	(%edx), %ebx
	cmpl	%ebx, %ecx
	jge	L80
L77:
	movl	12(%edx,%ecx,4), %eax
	movl	%eax, 8(%edx,%ecx,4)
	incl	%ecx
	cmpl	%ebx, %ecx
	jl	L77
L80:
	popl	%ebx
	popl	%ebp
	ret
	.balign 2
.globl _processSwitchSub
	.def	_processSwitchSub;	.scl	2;	.type	32;	.endef
_processSwitchSub:
	pushl	%ebp
	xorl	%ecx, %ecx
	movl	%esp, %ebp
	movl	_processctl, %eax
	xorl	%edx, %edx
L87:
	cmpl	$0, 8(%eax,%edx)
	jg	L83
	incl	%ecx
	addl	$408, %edx
	cmpl	$9, %ecx
	jle	L87
L83:
	movl	%ecx, (%eax)
	movb	$0, 4(%eax)
	popl	%ebp
	ret
	.balign 2
.globl _processInit
	.def	_processInit;	.scl	2;	.type	32;	.endef
_processInit:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%edi, %edi
	pushl	%ebx
	xorl	%esi, %esi
	pushl	$152088
	movl	$999, %ebx
	pushl	8(%ebp)
	call	_memsegAlloc4K
	movl	%eax, _processctl
	popl	%eax
	popl	%edx
L94:
	movl	%edi, %eax
	leal	24(%esi), %edx
	addl	_processctl, %eax
	addl	$148, %edi
	movl	$0, 4092(%eax)
	movl	%edx, 4088(%eax)
	addl	$4132, %eax
	pushl	$137
	pushl	%eax
	leal	2555928(%esi), %eax
	pushl	$103
	addl	$8, %esi
	pushl	%eax
	call	_setSegmdesc
	addl	$16, %esp
	decl	%ebx
	jns	L94
	movl	_processctl, %ecx
	xorl	%edx, %edx
	movl	$9, %ebx
L99:
	leal	(%ecx,%edx), %eax
	addl	$408, %edx
	decl	%ebx
	movl	$0, 8(%eax)
	movl	$0, 12(%eax)
	jns	L99
	call	_processAlloc
	movl	%eax, %esi
	movl	$2, 4(%eax)
	movl	$2, 12(%eax)
	movl	$0, 8(%eax)
	pushl	%eax
	call	_processAdd
	call	_processSwitchSub
	pushl	(%esi)
	call	_loadTr
	call	_timerAlloc
	pushl	$2
	movl	%eax, _mpTimer
	pushl	%eax
	call	_timerSetTime
	call	_processAlloc
	pushl	$65536
	pushl	8(%ebp)
	movl	%eax, %ebx
	call	_memsegAlloc4K
	addl	$65536, %eax
	movl	%eax, 100(%ebx)
	movl	$_processIdle, 76(%ebx)
	movl	$8, 116(%ebx)
	movl	$16, 120(%ebx)
	movl	$8, 124(%ebx)
	movl	$8, 128(%ebx)
	movl	$8, 132(%ebx)
	movl	$8, 136(%ebx)
	pushl	$1
	pushl	$9
	pushl	%ebx
	call	_processRun
	leal	-12(%ebp), %esp
	popl	%ebx
	movl	%esi, %eax
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _processAlloc
	.def	_processAlloc;	.scl	2;	.type	32;	.endef
_processAlloc:
	pushl	%ebp
	xorl	%ecx, %ecx
	movl	%esp, %ebp
	xorl	%edx, %edx
L110:
	movl	%edx, %eax
	addl	_processctl, %eax
	cmpl	$0, 4092(%eax)
	je	L113
	incl	%ecx
	addl	$148, %edx
	cmpl	$999, %ecx
	jle	L110
	xorl	%eax, %eax
L104:
	popl	%ebp
	ret
L113:
	addl	$4088, %eax
	movl	$1, 4(%eax)
	movl	$514, 80(%eax)
	movl	$0, 84(%eax)
	movl	$0, 88(%eax)
	movl	$0, 92(%eax)
	movl	$0, 96(%eax)
	movl	$0, 104(%eax)
	movl	$0, 108(%eax)
	movl	$0, 112(%eax)
	movl	$0, 116(%eax)
	movl	$0, 128(%eax)
	movl	$0, 132(%eax)
	movl	$0, 136(%eax)
	movl	$0, 140(%eax)
	movl	$1073741824, 144(%eax)
	movl	$0, 52(%eax)
	jmp	L104
	.balign 2
.globl _processRun
	.def	_processRun;	.scl	2;	.type	32;	.endef
_processRun:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	12(%ebp), %esi
	movl	16(%ebp), %eax
	movl	8(%ebp), %ebx
	testl	%esi, %esi
	js	L119
L115:
	testl	%eax, %eax
	jle	L116
	movl	%eax, 12(%ebx)
L116:
	cmpl	$2, 4(%ebx)
	je	L120
L117:
	cmpl	$2, 4(%ebx)
	je	L118
	movl	%esi, 8(%ebx)
	pushl	%ebx
	call	_processAdd
	popl	%ecx
L118:
	movl	_processctl, %eax
	movb	$1, 4(%eax)
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L120:
	cmpl	%esi, 8(%ebx)
	je	L117
	pushl	%ebx
	call	_processRemove
	popl	%eax
	jmp	L117
L119:
	movl	8(%ebx), %esi
	jmp	L115
	.balign 2
.globl _processSwitch
	.def	_processSwitch;	.scl	2;	.type	32;	.endef
_processSwitch:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	_processctl, %ebx
	movl	(%ebx), %edx
	imull	$408, %edx, %edx
	leal	(%edx,%ebx), %edx
	leal	8(%edx), %ecx
	movl	4(%ecx), %eax
	movl	8(%ecx,%eax,4), %esi
	incl	%eax
	movl	%eax, 4(%ecx)
	cmpl	8(%edx), %eax
	je	L125
L122:
	cmpb	$0, 4(%ebx)
	jne	L126
L123:
	movl	4(%ecx), %eax
	movl	8(%ecx,%eax,4), %ebx
	pushl	12(%ebx)
	pushl	_mpTimer
	call	_timerSetTime
	cmpl	%esi, %ebx
	popl	%ecx
	popl	%eax
	je	L121
	pushl	(%ebx)
	pushl	$0
	call	_farJmp
	popl	%eax
	popl	%edx
L121:
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L126:
	call	_processSwitchSub
	movl	_processctl, %edx
	movl	(%edx), %eax
	imull	$408, %eax, %eax
	leal	8(%eax,%edx), %ecx
	jmp	L123
L125:
	movl	$0, 4(%ecx)
	jmp	L122
	.balign 2
.globl _processSleep
	.def	_processSleep;	.scl	2;	.type	32;	.endef
_processSleep:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	8(%ebp), %esi
	cmpl	$2, 4(%esi)
	je	L130
L127:
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L130:
	call	_processNow
	pushl	%esi
	movl	%eax, %ebx
	call	_processRemove
	popl	%ecx
	cmpl	%ebx, %esi
	jne	L127
	call	_processSwitchSub
	call	_processNow
	pushl	(%eax)
	pushl	$0
	call	_farJmp
	popl	%eax
	popl	%edx
	jmp	L127
	.balign 2
.globl _makeTextBox
	.def	_makeTextBox;	.scl	2;	.type	32;	.endef
_makeTextBox:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$20, %esp
	movl	12(%ebp), %eax
	movl	16(%ebp), %esi
	addl	20(%ebp), %eax
	subl	$3, %esi
	pushl	%esi
	movl	%eax, -16(%ebp)
	movl	16(%ebp), %eax
	addl	24(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-16(%ebp), %eax
	incl	%eax
	pushl	%eax
	movl	%eax, -24(%ebp)
	movl	12(%ebp), %eax
	pushl	%esi
	subl	$2, %eax
	pushl	%eax
	movl	%eax, -28(%ebp)
	movl	8(%ebp), %eax
	pushl	$15
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	movl	12(%ebp), %edi
	movl	-20(%ebp), %eax
	subl	$3, %edi
	incl	%eax
	pushl	%eax
	movl	%eax, -32(%ebp)
	pushl	%edi
	movl	8(%ebp), %eax
	pushl	%esi
	pushl	%edi
	pushl	$15
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	movl	8(%ebp), %eax
	addl	$56, %esp
	movl	-20(%ebp), %ebx
	addl	$2, %ebx
	pushl	%ebx
	pushl	-24(%ebp)
	pushl	%ebx
	pushl	%edi
	pushl	$7
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	movl	-16(%ebp), %eax
	pushl	%ebx
	addl	$2, %eax
	pushl	%eax
	pushl	%esi
	pushl	%eax
	movl	8(%ebp), %eax
	pushl	$7
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	movl	8(%ebp), %eax
	addl	$56, %esp
	movl	16(%ebp), %ebx
	subl	$2, %ebx
	movl	12(%ebp), %edi
	pushl	%ebx
	decl	%edi
	pushl	-16(%ebp)
	pushl	%ebx
	pushl	%edi
	pushl	$0
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	movl	8(%ebp), %eax
	pushl	-20(%ebp)
	pushl	-28(%ebp)
	pushl	%ebx
	pushl	-28(%ebp)
	pushl	$0
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	movl	8(%ebp), %eax
	addl	$56, %esp
	pushl	-32(%ebp)
	pushl	-16(%ebp)
	pushl	-32(%ebp)
	pushl	-28(%ebp)
	pushl	$8
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	movl	8(%ebp), %eax
	pushl	-32(%ebp)
	pushl	-24(%ebp)
	pushl	%ebx
	pushl	-24(%ebp)
	pushl	$8
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	movl	16(%ebp), %eax
	addl	$56, %esp
	decl	%eax
	pushl	-20(%ebp)
	pushl	-16(%ebp)
	pushl	%eax
	pushl	%edi
	movzbl	28(%ebp), %eax
	pushl	%eax
	movl	8(%ebp), %eax
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.data
_closeBtn.0:
	.ascii "OOOOOOOOOOOOOOO@"
	.ascii "OQQQQQQQQQQQQQ$@"
	.ascii "OQQQQQQQQQQQQQ$@"
	.ascii "OQQQ@@QQQQ@@QQ$@"
	.ascii "OQQQQ@@QQ@@QQQ$@"
	.ascii "OQQQQQ@@@@QQQQ$@"
	.ascii "OQQQQQQ@@QQQQQ$@"
	.ascii "OQQQQQ@@@@QQQQ$@"
	.ascii "OQQQQ@@QQ@@QQQ$@"
	.ascii "OQQQ@@QQQQ@@QQ$@"
	.ascii "OQQQQQQQQQQQQQ$@"
	.ascii "OQQQQQQQQQQQQQ$@"
	.ascii "O$$$$$$$$$$$$$$@"
	.ascii "@@@@@@@@@@@@@@@@"
	.text
	.balign 2
.globl _makeWindowTitle
	.def	_makeWindowTitle;	.scl	2;	.type	32;	.endef
_makeWindowTitle:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%ebx
	cmpb	$0, 20(%ebp)
	je	L133
	movb	$7, %bl
	movb	$12, %dl
L134:
	movl	12(%ebp), %eax
	pushl	$20
	subl	$4, %eax
	xorl	%edi, %edi
	pushl	%eax
	pushl	$3
	pushl	$3
	movzbl	%dl, %eax
	pushl	%eax
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	pushl	16(%ebp)
	movsbl	%bl,%eax
	pushl	%eax
	pushl	$4
	pushl	$24
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_putFont8_asc
	addl	$52, %esp
	imull	$5, 12(%ebp), %ebx
	movl	$0, -16(%ebp)
L150:
	movl	12(%ebp), %eax
	movl	8(%ebp), %edx
	addl	%ebx, %eax
	xorl	%esi, %esi
	leal	-21(%edx,%eax), %ecx
L149:
	movb	_closeBtn.0(%esi,%edi), %dl
	cmpb	$64, %dl
	je	L155
	cmpb	$36, %dl
	je	L156
	cmpb	$81, %dl
	movb	$8, %dl
	setne	%al
	subb	%al, %dl
L144:
	incl	%esi
	movb	%dl, (%ecx)
	incl	%ecx
	cmpl	$15, %esi
	jle	L149
	incl	-16(%ebp)
	addl	$16, %edi
	addl	12(%ebp), %ebx
	cmpl	$13, -16(%ebp)
	jle	L150
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L156:
	movb	$15, %dl
	jmp	L144
L155:
	xorl	%edx, %edx
	jmp	L144
L133:
	movb	$8, %bl
	movb	$15, %dl
	jmp	L134
	.balign 2
.globl _makeWindow
	.def	_makeWindow;	.scl	2;	.type	32;	.endef
_makeWindow:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$24, %esp
	movl	16(%ebp), %eax
	movl	12(%ebp), %ebx
	movl	%eax, -16(%ebp)
	movl	8(%ebp), %esi
	movl	20(%ebp), %eax
	movl	%eax, -20(%ebp)
	movsbl	24(%ebp),%eax
	movl	%eax, -24(%ebp)
	leal	-1(%ebx), %eax
	pushl	$0
	movl	%eax, -28(%ebp)
	pushl	%eax
	pushl	$0
	pushl	$0
	pushl	$8
	pushl	%ebx
	pushl	%esi
	call	_boxFill8
	leal	-2(%ebx), %eax
	pushl	$1
	movl	%eax, -32(%ebp)
	pushl	%eax
	pushl	$1
	pushl	$1
	pushl	$7
	pushl	%ebx
	pushl	%esi
	call	_boxFill8
	movl	-16(%ebp), %eax
	addl	$56, %esp
	decl	%eax
	movl	%eax, -36(%ebp)
	pushl	%eax
	pushl	$0
	pushl	$0
	pushl	$0
	pushl	$8
	pushl	%ebx
	pushl	%esi
	call	_boxFill8
	movl	-16(%ebp), %edi
	subl	$2, %edi
	pushl	%edi
	pushl	$1
	pushl	$1
	pushl	$1
	pushl	$7
	pushl	%ebx
	pushl	%esi
	call	_boxFill8
	addl	$56, %esp
	pushl	%edi
	pushl	-32(%ebp)
	pushl	$1
	pushl	-32(%ebp)
	pushl	$15
	pushl	%ebx
	pushl	%esi
	call	_boxFill8
	pushl	-36(%ebp)
	pushl	-28(%ebp)
	pushl	$0
	pushl	-28(%ebp)
	pushl	$0
	pushl	%ebx
	pushl	%esi
	call	_boxFill8
	movl	-16(%ebp), %eax
	addl	$56, %esp
	subl	$3, %eax
	pushl	%eax
	leal	-3(%ebx), %eax
	pushl	%eax
	pushl	$2
	pushl	$2
	pushl	$8
	pushl	%ebx
	pushl	%esi
	call	_boxFill8
	pushl	%edi
	pushl	-32(%ebp)
	pushl	%edi
	pushl	$1
	pushl	$15
	pushl	%ebx
	pushl	%esi
	call	_boxFill8
	addl	$56, %esp
	pushl	-36(%ebp)
	pushl	-28(%ebp)
	pushl	-36(%ebp)
	pushl	$0
	pushl	$0
	pushl	%ebx
	pushl	%esi
	call	_boxFill8
	movl	%esi, 8(%ebp)
	movl	-24(%ebp), %eax
	movl	%ebx, 12(%ebp)
	movl	%eax, 20(%ebp)
	addl	$28, %esp
	movl	-20(%ebp), %eax
	movl	%eax, 16(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_makeWindowTitle
	.balign 2
.globl _consoleNewLine
	.def	_consoleNewLine;	.scl	2;	.type	32;	.endef
_consoleNewLine:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%esi
	movl	8(%ebp), %eax
	movl	8(%ebp), %edx
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	8(%edx), %eax
	cmpl	$139, %eax
	jg	L159
	addl	$16, %eax
	movl	%eax, 8(%edx)
L160:
	movl	8(%ebp), %eax
	movl	$8, 4(%eax)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L159:
	movl	$28, %edi
L170:
	movl	$8, %esi
L169:
	movl	-16(%ebp), %eax
	movl	%edi, %edx
	movl	4(%eax), %ecx
	movl	(%eax), %ebx
	leal	16(%edi), %eax
	imull	%ecx, %eax
	imull	%ecx, %edx
	leal	(%eax,%esi), %eax
	leal	(%edx,%esi), %edx
	incl	%esi
	movb	(%eax,%ebx), %al
	cmpl	$247, %esi
	movb	%al, (%edx,%ebx)
	jle	L169
	incl	%edi
	cmpl	$139, %edi
	jle	L170
	movl	$140, %edi
L180:
	movl	$8, %esi
L179:
	movl	-16(%ebp), %edx
	movl	%edi, %eax
	movl	%edx, %ecx
	imull	4(%edx), %eax
	movl	(%edx), %edx
	leal	(%eax,%esi), %eax
	incl	%esi
	cmpl	$247, %esi
	movb	$0, (%eax,%edx)
	jle	L179
	incl	%edi
	cmpl	$155, %edi
	jle	L180
	pushl	$156
	pushl	$248
	pushl	$28
	pushl	$8
	pushl	%ecx
	call	_sheetRefresh
	addl	$20, %esp
	jmp	L160
	.data
LC0:
	.ascii " \0"
	.text
	.balign 2
.globl _consolePutchar
	.def	_consolePutchar;	.scl	2;	.type	32;	.endef
_consolePutchar:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	pushl	%eax
	movl	12(%ebp), %eax
	movb	16(%ebp), %dl
	movl	8(%ebp), %ebx
	movb	%dl, -7(%ebp)
	movb	%al, -6(%ebp)
	cmpb	$9, %al
	movb	$0, -5(%ebp)
	je	L191
	cmpb	$10, %al
	je	L203
	cmpb	$13, %al
	je	L189
	pushl	$1
	leal	-6(%ebp), %eax
	pushl	%eax
	pushl	$0
	pushl	$7
	pushl	8(%ebx)
	pushl	4(%ebx)
	pushl	(%ebx)
	call	_putFont8AscSheet
	addl	$28, %esp
	cmpb	$0, -7(%ebp)
	je	L189
	movl	4(%ebx), %eax
	addl	$8, %eax
	movl	%eax, 4(%ebx)
	cmpl	$248, %eax
	je	L203
L189:
	movl	-4(%ebp), %ebx
	leave
	ret
L203:
	pushl	%ebx
	call	_consoleNewLine
	popl	%eax
	jmp	L189
L191:
	pushl	$1
	pushl	$LC0
	pushl	$0
	pushl	$7
	pushl	8(%ebx)
	pushl	4(%ebx)
	pushl	(%ebx)
	call	_putFont8AscSheet
	addl	$28, %esp
	movl	4(%ebx), %eax
	addl	$8, %eax
	movl	%eax, 4(%ebx)
	cmpl	$248, %eax
	je	L204
L194:
	movl	4(%ebx), %eax
	subl	$8, %eax
	andl	$31, %eax
	jne	L191
	jmp	L189
L204:
	pushl	%ebx
	call	_consoleNewLine
	popl	%eax
	jmp	L194
	.balign 2
.globl _consolePutstr0
	.def	_consolePutstr0;	.scl	2;	.type	32;	.endef
_consolePutstr0:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	12(%ebp), %ebx
	movl	8(%ebp), %esi
	cmpb	$0, (%ebx)
	jne	L210
L212:
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L210:
	pushl	$1
	movsbl	(%ebx),%eax
	pushl	%eax
	incl	%ebx
	pushl	%esi
	call	_consolePutchar
	addl	$12, %esp
	cmpb	$0, (%ebx)
	jne	L210
	jmp	L212
	.balign 2
.globl _consolePutstr1
	.def	_consolePutstr1;	.scl	2;	.type	32;	.endef
_consolePutstr1:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	movl	16(%ebp), %esi
	xorl	%ebx, %ebx
	movl	12(%ebp), %edi
	cmpl	%esi, %ebx
	jl	L218
L220:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L218:
	pushl	$1
	movsbl	(%ebx,%edi),%eax
	pushl	%eax
	incl	%ebx
	pushl	8(%ebp)
	call	_consolePutchar
	addl	$12, %esp
	cmpl	%esi, %ebx
	jl	L218
	jmp	L220
	.data
LC1:
	.ascii "memory %dMB free : %dKB\12\12\0"
	.text
	.balign 2
.globl _cmdMem
	.def	_cmdMem;	.scl	2;	.type	32;	.endef
_cmdMem:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$32, %esp
	movl	12(%ebp), %ebx
	shrl	$20, %ebx
	pushl	$3932160
	call	_memsegTotal
	shrl	$10, %eax
	movl	%eax, (%esp)
	pushl	%ebx
	pushl	$LC1
	leal	-36(%ebp), %ebx
	pushl	%ebx
	call	_sprintf
	pushl	%ebx
	pushl	8(%ebp)
	call	_consolePutstr0
	movl	-4(%ebp), %ebx
	leave
	ret
	.balign 2
.globl _cmdCls
	.def	_cmdCls;	.scl	2;	.type	32;	.endef
_cmdCls:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	$28, %ebx
	movl	8(%ebp), %esi
L232:
	movl	$8, %ecx
L231:
	movl	(%esi), %eax
	movl	%ebx, %edx
	imull	4(%eax), %edx
	movl	(%eax), %eax
	leal	(%edx,%ecx), %edx
	incl	%ecx
	cmpl	$247, %ecx
	movb	$0, (%edx,%eax)
	jle	L231
	incl	%ebx
	cmpl	$155, %ebx
	jle	L232
	pushl	$156
	pushl	$248
	pushl	$28
	pushl	$8
	pushl	(%esi)
	call	_sheetRefresh
	movl	$28, 8(%esi)
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
	.data
LC2:
	.ascii "fileName.ext    %7d\12\0"
	.text
	.balign 2
.globl _cmdDir
	.def	_cmdDir;	.scl	2;	.type	32;	.endef
_cmdDir:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%esi, %esi
	pushl	%ebx
	xorl	%ebx, %ebx
	subl	$32, %esp
	movl	8(%ebp), %edi
L255:
	movb	1058304(%ebx), %al
	testb	%al, %al
	je	L239
	cmpb	$-27, %al
	je	L240
	testb	$24, 1058315(%ebx)
	je	L261
L240:
	incl	%esi
	addl	$32, %ebx
	cmpl	$243, %esi
	jle	L255
L239:
	pushl	%edi
	call	_consoleNewLine
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L261:
	pushl	1058332(%ebx)
	pushl	$LC2
	leal	-44(%ebp), %eax
	pushl	%eax
	call	_sprintf
	leal	1058304(%ebx), %edx
	xorl	%ecx, %ecx
	addl	$12, %esp
L249:
	movb	(%edx), %al
	incl	%edx
	movb	%al, -44(%ebp,%ecx)
	incl	%ecx
	cmpl	$7, %ecx
	jle	L249
	xorl	%ecx, %ecx
L254:
	movb	1058312(%ebx,%ecx), %al
	movb	%al, -35(%ebp,%ecx)
	incl	%ecx
	cmpl	$2, %ecx
	jle	L254
	leal	-44(%ebp), %eax
	pushl	%eax
	pushl	%edi
	call	_consolePutstr0
	popl	%eax
	popl	%edx
	jmp	L240
	.data
LC3:
	.ascii "file not found\12\0"
	.text
	.balign 2
.globl _cmdType
	.def	_cmdType;	.scl	2;	.type	32;	.endef
_cmdType:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%esi
	movl	12(%ebp), %eax
	movl	8(%ebp), %edi
	movl	%eax, -16(%ebp)
	pushl	$224
	pushl	$1058304
	movl	16(%ebp), %eax
	addl	$5, %eax
	pushl	%eax
	call	_searchFile
	addl	$12, %esp
	movl	%eax, %esi
	testl	%eax, %eax
	je	L263
	pushl	28(%eax)
	pushl	$3932160
	call	_memsegAlloc4K
	pushl	$1064448
	pushl	-16(%ebp)
	pushl	%eax
	movl	%eax, %ebx
	pushl	28(%esi)
	movzwl	26(%esi), %eax
	pushl	%eax
	call	_loadFile
	pushl	28(%esi)
	pushl	%ebx
	pushl	%edi
	call	_consolePutstr1
	addl	$40, %esp
	pushl	28(%esi)
	pushl	%ebx
	pushl	$3932160
	call	_memsegFree4K
	addl	$12, %esp
L264:
	movl	%edi, 8(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_consoleNewLine
L263:
	pushl	$LC3
	pushl	%edi
	call	_consolePutstr0
	popl	%ecx
	popl	%ebx
	jmp	L264
	.data
LC4:
	.ascii "Hari\0"
LC5:
	.ascii ".hrb file format error\12\0"
	.text
	.balign 2
.globl _cmdApp
	.def	_cmdApp;	.scl	2;	.type	32;	.endef
_cmdApp:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	xorl	%ebx, %ebx
	subl	$56, %esp
	movl	16(%ebp), %esi
	call	_processNow
	movl	%eax, -52(%ebp)
L271:
	movb	(%ebx,%esi), %al
	cmpb	$32, %al
	jle	L267
	movb	%al, -44(%ebp,%ebx)
	incl	%ebx
	cmpl	$12, %ebx
	jle	L271
L267:
	pushl	$224
	leal	-44(%ebp), %esi
	pushl	$1058304
	pushl	%esi
	movb	$0, -44(%ebp,%ebx)
	call	_searchFile
	addl	$12, %esp
	testl	%eax, %eax
	movl	%eax, -48(%ebp)
	je	L293
L292:
	movl	-48(%ebp), %eax
	pushl	28(%eax)
	pushl	$3932160
	call	_memsegAlloc4K
	movl	-48(%ebp), %edx
	pushl	$1064448
	pushl	12(%ebp)
	pushl	%eax
	movl	%eax, -68(%ebp)
	pushl	28(%edx)
	movzwl	26(%edx), %eax
	pushl	%eax
	call	_loadFile
	movl	-48(%ebp), %edi
	addl	$28, %esp
	cmpl	$35, 28(%edi)
	jbe	L274
	movl	-68(%ebp), %esi
	movl	$LC4, %eax
	cld
	addl	$4, %esi
	movl	$4, %ecx
	movl	%eax, %edi
	repe
	cmpsb
	jne	L274
	movl	-68(%ebp), %eax
	cmpb	$0, (%eax)
	je	L294
L274:
	pushl	$LC5
	pushl	8(%ebp)
	call	_consolePutstr0
	popl	%edi
	popl	%eax
L286:
	movl	-48(%ebp), %edx
	pushl	28(%edx)
	pushl	-68(%ebp)
	pushl	$3932160
	call	_memsegFree4K
	pushl	8(%ebp)
	call	_consoleNewLine
	movl	$1, %eax
L265:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L294:
	movl	(%eax), %edx
	movl	12(%eax), %edi
	movl	16(%eax), %ebx
	movl	20(%eax), %esi
	pushl	%edx
	movl	%edx, -60(%ebp)
	pushl	$3932160
	movl	%edi, -64(%ebp)
	call	_memsegAlloc4K
	movl	-48(%ebp), %edx
	movl	%eax, 4072
	pushl	$16634
	pushl	-68(%ebp)
	movl	%eax, -56(%ebp)
	movl	28(%edx), %eax
	decl	%eax
	pushl	%eax
	pushl	$2563928
	call	_setSegmdesc
	movl	-60(%ebp), %eax
	pushl	$16626
	decl	%eax
	pushl	-56(%ebp)
	pushl	%eax
	pushl	$2563936
	call	_setSegmdesc
	addl	$40, %esp
	testl	%ebx, %ebx
	jle	L289
	movl	%edi, %ecx
	movl	-68(%ebp), %edi
	addl	-56(%ebp), %ecx
	leal	(%edi,%esi), %edx
L279:
	movb	(%edx), %al
	incl	%edx
	movb	%al, (%ecx)
	incl	%ecx
	decl	%ebx
	jne	L279
L289:
	movl	-52(%ebp), %eax
	movl	$255, %ebx
	addl	$48, %eax
	pushl	%eax
	pushl	$8032
	pushl	-64(%ebp)
	pushl	$8024
	pushl	$27
	call	_startApp
	movl	4068, %esi
	addl	$20, %esp
	addl	$1044, %esi
L285:
	cmpl	$0, 28(%esi)
	je	L282
	movl	-52(%ebp), %eax
	cmpl	%eax, 36(%esi)
	je	L295
L282:
	addl	$40, %esi
	decl	%ebx
	jns	L285
	pushl	-60(%ebp)
	pushl	-56(%ebp)
	pushl	$3932160
	call	_memsegFree4K
	addl	$12, %esp
	jmp	L286
L295:
	pushl	%esi
	call	_sheetFree
	popl	%eax
	jmp	L282
L293:
	cmpb	$46, -45(%ebp,%ebx)
	je	L272
	pushl	$224
	pushl	$1058304
	pushl	%esi
	movb	$46, -44(%ebp,%ebx)
	movb	$72, -43(%ebp,%ebx)
	movb	$82, -42(%ebp,%ebx)
	movb	$66, -41(%ebp,%ebx)
	movb	$0, -40(%ebp,%ebx)
	call	_searchFile
	addl	$12, %esp
	movl	%eax, -48(%ebp)
L272:
	cmpl	$0, -48(%ebp)
	jne	L292
	xorl	%eax, %eax
	jmp	L265
	.data
LC6:
	.ascii "mem\0"
LC7:
	.ascii "cls\0"
LC8:
	.ascii "dir\0"
LC9:
	.ascii "type \0"
LC10:
	.ascii "command not found\12\12\0"
	.text
	.balign 2
.globl _consoleRunCmd
	.def	_consoleRunCmd;	.scl	2;	.type	32;	.endef
_consoleRunCmd:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	movl	$LC6, %edi
	pushl	%ebx
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	16(%ebp), %ecx
	movl	%eax, -24(%ebp)
	movl	%ecx, -16(%ebp)
	movl	20(%ebp), %eax
	movl	-24(%ebp), %esi
	movl	%eax, -20(%ebp)
	movl	12(%ebp), %ebx
	movl	$4, %eax
	cld
	movl	%eax, %ecx
	repe
	cmpsb
	je	L307
	movl	$4, %eax
	movl	-24(%ebp), %esi
	cld
	movl	$LC7, %edi
	movl	%eax, %ecx
	repe
	cmpsb
	je	L308
	movl	$4, %eax
	movl	-24(%ebp), %esi
	cld
	movl	$LC8, %edi
	movl	%eax, %ecx
	repe
	cmpsb
	je	L309
	movl	$5, %eax
	movl	-24(%ebp), %esi
	cld
	movl	$LC9, %edi
	movl	%eax, %ecx
	repe
	cmpsb
	je	L310
	movl	-24(%ebp), %eax
	cmpb	$0, (%eax)
	jne	L311
L296:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L311:
	pushl	%eax
	pushl	-16(%ebp)
	pushl	%ebx
	call	_cmdApp
	addl	$12, %esp
	testl	%eax, %eax
	jne	L296
	movl	$LC10, 12(%ebp)
	movl	%ebx, 8(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_consolePutstr0
L310:
	movl	-24(%ebp), %eax
	movl	-16(%ebp), %ecx
	movl	%eax, 16(%ebp)
	movl	%ecx, 12(%ebp)
	movl	%ebx, 8(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_cmdType
L309:
	movl	%ebx, 8(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_cmdDir
L308:
	movl	%ebx, 8(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_cmdCls
L307:
	movl	-20(%ebp), %eax
	movl	%ebx, 8(%ebp)
	movl	%eax, 12(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_cmdMem
	.balign 2
.globl _consoleMain
	.def	_consoleMain;	.scl	2;	.type	32;	.endef
_consoleMain:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	leal	-556(%ebp), %esi
	subl	$580, %esp
	call	_processNow
	pushl	$11520
	movl	%eax, %edi
	pushl	$3932160
	leal	16(%edi), %ebx
	call	_memsegAlloc4K
	movl	$28, -548(%ebp)
	movl	%eax, -592(%ebp)
	movl	8(%ebp), %eax
	movl	%eax, -556(%ebp)
	leal	-524(%ebp), %eax
	movl	$8, -552(%ebp)
	movl	$-1, -544(%ebp)
	movl	%esi, 4076
	pushl	%edi
	pushl	%eax
	pushl	$128
	pushl	%ebx
	call	_QueueInit
	call	_timerAlloc
	pushl	$1
	pushl	%ebx
	pushl	%eax
	movl	%eax, -540(%ebp)
	call	_timerInit
	addl	$36, %esp
	pushl	$50
	pushl	-540(%ebp)
	call	_timerSetTime
	pushl	$1049088
	pushl	-592(%ebp)
	call	_readFat
	pushl	$1
	pushl	$62
	pushl	%esi
	call	_consolePutchar
	addl	$28, %esp
L313:
	leal	16(%edi), %ebx
	call	_io_cli
	pushl	%ebx
	call	_QueueSize
	popl	%esi
	testl	%eax, %eax
	je	L335
	pushl	%ebx
	call	_QueuePop
	movl	%eax, %esi
	call	_io_sti
	popl	%ecx
	cmpl	$1, %esi
	jle	L336
L318:
	cmpl	$2, %esi
	je	L337
L323:
	cmpl	$3, %esi
	je	L338
L324:
	leal	-257(%esi), %eax
	cmpl	$254, %eax
	ja	L325
	cmpl	$264, %esi
	je	L339
	cmpl	$266, %esi
	je	L340
	movl	-552(%ebp), %ecx
	cmpl	$239, %ecx
	jg	L325
	movl	%ecx, %eax
	movl	$8, %edx
	movl	%edx, %ebx
	pushl	$1
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	movl	%esi, %eax
	movb	%al, -590(%ebp,%ecx)
	leal	-256(%esi), %eax
	pushl	%eax
	leal	-556(%ebp), %eax
	pushl	%eax
L333:
	call	_consolePutchar
L334:
	addl	$12, %esp
L325:
	cmpl	$0, -544(%ebp)
	js	L332
	movl	-548(%ebp), %ecx
	movl	-552(%ebp), %edx
	leal	15(%ecx), %eax
	pushl	%eax
	leal	7(%edx), %eax
	pushl	%eax
	pushl	%ecx
	movl	8(%ebp), %ecx
	pushl	%edx
	movzbl	-544(%ebp), %eax
	pushl	%eax
	pushl	4(%ecx)
	pushl	(%ecx)
	call	_boxFill8
	addl	$28, %esp
L332:
	movl	-548(%ebp), %ecx
	movl	-552(%ebp), %edx
	leal	16(%ecx), %eax
	pushl	%eax
	leal	8(%edx), %eax
	pushl	%eax
	pushl	%ecx
	pushl	%edx
	pushl	8(%ebp)
	call	_sheetRefresh
	addl	$20, %esp
	jmp	L313
L340:
	pushl	$0
	leal	-556(%ebp), %ebx
	pushl	$32
	pushl	%ebx
	call	_consolePutchar
	pushl	%ebx
	movl	-552(%ebp), %eax
	movl	$8, %edx
	movl	%edx, %ecx
	cltd
	idivl	%ecx
	movb	$0, -590(%ebp,%eax)
	call	_consoleNewLine
	leal	-588(%ebp), %eax
	pushl	12(%ebp)
	pushl	-592(%ebp)
	pushl	%ebx
	pushl	%eax
	call	_consoleRunCmd
	addl	$32, %esp
	pushl	$1
	pushl	$62
	pushl	%ebx
	jmp	L333
L339:
	cmpl	$16, -552(%ebp)
	jle	L325
	pushl	$0
	leal	-556(%ebp), %eax
	pushl	$32
	pushl	%eax
	call	_consolePutchar
	subl	$8, -552(%ebp)
	jmp	L334
L338:
	movl	-548(%ebp), %ecx
	movl	-552(%ebp), %edx
	leal	15(%ecx), %eax
	pushl	%eax
	leal	7(%edx), %eax
	pushl	%eax
	pushl	%ecx
	movl	8(%ebp), %ecx
	pushl	%edx
	pushl	$0
	pushl	4(%ecx)
	pushl	(%ecx)
	call	_boxFill8
	addl	$28, %esp
	movl	$-1, -544(%ebp)
	jmp	L324
L337:
	movl	$7, -544(%ebp)
	jmp	L323
L336:
	testl	%esi, %esi
	je	L319
	pushl	$0
	pushl	%ebx
	pushl	-540(%ebp)
	call	_timerInit
	addl	$12, %esp
	cmpl	$0, -544(%ebp)
	js	L321
	movl	$7, -544(%ebp)
L321:
	pushl	$50
	pushl	-540(%ebp)
	call	_timerSetTime
	popl	%eax
	popl	%edx
	jmp	L318
L319:
	pushl	$1
	pushl	%ebx
	pushl	-540(%ebp)
	call	_timerInit
	addl	$12, %esp
	cmpl	$0, -544(%ebp)
	js	L321
	movl	$0, -544(%ebp)
	jmp	L321
L335:
	pushl	%edi
	call	_processSleep
	call	_io_sti
	popl	%ebx
	jmp	L313
	.balign 2
.globl _dickApi
	.def	_dickApi;	.scl	2;	.type	32;	.endef
_dickApi:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%edi
	pushl	%edi
	movl	4076, %eax
	movl	28(%ebp), %ebx
	movl	4072, %edi
	movl	%eax, -16(%ebp)
	call	_processNow
	cmpl	$1, %ebx
	movl	%eax, -20(%ebp)
	movl	4068, %eax
	je	L392
	cmpl	$2, %ebx
	je	L393
	cmpl	$3, %ebx
	je	L394
	cmpl	$4, %ebx
	je	L395
	cmpl	$5, %ebx
	je	L396
	cmpl	$6, %ebx
	je	L397
	cmpl	$7, %ebx
	je	L398
	cmpl	$8, %ebx
	je	L399
	cmpl	$9, %ebx
	je	L400
	cmpl	$10, %ebx
	je	L401
	cmpl	$11, %ebx
	je	L402
	cmpl	$12, %ebx
	je	L403
	cmpl	$13, %ebx
	je	L404
	cmpl	$14, %ebx
	je	L405
	cmpl	$15, %ebx
	je	L375
L343:
	xorl	%eax, %eax
L341:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L375:
	call	_io_cli
	movl	-20(%ebp), %eax
	addl	$16, %eax
	pushl	%eax
	call	_QueueSize
	popl	%edx
	testl	%eax, %eax
	jne	L378
	cmpl	$0, 36(%ebp)
	je	L379
	pushl	-20(%ebp)
	call	_processSleep
	popl	%eax
L378:
	movl	-20(%ebp), %esi
	addl	$16, %esi
	pushl	%esi
	call	_QueuePop
	movl	%eax, %ebx
	call	_io_sti
	popl	%edi
	cmpl	$1, %ebx
	jle	L406
L381:
	cmpl	$2, %ebx
	je	L407
L382:
	cmpl	$3, %ebx
	je	L408
L383:
	leal	-256(%ebx), %eax
	cmpl	$255, %eax
	ja	L375
	movl	%eax, 68(%ebp)
	jmp	L343
L408:
	movl	-16(%ebp), %ecx
	movl	$-1, 12(%ecx)
	jmp	L383
L407:
	movl	-16(%ebp), %edx
	movl	$7, 12(%edx)
	jmp	L382
L406:
	pushl	$1
	movl	-16(%ebp), %ecx
	pushl	%esi
	pushl	16(%ecx)
	call	_timerInit
	movl	-16(%ebp), %eax
	pushl	$50
	pushl	16(%eax)
	call	_timerSetTime
	addl	$20, %esp
	jmp	L381
L379:
	call	_io_sti
	movl	$-1, 68(%ebp)
	jmp	L343
L405:
	pushl	24(%ebp)
	call	_sheetFree
	popl	%ecx
	jmp	L343
L404:
	pushl	16(%ebp)
	pushl	8(%ebp)
	pushl	12(%ebp)
	pushl	32(%ebp)
	movl	24(%ebp), %esi
	pushl	36(%ebp)
	andl	$-2, %esi
	pushl	%esi
	call	_dickApiLineWin
	addl	$24, %esp
L391:
	testl	$1, 24(%ebp)
	jne	L343
	movl	8(%ebp), %eax
	incl	%eax
	pushl	%eax
	movl	12(%ebp), %eax
	incl	%eax
	pushl	%eax
	pushl	32(%ebp)
	pushl	36(%ebp)
L389:
	pushl	%esi
L385:
	call	_sheetRefresh
L386:
	addl	$20, %esp
	jmp	L343
L403:
	pushl	8(%ebp)
	pushl	12(%ebp)
	pushl	32(%ebp)
	pushl	36(%ebp)
	pushl	24(%ebp)
	jmp	L385
L402:
	movl	24(%ebp), %esi
	movl	8(%ebp), %eax
	andl	$-2, %esi
	movb	36(%ebp), %dl
	imull	4(%esi), %eax
	addl	12(%ebp), %eax
	movl	(%esi), %ecx
	movb	%dl, (%eax,%ecx)
	testl	$1, 24(%ebp)
	jne	L343
	movl	8(%ebp), %eax
	incl	%eax
	pushl	%eax
	movl	12(%ebp), %eax
	incl	%eax
	pushl	%eax
	pushl	8(%ebp)
	pushl	12(%ebp)
	jmp	L389
L401:
	movl	32(%ebp), %eax
	addl	$15, %eax
	andl	$-16, %eax
	pushl	%eax
	movl	24(%ebp), %eax
	pushl	36(%ebp)
	addl	%edi, %eax
	pushl	%eax
	call	_memsegFree
L387:
	addl	$12, %esp
	jmp	L343
L400:
	movl	32(%ebp), %eax
	addl	$15, %eax
	andl	$-16, %eax
	pushl	%eax
	movl	24(%ebp), %eax
	addl	%edi, %eax
	pushl	%eax
	call	_memsegAlloc
	movl	%eax, 68(%ebp)
L388:
	popl	%ebx
	popl	%esi
	jmp	L343
L399:
	movl	24(%ebp), %ebx
	addl	%edi, %ebx
	pushl	%ebx
	call	_memsegInit
	andl	$-16, 32(%ebp)
	pushl	32(%ebp)
	pushl	36(%ebp)
	pushl	%ebx
	call	_memsegFree
	addl	$16, %esp
	jmp	L343
L398:
	pushl	8(%ebp)
	pushl	12(%ebp)
	pushl	32(%ebp)
	movl	24(%ebp), %esi
	pushl	36(%ebp)
	andl	$-2, %esi
	movzbl	16(%ebp), %eax
	pushl	%eax
	pushl	4(%esi)
	pushl	(%esi)
	call	_boxFill8
	addl	$28, %esp
	jmp	L391
L397:
	movl	16(%ebp), %eax
	movl	24(%ebp), %esi
	addl	%edi, %eax
	andl	$-2, %esi
	pushl	%eax
	movsbl	36(%ebp),%eax
	pushl	%eax
	pushl	8(%ebp)
	pushl	12(%ebp)
	pushl	4(%esi)
	pushl	(%esi)
	call	_putFont8_asc
	addl	$24, %esp
	testl	$1, 24(%ebp)
	jne	L343
	movl	12(%ebp), %edx
	movl	8(%ebp), %eax
	movl	32(%ebp), %ecx
	addl	$16, %eax
	pushl	%eax
	leal	(%edx,%ecx,8), %eax
	pushl	%eax
	pushl	8(%ebp)
	pushl	%edx
	jmp	L389
L396:
	pushl	%eax
	call	_sheetAlloc
	movl	24(%ebp), %ebx
	movl	-20(%ebp), %edx
	addl	%edi, %ebx
	movl	%edx, 36(%eax)
	movl	%eax, %esi
	pushl	36(%ebp)
	pushl	8(%ebp)
	pushl	12(%ebp)
	pushl	%ebx
	pushl	%eax
	call	_sheetSetbuf
	movl	32(%ebp), %eax
	pushl	$0
	addl	%edi, %eax
	pushl	%eax
	pushl	8(%ebp)
	pushl	12(%ebp)
	pushl	%ebx
	call	_makeWindow
	addl	$44, %esp
	pushl	$50
	pushl	$100
	pushl	%esi
	call	_sheetSlide
	pushl	$3
	pushl	%esi
	call	_sheetUpdown
	movl	%esi, 68(%ebp)
	jmp	L386
L395:
	movl	-20(%ebp), %eax
	addl	$48, %eax
	jmp	L341
L394:
	movl	24(%ebp), %eax
	pushl	32(%ebp)
	addl	%edi, %eax
	pushl	%eax
	pushl	-16(%ebp)
	call	_consolePutstr1
	jmp	L387
L393:
	movl	24(%ebp), %eax
	addl	%edi, %eax
	pushl	%eax
	pushl	-16(%ebp)
	call	_consolePutstr0
	jmp	L388
L392:
	pushl	$1
	movzbl	36(%ebp), %eax
	pushl	%eax
	pushl	-16(%ebp)
	call	_consolePutchar
	jmp	L387
	.balign 2
.globl _dickApiLineWin
	.def	_dickApiLineWin;	.scl	2;	.type	32;	.endef
_dickApiLineWin:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$12, %esp
	movl	12(%ebp), %ebx
	movl	20(%ebp), %eax
	movl	%ebx, %ecx
	movl	24(%ebp), %edx
	sall	$10, %ecx
	movl	%edx, %edi
	movl	%ecx, -16(%ebp)
	movl	%eax, %esi
	movl	16(%ebp), %ecx
	subl	16(%ebp), %edi
	sall	$10, %ecx
	subl	%ebx, %esi
	movl	%ecx, -20(%ebp)
	js	L431
L410:
	testl	%edi, %edi
	js	L432
L411:
	cmpl	%edi, %esi
	jl	L412
	leal	1(%esi), %ecx
	cmpl	%eax, %ebx
	movl	$-1024, %esi
	jg	L414
	movl	$1024, %esi
L414:
	cmpl	%edx, 16(%ebp)
	jg	L415
	subl	16(%ebp), %edx
	incl	%edx
L430:
	sall	$10, %edx
	movl	%edx, %eax
	cltd
	idivl	%ecx
	movl	%eax, %edi
L417:
	testl	%ecx, %ecx
	jle	L428
	movl	%ecx, %ebx
L426:
	movl	8(%ebp), %edx
	movl	-20(%ebp), %eax
	sarl	$10, %eax
	movl	-16(%ebp), %ecx
	imull	4(%edx), %eax
	sarl	$10, %ecx
	movl	%ecx, -24(%ebp)
	movl	(%edx), %ecx
	addl	-24(%ebp), %eax
	movb	28(%ebp), %dl
	movb	%dl, (%eax,%ecx)
	addl	%esi, -16(%ebp)
	addl	%edi, -20(%ebp)
	decl	%ebx
	jne	L426
L428:
	addl	$12, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L415:
	subl	16(%ebp), %edx
	decl	%edx
	jmp	L430
L412:
	leal	1(%edi), %ecx
	cmpl	%edx, 16(%ebp)
	movl	$-1024, %edi
	jg	L419
	movl	$1024, %edi
L419:
	cmpl	%eax, %ebx
	jg	L420
	subl	%ebx, %eax
	leal	1(%eax), %edx
L429:
	sall	$10, %edx
	movl	%edx, %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	jmp	L417
L420:
	subl	%ebx, %eax
	leal	-1(%eax), %edx
	jmp	L429
L432:
	negl	%edi
	jmp	L411
L431:
	negl	%esi
	jmp	L410
	.balign 2
.globl _init_pic
	.def	_init_pic;	.scl	2;	.type	32;	.endef
_init_pic:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$255
	pushl	$33
	call	_io_out8
	pushl	$255
	pushl	$161
	call	_io_out8
	pushl	$17
	pushl	$32
	call	_io_out8
	pushl	$32
	pushl	$33
	call	_io_out8
	addl	$32, %esp
	pushl	$4
	pushl	$33
	call	_io_out8
	pushl	$1
	pushl	$33
	call	_io_out8
	pushl	$17
	pushl	$160
	call	_io_out8
	pushl	$40
	pushl	$161
	call	_io_out8
	addl	$32, %esp
	pushl	$2
	pushl	$161
	call	_io_out8
	pushl	$1
	pushl	$161
	call	_io_out8
	pushl	$251
	pushl	$33
	call	_io_out8
	pushl	$255
	pushl	$161
	call	_io_out8
	leave
	ret
	.balign 2
.globl _interruptHandler21
	.def	_interruptHandler21;	.scl	2;	.type	32;	.endef
_interruptHandler21:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$97
	pushl	$32
	call	_io_out8
	pushl	$96
	call	_io_in8
	addl	_keyData0, %eax
	pushl	%eax
	pushl	_keybuf
	call	_QueuePush
	leave
	ret
	.balign 2
.globl _interruptHandler27
	.def	_interruptHandler27;	.scl	2;	.type	32;	.endef
_interruptHandler27:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$103
	pushl	$32
	call	_io_out8
	leave
	ret
	.balign 2
.globl _interruptHandler2c
	.def	_interruptHandler2c;	.scl	2;	.type	32;	.endef
_interruptHandler2c:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$100
	pushl	$160
	call	_io_out8
	pushl	$98
	pushl	$32
	call	_io_out8
	pushl	$96
	call	_io_in8
	addl	_mouseData0, %eax
	pushl	%eax
	pushl	_mousebuf
	call	_QueuePush
	leave
	ret
	.balign 2
.globl _interruptHandler20
	.def	_interruptHandler20;	.scl	2;	.type	32;	.endef
_interruptHandler20:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	xorl	%esi, %esi
	pushl	$96
	pushl	$32
	call	_io_out8
	movl	_timerctl, %eax
	incl	%eax
	movl	%eax, _timerctl
	cmpl	%eax, _timerctl+4
	popl	%ecx
	popl	%ebx
	ja	L437
	movl	_timerctl+8, %ebx
L439:
	movl	4(%ebx), %eax
	cmpl	_timerctl, %eax
	ja	L440
	movl	$1, 8(%ebx)
	cmpl	_mpTimer, %ebx
	je	L443
	movzbl	16(%ebx), %eax
	pushl	%eax
	pushl	12(%ebx)
	call	_QueuePush
	popl	%eax
	popl	%edx
L444:
	movl	(%ebx), %ebx
	jmp	L439
L443:
	movl	$1, %esi
	jmp	L444
L440:
	movl	%eax, _timerctl+4
	movl	%ebx, _timerctl+8
	movl	%esi, %eax
	testb	%al, %al
	jne	L446
L437:
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L446:
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	jmp	_processSwitch
	.data
LC11:
	.ascii "\12INT 0D :\12 General Protected Exception.\12\0"
LC12:
	.ascii "EIP = %08X\12\0"
	.text
	.balign 2
.globl _interruptHandler0d
	.def	_interruptHandler0d;	.scl	2;	.type	32;	.endef
_interruptHandler0d:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	leal	-44(%ebp), %ebx
	subl	$32, %esp
	movl	4076, %edi
	call	_processNow
	pushl	$LC11
	movl	%eax, %esi
	pushl	%edi
	addl	$48, %esi
	call	_consolePutstr0
	movl	8(%ebp), %eax
	pushl	44(%eax)
	pushl	$LC12
	pushl	%ebx
	call	_sprintf
	pushl	%ebx
	pushl	%edi
	call	_consolePutstr0
	leal	-12(%ebp), %esp
	popl	%ebx
	movl	%esi, %eax
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.data
LC13:
	.ascii "\12INT 0C :\12 Struct Exception.\12\0"
	.text
	.balign 2
.globl _interruptHandler0c
	.def	_interruptHandler0c;	.scl	2;	.type	32;	.endef
_interruptHandler0c:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	leal	-44(%ebp), %ebx
	subl	$32, %esp
	movl	4076, %edi
	call	_processNow
	pushl	$LC13
	movl	%eax, %esi
	pushl	%edi
	addl	$48, %esi
	call	_consolePutstr0
	movl	8(%ebp), %eax
	pushl	44(%eax)
	pushl	$LC12
	pushl	%ebx
	call	_sprintf
	pushl	%ebx
	pushl	%edi
	call	_consolePutstr0
	leal	-12(%ebp), %esp
	popl	%ebx
	movl	%esi, %eax
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _setSegmdesc
	.def	_setSegmdesc;	.scl	2;	.type	32;	.endef
_setSegmdesc:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	12(%ebp), %edx
	movl	16(%ebp), %ecx
	movl	8(%ebp), %ebx
	movl	20(%ebp), %eax
	cmpl	$1048575, %edx
	jbe	L450
	shrl	$12, %edx
	orl	$32768, %eax
L450:
	movw	%dx, (%ebx)
	movb	%al, 5(%ebx)
	shrl	$16, %edx
	sarl	$8, %eax
	andl	$15, %edx
	movw	%cx, 2(%ebx)
	andl	$-16, %eax
	sarl	$16, %ecx
	orl	%eax, %edx
	movb	%cl, 4(%ebx)
	movb	%dl, 6(%ebx)
	sarl	$8, %ecx
	movb	%cl, 7(%ebx)
	popl	%ebx
	popl	%ebp
	ret
	.balign 2
.globl _setGatedesc
	.def	_setGatedesc;	.scl	2;	.type	32;	.endef
_setGatedesc:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	8(%ebp), %edx
	movl	16(%ebp), %eax
	movl	20(%ebp), %ebx
	movl	12(%ebp), %ecx
	movw	%ax, 2(%edx)
	movb	%bl, 5(%edx)
	movw	%cx, (%edx)
	movl	%ebx, %eax
	sarl	$8, %eax
	sarl	$16, %ecx
	movb	%al, 4(%edx)
	movw	%cx, 6(%edx)
	popl	%ebx
	popl	%ebp
	ret
	.balign 2
.globl _initGdtit
	.def	_initGdtit;	.scl	2;	.type	32;	.endef
_initGdtit:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	$2555904, %esi
	movl	$8191, %ebx
L457:
	pushl	$0
	pushl	$0
	pushl	$0
	pushl	%esi
	addl	$8, %esi
	call	_setSegmdesc
	addl	$16, %esp
	decl	%ebx
	jns	L457
	pushl	$16530
	movl	$255, %ebx
	pushl	$0
	pushl	$-1
	pushl	$2555912
	call	_setSegmdesc
	pushl	$16538
	pushl	$2621440
	pushl	$524287
	pushl	$2555920
	call	_setSegmdesc
	addl	$32, %esp
	pushl	$2555904
	pushl	$65535
	call	_loadGdtr
	popl	%esi
	popl	%eax
	movl	$2553856, %esi
L462:
	pushl	$0
	pushl	$0
	pushl	$0
	pushl	%esi
	addl	$8, %esi
	call	_setGatedesc
	addl	$16, %esp
	decl	%ebx
	jns	L462
	pushl	$2553856
	pushl	$2047
	call	_loadIdtr
	pushl	$142
	pushl	$16
	pushl	$_asm_interruptHandler0c
	pushl	$2553952
	call	_setGatedesc
	pushl	$142
	pushl	$16
	pushl	$_asm_interruptHandler0d
	pushl	$2553960
	call	_setGatedesc
	addl	$40, %esp
	pushl	$142
	pushl	$16
	pushl	$_asm_interruptHandler20
	pushl	$2554112
	call	_setGatedesc
	pushl	$142
	pushl	$16
	pushl	$_asm_interruptHandler21
	pushl	$2554120
	call	_setGatedesc
	addl	$32, %esp
	pushl	$142
	pushl	$16
	pushl	$_asm_interruptHandler27
	pushl	$2554168
	call	_setGatedesc
	pushl	$142
	pushl	$16
	pushl	$_asm_interruptHandler2c
	pushl	$2554208
	call	_setGatedesc
	addl	$32, %esp
	pushl	$238
	pushl	$16
	pushl	$_asm_dickApi
	pushl	$2554368
	call	_setGatedesc
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
	.balign 2
.globl _set_palette
	.def	_set_palette;	.scl	2;	.type	32;	.endef
_set_palette:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%ecx
	movl	8(%ebp), %ebx
	movl	12(%ebp), %edi
	movl	16(%ebp), %esi
	call	_io_load_eflags
	movl	%eax, -16(%ebp)
	call	_io_cli
	pushl	%ebx
	pushl	$968
	call	_io_out8
	cmpl	%edi, %ebx
	popl	%eax
	popl	%edx
	jge	L474
	subl	%ebx, %edi
	movl	%edi, %ebx
L472:
	movb	(%esi), %al
	shrb	$2, %al
	movzbl	%al, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	movb	1(%esi), %al
	shrb	$2, %al
	movzbl	%al, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	movb	2(%esi), %al
	shrb	$2, %al
	addl	$3, %esi
	movzbl	%al, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	addl	$24, %esp
	decl	%ebx
	jne	L472
L474:
	movl	-16(%ebp), %eax
	movl	%eax, 8(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_io_store_eflags
	.data
_table_rgb.1:
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	0
	.byte	-1
	.byte	-1
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	-1
	.byte	0
	.byte	-1
	.byte	0
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-58
	.byte	-58
	.byte	-58
	.byte	-124
	.byte	0
	.byte	0
	.byte	0
	.byte	-124
	.byte	0
	.byte	-124
	.byte	-124
	.byte	0
	.byte	0
	.byte	0
	.byte	-124
	.byte	-124
	.byte	0
	.byte	-124
	.byte	0
	.byte	-124
	.byte	-124
	.byte	-124
	.byte	-124
	.byte	-124
	.text
	.balign 2
.globl _init_palette
	.def	_init_palette;	.scl	2;	.type	32;	.endef
_init_palette:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$_table_rgb.1
	pushl	$15
	pushl	$0
	call	_set_palette
	leave
	ret
	.balign 2
.globl _boxFill8
	.def	_boxFill8;	.scl	2;	.type	32;	.endef
_boxFill8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%edi
	pushl	%edi
	movb	16(%ebp), %al
	movl	24(%ebp), %ecx
	movl	28(%ebp), %edi
	movb	%al, -13(%ebp)
	cmpl	32(%ebp), %ecx
	jg	L488
	movl	12(%ebp), %ebx
	imull	%ecx, %ebx
L486:
	movl	20(%ebp), %edx
	cmpl	%edi, %edx
	jg	L490
	movl	8(%ebp), %esi
	addl	%ebx, %esi
	addl	%edx, %esi
	movl	%esi, -20(%ebp)
L485:
	movl	-20(%ebp), %esi
	movb	-13(%ebp), %al
	incl	%edx
	movb	%al, (%esi)
	incl	%esi
	movl	%esi, -20(%ebp)
	cmpl	%edi, %edx
	jle	L485
L490:
	incl	%ecx
	addl	12(%ebp), %ebx
	cmpl	32(%ebp), %ecx
	jle	L486
L488:
	popl	%ebx
	popl	%esi
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _init_GUI
	.def	_init_GUI;	.scl	2;	.type	32;	.endef
_init_GUI:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$12, %esp
	movl	16(%ebp), %eax
	movl	12(%ebp), %edi
	subl	$29, %eax
	decl	%edi
	pushl	%eax
	pushl	%edi
	pushl	$0
	pushl	$0
	pushl	$14
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	subl	$28, %eax
	pushl	%eax
	pushl	%edi
	pushl	%eax
	pushl	$0
	pushl	$8
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	addl	$56, %esp
	subl	$27, %eax
	pushl	%eax
	pushl	%edi
	pushl	%eax
	pushl	$0
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	decl	%eax
	pushl	%eax
	movl	16(%ebp), %eax
	pushl	%edi
	subl	$26, %eax
	pushl	%eax
	pushl	$0
	pushl	$8
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %esi
	addl	$56, %esp
	subl	$24, %esi
	pushl	%esi
	pushl	$59
	pushl	%esi
	pushl	$3
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	subl	$4, %eax
	pushl	%eax
	movl	%eax, -16(%ebp)
	pushl	$2
	pushl	%esi
	pushl	$2
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	addl	$56, %esp
	pushl	-16(%ebp)
	pushl	$59
	pushl	-16(%ebp)
	pushl	$3
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	subl	$5, %eax
	pushl	%eax
	movl	16(%ebp), %eax
	pushl	$59
	subl	$23, %eax
	pushl	%eax
	movl	%eax, -20(%ebp)
	pushl	$59
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	addl	$56, %esp
	subl	$3, %eax
	movl	%eax, -24(%ebp)
	pushl	%eax
	pushl	$59
	pushl	%eax
	pushl	$2
	pushl	$0
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	pushl	-24(%ebp)
	pushl	$60
	pushl	%esi
	pushl	$60
	pushl	$0
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	12(%ebp), %edi
	addl	$56, %esp
	movl	12(%ebp), %ebx
	subl	$4, %ebx
	subl	$47, %edi
	pushl	%esi
	pushl	%ebx
	pushl	%esi
	pushl	%edi
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	pushl	-16(%ebp)
	pushl	%edi
	pushl	-20(%ebp)
	pushl	%edi
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	addl	$56, %esp
	pushl	-24(%ebp)
	pushl	%ebx
	pushl	-24(%ebp)
	pushl	%edi
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	12(%ebp), %eax
	pushl	-24(%ebp)
	subl	$3, %eax
	pushl	%eax
	pushl	%esi
	pushl	%eax
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _putFont8
	.def	_putFont8;	.scl	2;	.type	32;	.endef
_putFont8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%esi, %esi
	pushl	%ebx
	movl	28(%ebp), %edi
	movb	24(%ebp), %bl
L505:
	movl	20(%ebp), %eax
	movl	16(%ebp), %edx
	addl	%esi, %eax
	imull	12(%ebp), %eax
	addl	8(%ebp), %eax
	leal	(%edx,%eax), %ecx
	movb	(%esi,%edi), %dl
	testb	%dl, %dl
	jns	L497
	movb	%bl, (%ecx)
L497:
	movb	%dl, %al
	andl	$64, %eax
	testb	%al, %al
	je	L498
	movb	%bl, 1(%ecx)
L498:
	movb	%dl, %al
	andl	$32, %eax
	testb	%al, %al
	je	L499
	movb	%bl, 2(%ecx)
L499:
	movb	%dl, %al
	andl	$16, %eax
	testb	%al, %al
	je	L500
	movb	%bl, 3(%ecx)
L500:
	movb	%dl, %al
	andl	$8, %eax
	testb	%al, %al
	je	L501
	movb	%bl, 4(%ecx)
L501:
	movb	%dl, %al
	andl	$4, %eax
	testb	%al, %al
	je	L502
	movb	%bl, 5(%ecx)
L502:
	movb	%dl, %al
	andl	$2, %eax
	testb	%al, %al
	je	L503
	movb	%bl, 6(%ecx)
L503:
	andl	$1, %edx
	testb	%dl, %dl
	je	L495
	movb	%bl, 7(%ecx)
L495:
	incl	%esi
	cmpl	$15, %esi
	jle	L505
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _putFont8_asc
	.def	_putFont8_asc;	.scl	2;	.type	32;	.endef
_putFont8_asc:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%eax
	movl	28(%ebp), %ebx
	movb	24(%ebp), %al
	movb	%al, -13(%ebp)
	movl	16(%ebp), %esi
	movl	20(%ebp), %edi
	cmpb	$0, (%ebx)
	jne	L513
L515:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L513:
	movzbl	(%ebx), %eax
	sall	$4, %eax
	incl	%ebx
	addl	$_font, %eax
	pushl	%eax
	movsbl	-13(%ebp),%eax
	pushl	%eax
	pushl	%edi
	pushl	%esi
	addl	$8, %esi
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_putFont8
	addl	$24, %esp
	cmpb	$0, (%ebx)
	jne	L513
	jmp	L515
	.balign 2
.globl _putFont8AscSheet
	.def	_putFont8AscSheet;	.scl	2;	.type	32;	.endef
_putFont8AscSheet:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$12, %esp
	movl	8(%ebp), %eax
	movl	16(%ebp), %edi
	movl	%eax, -16(%ebp)
	movl	20(%ebp), %ebx
	movl	12(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	28(%ebp), %eax
	movl	%eax, -24(%ebp)
	leal	15(%edi), %eax
	pushl	%eax
	movl	-20(%ebp), %eax
	movl	32(%ebp), %esi
	movsbl	%bl,%ebx
	leal	(%eax,%esi,8), %esi
	leal	-1(%esi), %eax
	pushl	%eax
	pushl	%edi
	pushl	-20(%ebp)
	movzbl	24(%ebp), %eax
	pushl	%eax
	movl	-16(%ebp), %eax
	pushl	4(%eax)
	pushl	(%eax)
	call	_boxFill8
	pushl	-24(%ebp)
	pushl	%ebx
	pushl	%edi
	pushl	-20(%ebp)
	movl	-16(%ebp), %eax
	pushl	4(%eax)
	pushl	(%eax)
	call	_putFont8_asc
	movl	%edi, 16(%ebp)
	leal	16(%edi), %eax
	movl	%esi, 20(%ebp)
	movl	%eax, 24(%ebp)
	addl	$52, %esp
	movl	-20(%ebp), %eax
	movl	%eax, 12(%ebp)
	movl	-16(%ebp), %eax
	movl	%eax, 8(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_sheetRefresh
	.data
_cursor.2:
	.ascii "*..............."
	.ascii "**.............."
	.ascii "*O*............."
	.ascii "*OO*............"
	.ascii "*OOO*..........."
	.ascii "*OOOO*.........."
	.ascii "*OOOOO*........."
	.ascii "*OOOOOO*........"
	.ascii "*OOOOOOO*......."
	.ascii "*OOOO*****......"
	.ascii "*OO*O*.........."
	.ascii "*O*.*O*........."
	.ascii "**..*O*........."
	.ascii "*....*O*........"
	.ascii ".....*O*........"
	.ascii "......*........."
	.text
	.balign 2
.globl _initMouseCursor8
	.def	_initMouseCursor8;	.scl	2;	.type	32;	.endef
_initMouseCursor8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%edi, %edi
	pushl	%ebx
	xorl	%ebx, %ebx
	pushl	%eax
	movb	12(%ebp), %al
	movl	8(%ebp), %esi
	movb	%al, -13(%ebp)
L530:
	xorl	%edx, %edx
L529:
	leal	(%edx,%edi), %eax
	cmpb	$42, _cursor.2(%eax)
	je	L535
L526:
	cmpb	$79, _cursor.2(%eax)
	je	L536
L527:
	cmpb	$46, _cursor.2(%eax)
	je	L537
L524:
	incl	%edx
	cmpl	$15, %edx
	jle	L529
	incl	%ebx
	addl	$16, %edi
	cmpl	$15, %ebx
	jle	L530
	popl	%eax
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L537:
	movb	-13(%ebp), %cl
	movb	%cl, (%eax,%esi)
	jmp	L524
L536:
	movb	$7, (%eax,%esi)
	jmp	L527
L535:
	movb	$0, (%eax,%esi)
	jmp	L526
	.balign 2
.globl _putblock8_8
	.def	_putblock8_8;	.scl	2;	.type	32;	.endef
_putblock8_8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%esi, %esi
	pushl	%ebx
	subl	$12, %esp
	cmpl	20(%ebp), %esi
	jge	L550
	xorl	%edi, %edi
L548:
	xorl	%ebx, %ebx
	cmpl	16(%ebp), %ebx
	jge	L552
	movl	32(%ebp), %eax
	addl	%edi, %eax
	movl	%eax, -20(%ebp)
L547:
	movl	28(%ebp), %eax
	movl	24(%ebp), %edx
	addl	%esi, %eax
	addl	%ebx, %edx
	imull	12(%ebp), %eax
	addl	%edx, %eax
	movl	8(%ebp), %ecx
	movl	-20(%ebp), %edx
	incl	%ebx
	movb	(%edx), %dl
	movb	%dl, (%eax,%ecx)
	incl	-20(%ebp)
	cmpl	16(%ebp), %ebx
	jl	L547
L552:
	incl	%esi
	addl	36(%ebp), %edi
	cmpl	20(%ebp), %esi
	jl	L548
L550:
	addl	$12, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _memtest
	.def	_memtest;	.scl	2;	.type	32;	.endef
_memtest:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	xorl	%esi, %esi
	call	_io_load_eflags
	orl	$262144, %eax
	pushl	%eax
	call	_io_store_eflags
	call	_io_load_eflags
	popl	%edx
	testl	$262144, %eax
	je	L554
	movl	$1, %esi
L554:
	andl	$-262145, %eax
	pushl	%eax
	call	_io_store_eflags
	movl	%esi, %eax
	popl	%ebx
	testb	%al, %al
	jne	L557
L555:
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_memtest_sub
	movl	%eax, %ebx
	popl	%eax
	movl	%esi, %eax
	popl	%edx
	testb	%al, %al
	jne	L558
L556:
	leal	-8(%ebp), %esp
	movl	%ebx, %eax
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L558:
	call	_loadCr0
	andl	$-1610612737, %eax
	pushl	%eax
	call	_storeCr0
	popl	%eax
	jmp	L556
L557:
	call	_loadCr0
	orl	$1610612736, %eax
	pushl	%eax
	call	_storeCr0
	popl	%ecx
	jmp	L555
	.balign 2
.globl _memsegTotal
	.def	_memsegTotal;	.scl	2;	.type	32;	.endef
_memsegTotal:
	pushl	%ebp
	xorl	%eax, %eax
	movl	%esp, %ebp
	xorl	%edx, %edx
	pushl	%ebx
	movl	8(%ebp), %ebx
	movl	(%ebx), %ecx
	cmpl	%ecx, %eax
	jae	L566
L564:
	addl	20(%ebx,%edx,8), %eax
	incl	%edx
	cmpl	%ecx, %edx
	jb	L564
L566:
	popl	%ebx
	popl	%ebp
	ret
	.balign 2
.globl _memsegInit
	.def	_memsegInit;	.scl	2;	.type	32;	.endef
_memsegInit:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	$0, 8(%eax)
	movl	$0, 12(%eax)
	popl	%ebp
	ret
	.balign 2
.globl _memsegAlloc
	.def	_memsegAlloc;	.scl	2;	.type	32;	.endef
_memsegAlloc:
	pushl	%ebp
	xorl	%ecx, %ecx
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	movl	12(%ebp), %esi
	movl	8(%ebp), %ebx
	movl	(%ebx), %eax
	cmpl	%eax, %ecx
	jae	L582
L580:
	movl	20(%ebx,%ecx,8), %edx
	cmpl	%esi, %edx
	jae	L584
	incl	%ecx
	cmpl	%eax, %ecx
	jb	L580
L582:
	xorl	%eax, %eax
L568:
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L584:
	movl	16(%ebx,%ecx,8), %edi
	leal	(%esi,%edi), %eax
	movl	%eax, 16(%ebx,%ecx,8)
	movl	%edx, %eax
	subl	%esi, %eax
	movl	%eax, 20(%ebx,%ecx,8)
	testl	%eax, %eax
	jne	L574
	movl	(%ebx), %eax
	decl	%eax
	movl	%eax, (%ebx)
	cmpl	%eax, %ecx
	jae	L574
	movl	%eax, %esi
L579:
	movl	24(%ebx,%ecx,8), %eax
	movl	28(%ebx,%ecx,8), %edx
	movl	%eax, 16(%ebx,%ecx,8)
	movl	%edx, 20(%ebx,%ecx,8)
	incl	%ecx
	cmpl	%esi, %ecx
	jb	L579
L574:
	movl	%edi, %eax
	jmp	L568
	.balign 2
.globl _memsegFree
	.def	_memsegFree;	.scl	2;	.type	32;	.endef
_memsegFree:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	movl	8(%ebp), %esi
	pushl	%ebx
	xorl	%ebx, %ebx
	movl	(%esi), %edi
	cmpl	%edi, %ebx
	jge	L587
L591:
	movl	12(%ebp), %eax
	cmpl	%eax, 16(%esi,%ebx,8)
	ja	L587
	incl	%ebx
	cmpl	%edi, %ebx
	jl	L591
L587:
	testl	%ebx, %ebx
	jle	L592
	movl	12(%esi,%ebx,8), %edx
	movl	8(%esi,%ebx,8), %eax
	addl	%edx, %eax
	cmpl	12(%ebp), %eax
	je	L612
L592:
	cmpl	%edi, %ebx
	jge	L599
	movl	12(%ebp), %eax
	addl	16(%ebp), %eax
	cmpl	16(%esi,%ebx,8), %eax
	je	L613
L599:
	cmpl	$4089, %edi
	jg	L600
	movl	%edi, %ecx
	cmpl	%ebx, %edi
	jle	L610
L605:
	movl	8(%esi,%ecx,8), %eax
	movl	12(%esi,%ecx,8), %edx
	movl	%eax, 16(%esi,%ecx,8)
	movl	%edx, 20(%esi,%ecx,8)
	decl	%ecx
	cmpl	%ebx, %ecx
	jg	L605
L610:
	leal	1(%edi), %eax
	movl	%eax, (%esi)
	cmpl	%eax, 4(%esi)
	jge	L606
	movl	%eax, 4(%esi)
L606:
	movl	12(%ebp), %eax
	movl	%eax, 16(%esi,%ebx,8)
	movl	16(%ebp), %eax
	movl	%eax, 20(%esi,%ebx,8)
L611:
	xorl	%eax, %eax
L585:
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L600:
	movl	16(%ebp), %eax
	incl	12(%esi)
	addl	%eax, 8(%esi)
	orl	$-1, %eax
	jmp	L585
L613:
	movl	12(%ebp), %eax
	movl	%eax, 16(%esi,%ebx,8)
	movl	16(%ebp), %eax
	addl	%eax, 20(%esi,%ebx,8)
	jmp	L611
L612:
	addl	16(%ebp), %edx
	movl	%edx, 12(%esi,%ebx,8)
	cmpl	(%esi), %ebx
	jge	L611
	movl	12(%ebp), %eax
	addl	16(%ebp), %eax
	cmpl	16(%esi,%ebx,8), %eax
	jne	L611
	addl	20(%esi,%ebx,8), %edx
	movl	%edx, 12(%esi,%ebx,8)
	movl	(%esi), %eax
	decl	%eax
	movl	%eax, (%esi)
	cmpl	%eax, %ebx
	jge	L611
	movl	%eax, %ecx
L598:
	movl	24(%esi,%ebx,8), %eax
	movl	28(%esi,%ebx,8), %edx
	movl	%eax, 16(%esi,%ebx,8)
	movl	%edx, 20(%esi,%ebx,8)
	incl	%ebx
	cmpl	%ecx, %ebx
	jl	L598
	jmp	L611
	.balign 2
.globl _memsegAlloc4K
	.def	_memsegAlloc4K;	.scl	2;	.type	32;	.endef
_memsegAlloc4K:
	pushl	%ebp
	movl	%esp, %ebp
	movl	12(%ebp), %eax
	addl	$4095, %eax
	andl	$-4096, %eax
	movl	%eax, 12(%ebp)
	popl	%ebp
	jmp	_memsegAlloc
	.balign 2
.globl _memsegFree4K
	.def	_memsegFree4K;	.scl	2;	.type	32;	.endef
_memsegFree4K:
	pushl	%ebp
	movl	%esp, %ebp
	movl	16(%ebp), %eax
	addl	$4095, %eax
	andl	$-4096, %eax
	movl	%eax, 16(%ebp)
	popl	%ebp
	jmp	_memsegFree
	.balign 2
.globl _shtctlInit
	.def	_shtctlInit;	.scl	2;	.type	32;	.endef
_shtctlInit:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	movl	8(%ebp), %esi
	pushl	$11284
	movl	16(%ebp), %edi
	pushl	%esi
	call	_memsegAlloc4K
	popl	%ecx
	movl	%eax, %ebx
	popl	%eax
	xorl	%eax, %eax
	testl	%ebx, %ebx
	je	L616
	movl	20(%ebp), %eax
	imull	%edi, %eax
	pushl	%eax
	pushl	%esi
	call	_memsegAlloc4K
	testl	%eax, %eax
	movl	%eax, 4(%ebx)
	popl	%ecx
	popl	%edx
	je	L627
	movl	12(%ebp), %eax
	movl	%edi, 8(%ebx)
	movl	%eax, (%ebx)
	leal	10200(%ebx), %edx
	movl	20(%ebp), %eax
	movl	%eax, 12(%ebx)
	movl	%ebx, %eax
	movl	$-1, 16(%ebx)
L623:
	movl	$0, 1072(%eax)
	movl	%ebx, 1076(%eax)
	addl	$40, %eax
	cmpl	%edx, %eax
	jle	L623
L626:
	movl	%ebx, %eax
L616:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L627:
	pushl	$11284
	pushl	%ebx
	pushl	%esi
	call	_memsegFree4K
	jmp	L626
	.balign 2
.globl _sheetAlloc
	.def	_sheetAlloc;	.scl	2;	.type	32;	.endef
_sheetAlloc:
	pushl	%ebp
	xorl	%edx, %edx
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	addl	$1044, %eax
L634:
	cmpl	$0, 28(%eax)
	je	L637
	incl	%edx
	addl	$40, %eax
	cmpl	$255, %edx
	jle	L634
	xorl	%eax, %eax
L628:
	popl	%ebp
	ret
L637:
	movl	$1, 28(%eax)
	movl	$-1, 24(%eax)
	movl	$0, 36(%eax)
	jmp	L628
	.balign 2
.globl _sheetSetbuf
	.def	_sheetSetbuf;	.scl	2;	.type	32;	.endef
_sheetSetbuf:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %edx
	movl	12(%ebp), %eax
	movl	%eax, (%edx)
	movl	16(%ebp), %eax
	movl	%eax, 4(%edx)
	movl	20(%ebp), %eax
	movl	%eax, 8(%edx)
	movl	24(%ebp), %eax
	movl	%eax, 20(%edx)
	popl	%ebp
	ret
	.balign 2
.globl _sheetRefreshMap
	.def	_sheetRefreshMap;	.scl	2;	.type	32;	.endef
_sheetRefreshMap:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$40, %esp
	movl	8(%ebp), %eax
	cmpl	$0, 12(%ebp)
	movl	4(%eax), %eax
	movl	%eax, -40(%ebp)
	js	L670
L640:
	cmpl	$0, 16(%ebp)
	js	L671
L641:
	movl	8(%ebp), %edx
	movl	8(%edx), %eax
	cmpl	%eax, 20(%ebp)
	jle	L642
	movl	%eax, 20(%ebp)
L642:
	movl	8(%ebp), %esi
	movl	12(%esi), %eax
	cmpl	%eax, 24(%ebp)
	jle	L643
	movl	%eax, 24(%ebp)
L643:
	movl	8(%ebp), %eax
	movl	28(%ebp), %edi
	movl	%edi, -16(%ebp)
	cmpl	16(%eax), %edi
	jg	L665
L663:
	movl	8(%ebp), %esi
	movl	-16(%ebp), %edx
	movl	16(%ebp), %ebx
	movl	20(%esi,%edx,4), %ecx
	movl	%ecx, %eax
	subl	%esi, %eax
	movl	(%ecx), %edi
	subl	$1044, %eax
	movl	16(%ecx), %edx
	sarl	$3, %eax
	movl	%edi, -32(%ebp)
	imull	$-858993459, %eax, %eax
	movl	24(%ebp), %edi
	subl	%edx, %ebx
	subl	%edx, %edi
	movb	%al, -33(%ebp)
	movl	20(%ebp), %esi
	movl	12(%ebp), %edx
	movl	12(%ecx), %eax
	movl	%edi, -44(%ebp)
	subl	%eax, %esi
	subl	%eax, %edx
	movl	%esi, -52(%ebp)
	movl	%edx, -28(%ebp)
	js	L672
L648:
	testl	%ebx, %ebx
	js	L673
L649:
	movl	4(%ecx), %eax
	cmpl	%eax, -52(%ebp)
	jle	L650
	movl	%eax, -52(%ebp)
L650:
	movl	8(%ecx), %eax
	cmpl	%eax, -44(%ebp)
	jle	L651
	movl	%eax, -44(%ebp)
L651:
	cmpl	-44(%ebp), %ebx
	jge	L667
L662:
	movl	16(%ecx), %esi
	movl	-28(%ebp), %edx
	addl	%ebx, %esi
	cmpl	-52(%ebp), %edx
	movl	%esi, -24(%ebp)
	jge	L669
L661:
	movl	%ebx, %eax
	movl	12(%ecx), %edi
	imull	4(%ecx), %eax
	addl	%edx, %edi
	movl	-32(%ebp), %esi
	addl	%edx, %eax
	movl	%edi, -20(%ebp)
	movzbl	(%eax,%esi), %esi
	cmpl	20(%ecx), %esi
	je	L658
	movl	8(%ebp), %edi
	movl	-24(%ebp), %eax
	movl	-40(%ebp), %esi
	imull	8(%edi), %eax
	addl	-20(%ebp), %eax
	movl	%eax, -48(%ebp)
	movb	-33(%ebp), %al
	movl	-48(%ebp), %edi
	movb	%al, (%edi,%esi)
L658:
	incl	%edx
	cmpl	-52(%ebp), %edx
	jl	L661
L669:
	incl	%ebx
	cmpl	-44(%ebp), %ebx
	jl	L662
L667:
	movl	8(%ebp), %edx
	incl	-16(%ebp)
	movl	-16(%ebp), %eax
	cmpl	16(%edx), %eax
	jle	L663
L665:
	addl	$40, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L673:
	xorl	%ebx, %ebx
	jmp	L649
L672:
	movl	$0, -28(%ebp)
	jmp	L648
L671:
	movl	$0, 16(%ebp)
	jmp	L641
L670:
	movl	$0, 12(%ebp)
	jmp	L640
	.balign 2
.globl _sheetUpdown
	.def	_sheetUpdown;	.scl	2;	.type	32;	.endef
_sheetUpdown:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	movl	8(%ebp), %edi
	pushl	%ebx
	movl	12(%ebp), %esi
	movl	32(%edi), %ebx
	movl	24(%edi), %eax
	movl	16(%ebx), %edx
	incl	%edx
	cmpl	%edx, %esi
	jle	L675
	movl	%edx, %esi
L675:
	cmpl	$-1, %esi
	jge	L676
	orl	$-1, %esi
L676:
	movl	%esi, 24(%edi)
	cmpl	%esi, %eax
	jle	L677
	testl	%esi, %esi
	js	L678
	movl	%eax, %ecx
L683:
	movl	16(%ebx,%ecx,4), %eax
	movl	%eax, 20(%ebx,%ecx,4)
	movl	%ecx, 24(%eax)
	decl	%ecx
	cmpl	%esi, %ecx
	jg	L683
	movl	%edi, 20(%ebx,%esi,4)
	leal	1(%esi), %ebx
	pushl	%ebx
	movl	16(%edi), %ecx
	movl	%ecx, %eax
	addl	8(%edi), %eax
	pushl	%eax
	movl	12(%edi), %edx
	movl	%edx, %eax
	addl	4(%edi), %eax
	pushl	%eax
	pushl	%ecx
	pushl	%edx
	pushl	32(%edi)
	call	_sheetRefreshMap
	pushl	%ebx
L712:
	movl	16(%edi), %ecx
	movl	%ecx, %eax
	addl	8(%edi), %eax
	pushl	%eax
	movl	12(%edi), %edx
	movl	%edx, %eax
	addl	4(%edi), %eax
	pushl	%eax
	pushl	%ecx
	pushl	%edx
	pushl	32(%edi)
	call	_sheetRefreshSub
	addl	$48, %esp
L674:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L678:
	movl	16(%ebx), %edx
	cmpl	%eax, %edx
	jle	L685
	movl	%eax, %ecx
	cmpl	%edx, %eax
	jge	L685
L690:
	movl	24(%ebx,%ecx,4), %eax
	movl	%eax, 20(%ebx,%ecx,4)
	movl	%ecx, 24(%eax)
	incl	%ecx
	cmpl	16(%ebx), %ecx
	jl	L690
L685:
	decl	16(%ebx)
	pushl	$0
	movl	16(%edi), %ecx
	movl	%ecx, %eax
	addl	8(%edi), %eax
	pushl	%eax
	movl	12(%edi), %edx
	movl	%edx, %eax
	addl	4(%edi), %eax
	pushl	%eax
	pushl	%ecx
	pushl	%edx
	pushl	32(%edi)
	call	_sheetRefreshMap
	pushl	$0
	jmp	L712
L677:
	cmpl	%esi, %eax
	jge	L674
	testl	%eax, %eax
	js	L693
	movl	%eax, %ecx
	cmpl	%esi, %eax
	jge	L709
L698:
	movl	24(%ebx,%ecx,4), %eax
	movl	%eax, 20(%ebx,%ecx,4)
	movl	%ecx, 24(%eax)
	incl	%ecx
	cmpl	%esi, %ecx
	jl	L698
L709:
	movl	%edi, 20(%ebx,%esi,4)
L699:
	pushl	%esi
	movl	16(%edi), %ecx
	movl	%ecx, %eax
	addl	8(%edi), %eax
	pushl	%eax
	movl	12(%edi), %edx
	movl	%edx, %eax
	addl	4(%edi), %eax
	pushl	%eax
	pushl	%ecx
	pushl	%edx
	pushl	32(%edi)
	call	_sheetRefreshMap
	pushl	%esi
	jmp	L712
L693:
	movl	16(%ebx), %ecx
	cmpl	%esi, %ecx
	jl	L711
L704:
	movl	20(%ebx,%ecx,4), %edx
	leal	1(%ecx), %eax
	movl	%edx, 24(%ebx,%ecx,4)
	decl	%ecx
	movl	%eax, 24(%edx)
	cmpl	%esi, %ecx
	jge	L704
L711:
	movl	%edi, 20(%ebx,%esi,4)
	incl	16(%ebx)
	jmp	L699
	.balign 2
.globl _sheetRefresh
	.def	_sheetRefresh;	.scl	2;	.type	32;	.endef
_sheetRefresh:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	8(%ebp), %ebx
	movl	24(%ebx), %eax
	testl	%eax, %eax
	js	L713
	pushl	%eax
	movl	16(%ebx), %ecx
	movl	%ecx, %eax
	addl	16(%ebp), %ecx
	addl	24(%ebp), %eax
	pushl	%eax
	movl	12(%ebx), %edx
	movl	%edx, %eax
	addl	12(%ebp), %edx
	addl	20(%ebp), %eax
	pushl	%eax
	pushl	%ecx
	pushl	%edx
	pushl	32(%ebx)
	call	_sheetRefreshSub
	addl	$24, %esp
L713:
	movl	-4(%ebp), %ebx
	leave
	ret
	.balign 2
.globl _sheetRefreshSub
	.def	_sheetRefreshSub;	.scl	2;	.type	32;	.endef
_sheetRefreshSub:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$44, %esp
	movl	8(%ebp), %eax
	movl	8(%ebp), %edx
	cmpl	$0, 12(%ebp)
	movl	(%eax), %eax
	movl	4(%edx), %edx
	movl	%eax, -36(%ebp)
	movl	%edx, -40(%ebp)
	js	L746
L716:
	cmpl	$0, 16(%ebp)
	js	L747
L717:
	movl	8(%ebp), %esi
	movl	8(%esi), %eax
	cmpl	%eax, 20(%ebp)
	jle	L718
	movl	%eax, 20(%ebp)
L718:
	movl	8(%ebp), %edi
	movl	12(%edi), %eax
	cmpl	%eax, 24(%ebp)
	jle	L719
	movl	%eax, 24(%ebp)
L719:
	movl	8(%ebp), %edx
	movl	28(%ebp), %eax
	movl	%eax, -16(%ebp)
	cmpl	16(%edx), %eax
	jg	L741
L739:
	movl	8(%ebp), %edi
	movl	-16(%ebp), %esi
	movl	16(%ebp), %ecx
	movl	20(%edi,%esi,4), %ebx
	movl	20(%ebp), %esi
	movl	%ebx, %eax
	subl	%edi, %eax
	movl	16(%ebx), %edx
	subl	$1044, %eax
	movl	24(%ebp), %edi
	sarl	$3, %eax
	subl	%edx, %edi
	imull	$-858993459, %eax, %eax
	movb	%al, -41(%ebp)
	subl	%edx, %ecx
	movl	(%ebx), %eax
	movl	12(%ebp), %edx
	movl	%eax, -32(%ebp)
	movl	%edi, -56(%ebp)
	movl	12(%ebx), %eax
	subl	%eax, %esi
	subl	%eax, %edx
	movl	%esi, -28(%ebp)
	movl	%edx, -24(%ebp)
	js	L748
L724:
	testl	%ecx, %ecx
	js	L749
L725:
	movl	4(%ebx), %eax
	cmpl	%eax, -28(%ebp)
	jle	L726
	movl	%eax, -28(%ebp)
L726:
	movl	8(%ebx), %eax
	cmpl	%eax, -56(%ebp)
	jle	L727
	movl	%eax, -56(%ebp)
L727:
	movl	%ecx, %esi
	cmpl	-56(%ebp), %ecx
	jge	L743
L738:
	movl	16(%ebx), %edi
	movl	-24(%ebp), %ecx
	addl	%esi, %edi
	cmpl	-28(%ebp), %ecx
	movl	%edi, -20(%ebp)
	jge	L745
L737:
	movl	8(%ebp), %edx
	movl	-20(%ebp), %edi
	movl	12(%ebx), %eax
	imull	8(%edx), %edi
	addl	%ecx, %eax
	movb	-41(%ebp), %dl
	addl	%edi, %eax
	movl	-40(%ebp), %edi
	movl	%eax, -52(%ebp)
	cmpb	%dl, (%eax,%edi)
	je	L750
L734:
	incl	%ecx
	cmpl	-28(%ebp), %ecx
	jl	L737
L745:
	incl	%esi
	cmpl	-56(%ebp), %esi
	jl	L738
L743:
	movl	8(%ebp), %edi
	incl	-16(%ebp)
	movl	-16(%ebp), %esi
	cmpl	16(%edi), %esi
	jle	L739
L741:
	addl	$44, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L750:
	movl	%esi, %eax
	movl	-32(%ebp), %edx
	imull	4(%ebx), %eax
	addl	%ecx, %eax
	movl	-36(%ebp), %edi
	movb	(%eax,%edx), %al
	movl	-52(%ebp), %edx
	movb	%al, (%edx,%edi)
	jmp	L734
L749:
	xorl	%ecx, %ecx
	jmp	L725
L748:
	movl	$0, -24(%ebp)
	jmp	L724
L747:
	movl	$0, 16(%ebp)
	jmp	L717
L746:
	movl	$0, 12(%ebp)
	jmp	L716
	.balign 2
.globl _sheetSlide
	.def	_sheetSlide;	.scl	2;	.type	32;	.endef
_sheetSlide:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	movl	12(%ebp), %eax
	movl	8(%ebp), %ebx
	movl	12(%ebx), %edi
	movl	16(%ebx), %esi
	movl	%eax, 12(%ebx)
	movl	16(%ebp), %eax
	movl	%eax, 16(%ebx)
	cmpl	$0, 24(%ebx)
	js	L751
	pushl	$0
	movl	%esi, %eax
	addl	8(%ebx), %eax
	pushl	%eax
	movl	%edi, %eax
	addl	4(%ebx), %eax
	pushl	%eax
	pushl	%esi
	pushl	%edi
	pushl	32(%ebx)
	call	_sheetRefreshMap
	movl	16(%ebp), %eax
	pushl	24(%ebx)
	addl	8(%ebx), %eax
	pushl	%eax
	movl	12(%ebp), %eax
	addl	4(%ebx), %eax
	pushl	%eax
	pushl	16(%ebp)
	pushl	12(%ebp)
	pushl	32(%ebx)
	call	_sheetRefreshMap
	movl	%esi, %eax
	addl	$48, %esp
	pushl	$0
	addl	8(%ebx), %eax
	pushl	%eax
	movl	%edi, %eax
	addl	4(%ebx), %eax
	pushl	%eax
	pushl	%esi
	pushl	%edi
	pushl	32(%ebx)
	call	_sheetRefreshSub
	movl	16(%ebp), %eax
	pushl	24(%ebx)
	addl	8(%ebx), %eax
	pushl	%eax
	movl	12(%ebp), %eax
	addl	4(%ebx), %eax
	pushl	%eax
	pushl	16(%ebp)
	pushl	12(%ebp)
	pushl	32(%ebx)
	call	_sheetRefreshSub
	addl	$48, %esp
L751:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _sheetFree
	.def	_sheetFree;	.scl	2;	.type	32;	.endef
_sheetFree:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	8(%ebp), %ebx
	cmpl	$0, 24(%ebx)
	js	L754
	pushl	$-1
	pushl	%ebx
	call	_sheetUpdown
	popl	%eax
	popl	%edx
L754:
	movl	$0, 28(%ebx)
	movl	-4(%ebp), %ebx
	leave
	ret
	.balign 2
.globl _readFat
	.def	_readFat;	.scl	2;	.type	32;	.endef
_readFat:
	pushl	%ebp
	xorl	%ecx, %ecx
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	movl	8(%ebp), %edi
	movl	12(%ebp), %esi
	xorl	%ebx, %ebx
L760:
	movzbl	1(%ecx,%esi), %eax
	movzbl	(%ecx,%esi), %edx
	sall	$8, %eax
	orl	%eax, %edx
	andl	$4095, %edx
	movl	%edx, (%edi,%ebx,4)
	movb	1(%ecx,%esi), %al
	movzbl	2(%ecx,%esi), %edx
	shrb	$4, %al
	addl	$3, %ecx
	sall	$4, %edx
	movzbl	%al, %eax
	orl	%edx, %eax
	movl	%eax, 4(%edi,%ebx,4)
	addl	$2, %ebx
	cmpl	$2879, %ebx
	jle	L760
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _loadFile
	.def	_loadFile;	.scl	2;	.type	32;	.endef
_loadFile:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	movl	12(%ebp), %ecx
	movl	8(%ebp), %esi
	movl	16(%ebp), %ebx
	movl	24(%ebp), %edi
L764:
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jge	L774
L771:
	movl	%esi, %eax
	sall	$9, %eax
	addl	%edx, %eax
	movb	(%eax,%edi), %al
	movb	%al, (%edx,%ebx)
	incl	%edx
	cmpl	%ecx, %edx
	jl	L771
L774:
	cmpl	$512, %ecx
	jle	L763
	movl	20(%ebp), %eax
	subl	$512, %ecx
	addl	$512, %ebx
	movl	(%eax,%esi,4), %esi
	jmp	L764
L763:
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _searchFile
	.def	_searchFile;	.scl	2;	.type	32;	.endef
_searchFile:
	pushl	%ebp
	xorl	%ecx, %ecx
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$24, %esp
	movl	8(%ebp), %ebx
L780:
	movb	$32, -28(%ebp,%ecx)
	incl	%ecx
	cmpl	$10, %ecx
	jle	L780
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	cmpb	$0, (%ebx)
	je	L807
L789:
	xorl	%eax, %eax
	cmpl	$10, %ecx
	jg	L775
	movb	(%edi,%ebx), %dl
	cmpb	$46, %dl
	je	L812
L786:
	leal	-97(%edx), %eax
	movb	%dl, -28(%ebp,%ecx)
	cmpb	$25, %al
	ja	L788
	leal	-32(%edx), %eax
	movb	%al, -28(%ebp,%ecx)
L788:
	incl	%ecx
L783:
	incl	%edi
	cmpb	$0, (%edi,%ebx)
	jne	L789
L807:
	xorl	%edi, %edi
	cmpl	16(%ebp), %edi
	jge	L791
	movl	12(%ebp), %esi
	movl	$0, -36(%ebp)
L803:
	cmpb	$0, (%esi)
	je	L791
	movb	$0, -29(%ebp)
	testb	$24, 11(%esi)
	jne	L795
	movl	12(%ebp), %ebx
	xorl	%ecx, %ecx
	addl	-36(%ebp), %ebx
L801:
	movzbl	(%ebx), %edx
	movsbl	-28(%ebp,%ecx),%eax
	cmpl	%eax, %edx
	jne	L811
	incl	%ecx
	incl	%ebx
	cmpl	$10, %ecx
	jle	L801
L795:
	movl	%esi, %eax
	cmpb	$1, -29(%ebp)
	jne	L775
	incl	%edi
	addl	$32, %esi
	addl	$32, -36(%ebp)
	cmpl	16(%ebp), %edi
	jl	L803
L791:
	xorl	%eax, %eax
L775:
	addl	$24, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L811:
	movb	$1, -29(%ebp)
	jmp	L795
L812:
	cmpl	$8, %ecx
	jg	L786
	movl	$8, %ecx
	jmp	L783
	.data
LC14:
	.ascii "console\0"
LC15:
	.ascii "processA\0"
LC16:
	.ascii "Welcome to DickOS\0"
LC17:
	.ascii "(%3d, %3d)\0"
LC20:
	.ascii "[lcr %4d %4d]\0"
LC18:
	.ascii "%02X\0"
LC19:
	.ascii "\12Break(key) :\12\0"
	.text
	.balign 2
.globl _Main
	.def	_Main;	.scl	2;	.type	32;	.endef
_Main:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	leal	-1004(%ebp), %ebx
	subl	$1096, %esp
	movl	$0, -1056(%ebp)
	movl	$0, -1060(%ebp)
	movl	$-1, -1068(%ebp)
	movb	4081, %al
	sarb	$4, %al
	movl	%eax, %edx
	andl	$7, %edx
	movl	%edx, -1064(%ebp)
	call	_initGdtit
	call	_init_pic
	call	_io_sti
	leal	-572(%ebp), %eax
	pushl	$0
	pushl	%eax
	pushl	$128
	pushl	%ebx
	call	_QueueInit
	call	_initPit
	pushl	$256
	pushl	%ebx
	call	_initKeyboard
	leal	-716(%ebp), %eax
	pushl	%eax
	pushl	$512
	pushl	%ebx
	call	_enableMouse
	addl	$36, %esp
	pushl	$248
	pushl	$33
	call	_io_out8
	pushl	$239
	pushl	$161
	call	_io_out8
	leal	-700(%ebp), %eax
	pushl	$0
	pushl	%eax
	leal	-1036(%ebp), %eax
	pushl	$32
	pushl	%eax
	call	_QueueInit
	addl	$32, %esp
	call	_timerAlloc
	pushl	$1
	pushl	%ebx
	movl	%eax, -1096(%ebp)
	pushl	%eax
	call	_timerInit
	pushl	$50
	pushl	-1096(%ebp)
	call	_timerSetTime
	pushl	$-1073741825
	pushl	$4194304
	call	_memtest
	pushl	$3932160
	movl	%eax, -1072(%ebp)
	call	_memsegInit
	addl	$32, %esp
	pushl	$647168
	pushl	$4096
	pushl	$3932160
	call	_memsegFree
	movl	-1072(%ebp), %eax
	subl	$4194304, %eax
	pushl	%eax
	pushl	$4194304
	pushl	$3932160
	call	_memsegFree
	call	_init_palette
	movswl	4086,%eax
	pushl	%eax
	movswl	4084,%eax
	pushl	%eax
	pushl	4088
	pushl	$3932160
	call	_shtctlInit
	addl	$40, %esp
	movl	%eax, %esi
	pushl	$3932160
	call	_processInit
	pushl	$0
	pushl	$1
	pushl	%eax
	movl	%eax, -1100(%ebp)
	movl	%eax, -980(%ebp)
	call	_processRun
	movl	%esi, 4068
	pushl	%esi
	call	_sheetAlloc
	movswl	4086,%edx
	movl	%eax, -1076(%ebp)
	movswl	4084,%eax
	imull	%edx, %eax
	pushl	%eax
	pushl	$3932160
	call	_memsegAlloc4K
	pushl	$-1
	movl	%eax, %ebx
	movswl	4086,%eax
	pushl	%eax
	movswl	4084,%eax
	pushl	%eax
	pushl	%ebx
	pushl	-1076(%ebp)
	call	_sheetSetbuf
	addl	$48, %esp
	movswl	4086,%eax
	pushl	%eax
	movswl	4084,%eax
	pushl	%eax
	pushl	%ebx
	leal	-972(%ebp), %ebx
	call	_init_GUI
	pushl	%esi
	call	_sheetAlloc
	pushl	$42240
	pushl	$3932160
	movl	%eax, -1084(%ebp)
	call	_memsegAlloc4K
	pushl	$-1
	pushl	$165
	movl	%eax, -1092(%ebp)
	pushl	$256
	pushl	%eax
	pushl	-1084(%ebp)
	call	_sheetSetbuf
	addl	$44, %esp
	pushl	$0
	pushl	$LC14
	pushl	$165
	pushl	$256
	pushl	-1092(%ebp)
	call	_makeWindow
	pushl	$0
	pushl	$128
	pushl	$240
	pushl	$28
	pushl	$8
	pushl	-1084(%ebp)
	call	_makeTextBox
	addl	$44, %esp
	call	_processAlloc
	pushl	$65536
	pushl	$3932160
	movl	%eax, -1104(%ebp)
	call	_memsegAlloc4K
	movl	-1104(%ebp), %edx
	addl	$65524, %eax
	movl	%eax, 100(%edx)
	movl	-1084(%ebp), %edx
	movl	%edx, 4(%eax)
	movl	-1104(%ebp), %edx
	movl	100(%edx), %eax
	movl	-1072(%ebp), %edx
	movl	%edx, 8(%eax)
	movl	-1104(%ebp), %eax
	movl	$_consoleMain, 76(%eax)
	movl	$8, 116(%eax)
	movl	$16, 120(%eax)
	movl	$8, 124(%eax)
	movl	$8, 128(%eax)
	movl	$8, 132(%eax)
	movl	$8, 136(%eax)
	pushl	$2
	pushl	$2
	pushl	%eax
	call	_processRun
	pushl	%esi
	call	_sheetAlloc
	pushl	$8320
	pushl	$3932160
	movl	%eax, %edi
	call	_memsegAlloc4K
	addl	$32, %esp
	pushl	$-1
	movl	%eax, -1088(%ebp)
	pushl	$52
	pushl	$144
	pushl	%eax
	pushl	%edi
	call	_sheetSetbuf
	pushl	$1
	pushl	$LC15
	pushl	$52
	pushl	$144
	pushl	-1088(%ebp)
	call	_makeWindow
	addl	$40, %esp
	pushl	$7
	pushl	$16
	pushl	$128
	pushl	$28
	pushl	$8
	pushl	%edi
	call	_makeTextBox
	pushl	%esi
	movl	$8, -1048(%ebp)
	movl	$7, -1052(%ebp)
	call	_sheetAlloc
	pushl	$14
	pushl	$16
	pushl	$16
	movl	%eax, -1080(%ebp)
	pushl	%ebx
	pushl	%eax
	call	_sheetSetbuf
	addl	$48, %esp
	pushl	$14
	pushl	%ebx
	movl	$2, %ebx
	call	_initMouseCursor8
	movswl	4084,%eax
	leal	-16(%eax), %ecx
	movl	%ecx, %eax
	cltd
	idivl	%ebx
	movl	%eax, -1040(%ebp)
	movswl	4086,%eax
	pushl	$0
	leal	-44(%eax), %ecx
	pushl	$0
	movl	%ecx, %eax
	cltd
	idivl	%ebx
	pushl	-1076(%ebp)
	movl	%eax, -1044(%ebp)
	leal	-60(%ebp), %ebx
	call	_sheetSlide
	pushl	$64
	pushl	$168
	pushl	-1084(%ebp)
	call	_sheetSlide
	addl	$32, %esp
	pushl	$64
	pushl	$8
	pushl	%edi
	call	_sheetSlide
	pushl	-1044(%ebp)
	pushl	-1040(%ebp)
	pushl	-1080(%ebp)
	call	_sheetSlide
	pushl	$0
	pushl	-1076(%ebp)
	call	_sheetUpdown
	addl	$32, %esp
	pushl	$1
	pushl	-1084(%ebp)
	call	_sheetUpdown
	pushl	$2
	pushl	%edi
	call	_sheetUpdown
	pushl	$3
	pushl	-1080(%ebp)
	call	_sheetUpdown
	pushl	$17
	pushl	$LC16
	pushl	$14
	pushl	$7
	pushl	$32
	pushl	$0
	pushl	-1076(%ebp)
	call	_putFont8AscSheet
	addl	$52, %esp
	pushl	-1044(%ebp)
	pushl	-1040(%ebp)
	pushl	$LC17
	pushl	%ebx
	call	_sprintf
	pushl	$10
	pushl	%ebx
	pushl	$14
	pushl	$7
	pushl	$0
	pushl	$0
	pushl	-1076(%ebp)
	call	_putFont8AscSheet
	leal	-1036(%ebp), %edx
	addl	$44, %esp
	pushl	$237
	pushl	%edx
	call	_QueuePush
	leal	-1036(%ebp), %eax
	pushl	-1064(%ebp)
	pushl	%eax
	call	_QueuePush
	addl	$16, %esp
L814:
	leal	-1036(%ebp), %ebx
	pushl	%ebx
	call	_QueueSize
	popl	%edx
	testl	%eax, %eax
	jle	L817
	cmpl	$0, -1068(%ebp)
	js	L872
L817:
	leal	-1004(%ebp), %ebx
	call	_io_cli
	pushl	%ebx
	call	_QueueSize
	popl	%esi
	testl	%eax, %eax
	je	L873
	pushl	%ebx
	call	_QueuePop
	movl	%eax, %esi
	call	_io_sti
	popl	%ecx
	leal	-256(%esi), %eax
	cmpl	$255, %eax
	jbe	L874
	leal	-512(%esi), %eax
	cmpl	$255, %eax
	jbe	L875
	cmpl	$1, %esi
	jg	L814
	decl	%esi
	je	L876
	pushl	$1
	pushl	%ebx
	pushl	-1096(%ebp)
	call	_timerInit
	addl	$12, %esp
	cmpl	$0, -1052(%ebp)
	js	L867
	movl	$7, -1052(%ebp)
L867:
	pushl	$50
	pushl	-1096(%ebp)
	call	_timerSetTime
	popl	%ecx
	popl	%ebx
	cmpl	$0, -1052(%ebp)
	js	L814
	movl	-1048(%ebp), %eax
	pushl	$43
	addl	$7, %eax
	pushl	%eax
	pushl	$28
	pushl	-1048(%ebp)
	movzbl	-1052(%ebp), %eax
	pushl	%eax
	pushl	4(%edi)
	pushl	(%edi)
	call	_boxFill8
	movl	-1048(%ebp), %eax
	pushl	$44
	addl	$8, %eax
	pushl	%eax
	pushl	$28
	pushl	-1048(%ebp)
	pushl	%edi
	call	_sheetRefresh
	addl	$48, %esp
	jmp	L814
L876:
	pushl	$0
	pushl	%ebx
	pushl	-1096(%ebp)
	call	_timerInit
	addl	$12, %esp
	cmpl	$0, -1052(%ebp)
	js	L867
	movl	$0, -1052(%ebp)
	jmp	L867
L875:
	movl	%esi, %edx
	movzbl	%dl, %eax
	pushl	%eax
	leal	-716(%ebp), %eax
	pushl	%eax
	call	_mouseDecode
	popl	%esi
	popl	%edx
	testl	%eax, %eax
	je	L814
	pushl	-708(%ebp)
	pushl	-712(%ebp)
	pushl	$LC20
	leal	-60(%ebp), %ebx
	pushl	%ebx
	call	_sprintf
	addl	$16, %esp
	testl	$1, -704(%ebp)
	je	L856
	movl	-1044(%ebp), %eax
	subl	$8, %eax
	pushl	%eax
	movl	-1040(%ebp), %eax
	subl	$80, %eax
	pushl	%eax
	pushl	%edi
	movb	$76, -59(%ebp)
	call	_sheetSlide
	addl	$12, %esp
L856:
	movl	-704(%ebp), %eax
	testl	$2, %eax
	je	L857
	movb	$82, -57(%ebp)
L857:
	andl	$4, %eax
	je	L858
	movb	$67, -58(%ebp)
L858:
	pushl	$15
	pushl	%ebx
	pushl	$14
	pushl	$7
	pushl	$16
	pushl	$32
	pushl	-1076(%ebp)
	call	_putFont8AscSheet
	movl	-712(%ebp), %edx
	movl	-708(%ebp), %eax
	addl	$28, %esp
	addl	%eax, -1044(%ebp)
	addl	%edx, -1040(%ebp)
	js	L877
L859:
	cmpl	$0, -1044(%ebp)
	js	L878
L860:
	movswl	4084,%eax
	decl	%eax
	cmpl	%eax, -1040(%ebp)
	jle	L861
	movl	%eax, -1040(%ebp)
L861:
	movswl	4086,%eax
	decl	%eax
	cmpl	%eax, -1044(%ebp)
	jle	L862
	movl	%eax, -1044(%ebp)
L862:
	pushl	-1044(%ebp)
	pushl	-1040(%ebp)
	pushl	$LC17
	pushl	%ebx
	call	_sprintf
	pushl	$10
	pushl	%ebx
	pushl	$14
	pushl	$7
	pushl	$0
	pushl	$0
	pushl	-1076(%ebp)
	call	_putFont8AscSheet
	addl	$44, %esp
	pushl	-1044(%ebp)
	pushl	-1040(%ebp)
	pushl	-1080(%ebp)
	call	_sheetSlide
	addl	$12, %esp
	jmp	L814
L878:
	movl	$0, -1044(%ebp)
	jmp	L860
L877:
	movl	$0, -1040(%ebp)
	jmp	L859
L874:
	pushl	%eax
	leal	-60(%ebp), %ebx
	pushl	$LC18
	pushl	%ebx
	call	_sprintf
	pushl	$2
	pushl	%ebx
	pushl	$14
	pushl	$7
	pushl	$16
	pushl	$0
	pushl	-1076(%ebp)
	call	_putFont8AscSheet
	addl	$40, %esp
	cmpl	$383, %esi
	jg	L821
	cmpl	$0, -1056(%ebp)
	jne	L822
	movb	_keyboardTable0-256(%esi), %al
L871:
	movb	%al, -60(%ebp)
L824:
	movb	-60(%ebp), %dl
	leal	-65(%edx), %eax
	cmpb	$25, %al
	ja	L825
	testl	$4, -1064(%ebp)
	jne	L870
	cmpl	$0, -1056(%ebp)
	je	L827
L825:
	movb	-60(%ebp), %al
	testb	%al, %al
	je	L829
	cmpl	$0, -1060(%ebp)
	jne	L830
	cmpl	$127, -1048(%ebp)
	jg	L829
	pushl	$1
	leal	-60(%ebp), %eax
	pushl	%eax
	pushl	$7
	pushl	$0
	pushl	$28
	pushl	-1048(%ebp)
	pushl	%edi
	movb	$0, -59(%ebp)
	call	_putFont8AscSheet
	addl	$28, %esp
	addl	$8, -1048(%ebp)
L829:
	cmpl	$270, %esi
	je	L879
L833:
	cmpl	$271, %esi
	je	L880
L837:
	cmpl	$298, %esi
	je	L881
L840:
	cmpl	$310, %esi
	je	L882
L841:
	cmpl	$426, %esi
	je	L883
L842:
	cmpl	$438, %esi
	je	L884
L843:
	cmpl	$314, %esi
	je	L885
L844:
	cmpl	$325, %esi
	je	L886
L845:
	cmpl	$326, %esi
	je	L887
L846:
	cmpl	$315, %esi
	je	L888
L847:
	cmpl	$506, %esi
	je	L889
L848:
	cmpl	$510, %esi
	je	L890
L849:
	cmpl	$284, %esi
	je	L891
L850:
	cmpl	$0, -1052(%ebp)
	jle	L852
	movl	-1048(%ebp), %eax
	pushl	$43
	addl	$7, %eax
	pushl	%eax
	pushl	$28
	pushl	-1048(%ebp)
	movzbl	-1052(%ebp), %eax
	pushl	%eax
	pushl	4(%edi)
	pushl	(%edi)
	call	_boxFill8
	addl	$28, %esp
L852:
	movl	-1048(%ebp), %eax
	pushl	$44
	addl	$8, %eax
	pushl	%eax
	pushl	$28
	pushl	-1048(%ebp)
	pushl	%edi
	call	_sheetRefresh
	addl	$20, %esp
	jmp	L814
L891:
	cmpl	$0, -1060(%ebp)
	je	L850
	movl	-1104(%ebp), %eax
	pushl	$266
	addl	$16, %eax
	pushl	%eax
	call	_QueuePush
	popl	%ecx
	popl	%ebx
	jmp	L850
L890:
	call	_waitKeyboardControllerReady
	pushl	-1068(%ebp)
	pushl	$96
	call	_io_out8
	popl	%eax
	popl	%edx
	jmp	L849
L889:
	movl	$-1, -1068(%ebp)
	jmp	L848
L888:
	cmpl	$0, -1056(%ebp)
	je	L847
	movl	-1104(%ebp), %eax
	cmpl	$0, 52(%eax)
	je	L847
	pushl	$LC19
	pushl	4076
	call	_consolePutstr0
	call	_io_cli
	movl	-1104(%ebp), %edx
	movl	-1104(%ebp), %eax
	addl	$48, %eax
	movl	%eax, 84(%edx)
	movl	$_asm_endApp, 76(%edx)
	call	_io_sti
	popl	%ecx
	popl	%ebx
	jmp	L847
L887:
	pushl	$237
	leal	-1036(%ebp), %ebx
	pushl	%ebx
	xorl	$1, -1064(%ebp)
	call	_QueuePush
	pushl	-1064(%ebp)
	pushl	%ebx
	call	_QueuePush
	addl	$16, %esp
	jmp	L846
L886:
	pushl	$237
	leal	-1036(%ebp), %ebx
	pushl	%ebx
	xorl	$2, -1064(%ebp)
	call	_QueuePush
	pushl	-1064(%ebp)
	pushl	%ebx
	call	_QueuePush
	addl	$16, %esp
	jmp	L845
L885:
	pushl	$237
	leal	-1036(%ebp), %ebx
	pushl	%ebx
	xorl	$4, -1064(%ebp)
	call	_QueuePush
	pushl	-1064(%ebp)
	pushl	%ebx
	call	_QueuePush
	addl	$16, %esp
	jmp	L844
L884:
	andl	$-3, -1056(%ebp)
	jmp	L843
L883:
	andl	$-2, -1056(%ebp)
	jmp	L842
L882:
	orl	$2, -1056(%ebp)
	jmp	L841
L881:
	orl	$1, -1056(%ebp)
	jmp	L840
L880:
	cmpl	$0, -1060(%ebp)
	jne	L838
	pushl	$0
	pushl	$LC15
	pushl	4(%edi)
	pushl	-1088(%ebp)
	movl	$1, -1060(%ebp)
	call	_makeWindowTitle
	movl	-1084(%ebp), %edx
	pushl	$1
	pushl	$LC14
	pushl	4(%edx)
	pushl	-1092(%ebp)
	call	_makeWindowTitle
	movl	-1048(%ebp), %eax
	addl	$32, %esp
	addl	$7, %eax
	movl	$-1, -1052(%ebp)
	pushl	$43
	pushl	%eax
	pushl	$28
	pushl	-1048(%ebp)
	pushl	$7
	pushl	4(%edi)
	pushl	(%edi)
	call	_boxFill8
	movl	-1104(%ebp), %eax
	pushl	$2
	addl	$16, %eax
	pushl	%eax
	call	_QueuePush
	addl	$36, %esp
L839:
	pushl	$21
	pushl	4(%edi)
	pushl	$0
	pushl	$0
	pushl	%edi
	call	_sheetRefresh
	movl	-1084(%ebp), %edx
	pushl	$21
	pushl	4(%edx)
	pushl	$0
	pushl	$0
	pushl	%edx
	call	_sheetRefresh
	addl	$40, %esp
	jmp	L837
L838:
	pushl	$1
	pushl	$LC15
	pushl	4(%edi)
	pushl	-1088(%ebp)
	movl	$0, -1060(%ebp)
	call	_makeWindowTitle
	movl	-1084(%ebp), %eax
	pushl	$0
	pushl	$LC14
	pushl	4(%eax)
	pushl	-1092(%ebp)
	call	_makeWindowTitle
	movl	-1104(%ebp), %eax
	addl	$32, %esp
	addl	$16, %eax
	movl	$0, -1052(%ebp)
	pushl	$3
	pushl	%eax
	call	_QueuePush
	popl	%eax
	popl	%edx
	jmp	L839
L879:
	cmpl	$0, -1060(%ebp)
	jne	L834
	cmpl	$8, -1048(%ebp)
	jle	L833
	pushl	$1
	pushl	$LC0
	pushl	$7
	pushl	$0
	pushl	$28
	pushl	-1048(%ebp)
	pushl	%edi
	call	_putFont8AscSheet
	addl	$28, %esp
	subl	$8, -1048(%ebp)
	jmp	L833
L834:
	movl	-1104(%ebp), %eax
	pushl	$264
	addl	$16, %eax
	pushl	%eax
	call	_QueuePush
	popl	%ecx
	popl	%ebx
	jmp	L833
L830:
	movsbl	%al,%eax
	addl	$256, %eax
	pushl	%eax
	movl	-1104(%ebp), %eax
	addl	$16, %eax
	pushl	%eax
	call	_QueuePush
	popl	%eax
	popl	%edx
	jmp	L829
L827:
	leal	32(%edx), %eax
	movb	%al, -60(%ebp)
	jmp	L825
L870:
	cmpl	$0, -1056(%ebp)
	je	L825
	jmp	L827
L822:
	movb	_keyboardTable1-256(%esi), %al
	jmp	L871
L821:
	movb	$0, -60(%ebp)
	jmp	L824
L873:
	pushl	-1100(%ebp)
	call	_processSleep
	call	_io_sti
	popl	%ebx
	jmp	L814
L872:
	pushl	%ebx
	call	_QueuePop
	movl	%eax, -1068(%ebp)
	call	_waitKeyboardControllerReady
	pushl	-1068(%ebp)
	pushl	$96
	call	_io_out8
	addl	$12, %esp
	jmp	L817
.globl _keybuf
	.data
	.balign 4
_keybuf:
	.space 4
.globl _keyData0
	.data
	.balign 4
_keyData0:
	.space 4
.globl _mousebuf
	.data
	.balign 4
_mousebuf:
	.space 4
.globl _mouseData0
	.data
	.balign 4
_mouseData0:
	.space 4
.globl _timerctl
	.data
	.balign 16
_timerctl:
	.space 10012
.globl _processctl
	.data
	.balign 4
_processctl:
	.space 4
.globl _mpTimer
	.data
	.balign 4
_mpTimer:
	.space 4
	.def	_asm_endApp;	.scl	2;	.type	32;	.endef
	.def	_sheetRefreshSub;	.scl	2;	.type	32;	.endef
	.def	_memtest_sub;	.scl	2;	.type	32;	.endef
	.def	_storeCr0;	.scl	2;	.type	32;	.endef
	.def	_loadCr0;	.scl	2;	.type	32;	.endef
	.def	_asm_dickApi;	.scl	2;	.type	32;	.endef
	.def	_asm_interruptHandler2c;	.scl	2;	.type	32;	.endef
	.def	_asm_interruptHandler27;	.scl	2;	.type	32;	.endef
	.def	_asm_interruptHandler21;	.scl	2;	.type	32;	.endef
	.def	_asm_interruptHandler20;	.scl	2;	.type	32;	.endef
	.def	_asm_interruptHandler0d;	.scl	2;	.type	32;	.endef
	.def	_asm_interruptHandler0c;	.scl	2;	.type	32;	.endef
	.def	_loadIdtr;	.scl	2;	.type	32;	.endef
	.def	_loadGdtr;	.scl	2;	.type	32;	.endef
	.def	_dickApiLineWin;	.scl	2;	.type	32;	.endef
	.def	_memsegAlloc;	.scl	2;	.type	32;	.endef
	.def	_memsegFree;	.scl	2;	.type	32;	.endef
	.def	_memsegInit;	.scl	2;	.type	32;	.endef
	.def	_sheetUpdown;	.scl	2;	.type	32;	.endef
	.def	_sheetSlide;	.scl	2;	.type	32;	.endef
	.def	_sheetSetbuf;	.scl	2;	.type	32;	.endef
	.def	_sheetAlloc;	.scl	2;	.type	32;	.endef
	.def	_io_sti;	.scl	2;	.type	32;	.endef
	.def	_readFat;	.scl	2;	.type	32;	.endef
	.def	_sheetFree;	.scl	2;	.type	32;	.endef
	.def	_startApp;	.scl	2;	.type	32;	.endef
	.def	_memsegFree4K;	.scl	2;	.type	32;	.endef
	.def	_loadFile;	.scl	2;	.type	32;	.endef
	.def	_searchFile;	.scl	2;	.type	32;	.endef
	.def	_memsegTotal;	.scl	2;	.type	32;	.endef
	.def	_sprintf;	.scl	2;	.type	32;	.endef
	.def	_putFont8AscSheet;	.scl	2;	.type	32;	.endef
	.def	_sheetRefresh;	.scl	2;	.type	32;	.endef
	.def	_putFont8_asc;	.scl	2;	.type	32;	.endef
	.def	_boxFill8;	.scl	2;	.type	32;	.endef
	.def	_farJmp;	.scl	2;	.type	32;	.endef
	.def	_loadTr;	.scl	2;	.type	32;	.endef
	.def	_processAlloc;	.scl	2;	.type	32;	.endef
	.def	_setSegmdesc;	.scl	2;	.type	32;	.endef
	.def	_memsegAlloc4K;	.scl	2;	.type	32;	.endef
	.def	_io_hlt;	.scl	2;	.type	32;	.endef
	.def	_io_store_eflags;	.scl	2;	.type	32;	.endef
	.def	_io_cli;	.scl	2;	.type	32;	.endef
	.def	_io_load_eflags;	.scl	2;	.type	32;	.endef
	.def	_timerAlloc;	.scl	2;	.type	32;	.endef
	.def	_io_out8;	.scl	2;	.type	32;	.endef
	.def	_io_in8;	.scl	2;	.type	32;	.endef
	.def	_processRun;	.scl	2;	.type	32;	.endef
