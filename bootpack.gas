	.file	"bootpack.c"
	.text
	.balign 2
.globl _QueueInit
	.def	_QueueInit;	.scl	2;	.type	32;	.endef
_QueueInit:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	12(%ebp), %ecx
	movl	16(%ebp), %edx
	movl	%ecx, 12(%eax)
	movl	%edx, (%eax)
	movl	%ecx, 16(%eax)
	movl	$0, 20(%eax)
	movl	$0, 8(%eax)
	movl	$0, 4(%eax)
	popl	%ebp
	ret
	.balign 2
.globl _QueuePush
	.def	_QueuePush;	.scl	2;	.type	32;	.endef
_QueuePush:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	8(%ebp), %ecx
	movl	12(%ebp), %ebx
	cmpl	$0, 16(%ecx)
	jne	L3
	orl	$-1, %eax
	movl	$1, 20(%ecx)
L2:
	popl	%ebx
	popl	%ebp
	ret
L3:
	movl	4(%ecx), %eax
	movl	(%ecx), %edx
	movb	%bl, (%eax,%edx)
	movl	4(%ecx), %eax
	decl	16(%ecx)
	incl	%eax
	cltd
	idivl	12(%ecx)
	xorl	%eax, %eax
	movl	%edx, 4(%ecx)
	jmp	L2
	.balign 2
.globl _QueuePop
	.def	_QueuePop;	.scl	2;	.type	32;	.endef
_QueuePop:
	pushl	%ebp
	orl	$-1, %eax
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	movl	8(%ebp), %esi
	pushl	%ebx
	movl	16(%esi), %edi
	movl	12(%esi), %ebx
	cmpl	%ebx, %edi
	je	L4
	movl	8(%esi), %eax
	movl	(%esi), %edx
	movzbl	(%eax,%edx), %ecx
	incl	%eax
	cltd
	idivl	%ebx
	leal	1(%edi), %eax
	movl	%edx, 8(%esi)
	movl	%eax, 16(%esi)
	movl	%ecx, %eax
L4:
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _QueueSize
	.def	_QueueSize;	.scl	2;	.type	32;	.endef
_QueueSize:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %edx
	popl	%ebp
	movl	12(%edx), %eax
	subl	16(%edx), %eax
	ret
	.balign 2
.globl _init_pic
	.def	_init_pic;	.scl	2;	.type	32;	.endef
_init_pic:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$255
	pushl	$33
	call	_io_out8
	pushl	$255
	pushl	$161
	call	_io_out8
	pushl	$17
	pushl	$32
	call	_io_out8
	pushl	$32
	pushl	$33
	call	_io_out8
	addl	$32, %esp
	pushl	$4
	pushl	$33
	call	_io_out8
	pushl	$1
	pushl	$33
	call	_io_out8
	pushl	$17
	pushl	$160
	call	_io_out8
	pushl	$40
	pushl	$161
	call	_io_out8
	addl	$32, %esp
	pushl	$2
	pushl	$161
	call	_io_out8
	pushl	$1
	pushl	$161
	call	_io_out8
	pushl	$251
	pushl	$33
	call	_io_out8
	pushl	$255
	pushl	$161
	call	_io_out8
	leave
	ret
	.balign 2
.globl _interruptHandler21
	.def	_interruptHandler21;	.scl	2;	.type	32;	.endef
_interruptHandler21:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$97
	pushl	$32
	call	_io_out8
	pushl	$96
	call	_io_in8
	movzbl	%al, %eax
	pushl	%eax
	pushl	$_keybuf
	call	_QueuePush
	leave
	ret
	.balign 2
.globl _interruptHandler27
	.def	_interruptHandler27;	.scl	2;	.type	32;	.endef
_interruptHandler27:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$103
	pushl	$32
	call	_io_out8
	leave
	ret
	.balign 2
.globl _interruptHandler2c
	.def	_interruptHandler2c;	.scl	2;	.type	32;	.endef
_interruptHandler2c:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$100
	pushl	$160
	call	_io_out8
	pushl	$98
	pushl	$32
	call	_io_out8
	pushl	$96
	call	_io_in8
	movzbl	%al, %eax
	pushl	%eax
	pushl	$_mousebuf
	call	_QueuePush
	leave
	ret
	.balign 2
.globl _setSegmdesc
	.def	_setSegmdesc;	.scl	2;	.type	32;	.endef
_setSegmdesc:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	12(%ebp), %edx
	movl	16(%ebp), %ecx
	movl	8(%ebp), %ebx
	movl	20(%ebp), %eax
	cmpl	$1048575, %edx
	jbe	L12
	shrl	$12, %edx
	orl	$32768, %eax
L12:
	movw	%dx, (%ebx)
	movb	%al, 5(%ebx)
	shrl	$16, %edx
	sarl	$8, %eax
	andl	$15, %edx
	movw	%cx, 2(%ebx)
	andl	$-16, %eax
	sarl	$16, %ecx
	orl	%eax, %edx
	movb	%cl, 4(%ebx)
	movb	%dl, 6(%ebx)
	sarl	$8, %ecx
	movb	%cl, 7(%ebx)
	popl	%ebx
	popl	%ebp
	ret
	.balign 2
.globl _setGatedesc
	.def	_setGatedesc;	.scl	2;	.type	32;	.endef
_setGatedesc:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	8(%ebp), %edx
	movl	16(%ebp), %eax
	movl	20(%ebp), %ebx
	movl	12(%ebp), %ecx
	movw	%ax, 2(%edx)
	movb	%bl, 5(%edx)
	movw	%cx, (%edx)
	movl	%ebx, %eax
	sarl	$8, %eax
	sarl	$16, %ecx
	movb	%al, 4(%edx)
	movw	%cx, 6(%edx)
	popl	%ebx
	popl	%ebp
	ret
	.balign 2
.globl _initGdtit
	.def	_initGdtit;	.scl	2;	.type	32;	.endef
_initGdtit:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	$2555904, %esi
	movl	$8191, %ebx
L19:
	pushl	$0
	pushl	$0
	pushl	$0
	pushl	%esi
	addl	$8, %esi
	call	_setSegmdesc
	addl	$16, %esp
	decl	%ebx
	jns	L19
	pushl	$16530
	movl	$2553856, %esi
	pushl	$0
	movl	$255, %ebx
	pushl	$-1
	pushl	$2555912
	call	_setSegmdesc
	pushl	$16538
	pushl	$2621440
	pushl	$524287
	pushl	$2555920
	call	_setSegmdesc
	addl	$32, %esp
	pushl	$2555904
	pushl	$65535
	call	_loadGdtr
	popl	%eax
	popl	%edx
L24:
	pushl	$0
	pushl	$0
	pushl	$0
	pushl	%esi
	addl	$8, %esi
	call	_setGatedesc
	addl	$16, %esp
	decl	%ebx
	jns	L24
	pushl	$2553856
	pushl	$2047
	call	_loadIdtr
	pushl	$142
	pushl	$16
	pushl	$_asm_interruptHandler21
	pushl	$2554120
	call	_setGatedesc
	pushl	$142
	pushl	$16
	pushl	$_asm_interruptHandler27
	pushl	$2554168
	call	_setGatedesc
	addl	$40, %esp
	pushl	$142
	pushl	$16
	pushl	$_asm_interruptHandler2c
	pushl	$2554208
	call	_setGatedesc
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
	.balign 2
.globl _set_palette
	.def	_set_palette;	.scl	2;	.type	32;	.endef
_set_palette:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%eax
	movl	8(%ebp), %ebx
	movl	12(%ebp), %edi
	movl	16(%ebp), %esi
	call	_io_load_eflags
	movl	%eax, -16(%ebp)
	call	_io_cli
	pushl	%ebx
	pushl	$968
	call	_io_out8
	cmpl	%edi, %ebx
	popl	%ecx
	popl	%eax
	jge	L36
	subl	%ebx, %edi
	movl	%edi, %ebx
L34:
	movb	(%esi), %al
	shrb	$2, %al
	movzbl	%al, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	movb	1(%esi), %al
	shrb	$2, %al
	movzbl	%al, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	movb	2(%esi), %al
	shrb	$2, %al
	addl	$3, %esi
	movzbl	%al, %eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	addl	$24, %esp
	decl	%ebx
	jne	L34
L36:
	movl	-16(%ebp), %eax
	movl	%eax, 8(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_io_store_eflags
	.data
_table_rgb.0:
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	0
	.byte	-1
	.byte	-1
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	-1
	.byte	0
	.byte	-1
	.byte	0
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-58
	.byte	-58
	.byte	-58
	.byte	-124
	.byte	0
	.byte	0
	.byte	0
	.byte	-124
	.byte	0
	.byte	-124
	.byte	-124
	.byte	0
	.byte	0
	.byte	0
	.byte	-124
	.byte	-124
	.byte	0
	.byte	-124
	.byte	0
	.byte	-124
	.byte	-124
	.byte	-124
	.byte	-124
	.byte	-124
	.text
	.balign 2
.globl _init_palette
	.def	_init_palette;	.scl	2;	.type	32;	.endef
_init_palette:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$_table_rgb.0
	pushl	$15
	pushl	$0
	call	_set_palette
	leave
	ret
	.balign 2
.globl _boxFill8
	.def	_boxFill8;	.scl	2;	.type	32;	.endef
_boxFill8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%ecx
	pushl	%ecx
	movb	16(%ebp), %al
	movl	24(%ebp), %ecx
	movl	28(%ebp), %edi
	movb	%al, -13(%ebp)
	cmpl	32(%ebp), %ecx
	jg	L50
	movl	12(%ebp), %ebx
	imull	%ecx, %ebx
L48:
	movl	20(%ebp), %edx
	cmpl	%edi, %edx
	jg	L52
	movl	8(%ebp), %esi
	addl	%ebx, %esi
	addl	%edx, %esi
	movl	%esi, -20(%ebp)
L47:
	movl	-20(%ebp), %esi
	movb	-13(%ebp), %al
	incl	%edx
	movb	%al, (%esi)
	incl	%esi
	movl	%esi, -20(%ebp)
	cmpl	%edi, %edx
	jle	L47
L52:
	incl	%ecx
	addl	12(%ebp), %ebx
	cmpl	32(%ebp), %ecx
	jle	L48
L50:
	popl	%eax
	popl	%edx
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _init_GUI
	.def	_init_GUI;	.scl	2;	.type	32;	.endef
_init_GUI:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$12, %esp
	movl	16(%ebp), %eax
	movl	12(%ebp), %edi
	subl	$29, %eax
	decl	%edi
	pushl	%eax
	pushl	%edi
	pushl	$0
	pushl	$0
	pushl	$14
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	subl	$28, %eax
	pushl	%eax
	pushl	%edi
	pushl	%eax
	pushl	$0
	pushl	$8
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	addl	$56, %esp
	subl	$27, %eax
	pushl	%eax
	pushl	%edi
	pushl	%eax
	pushl	$0
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	decl	%eax
	pushl	%eax
	movl	16(%ebp), %eax
	pushl	%edi
	subl	$26, %eax
	pushl	%eax
	pushl	$0
	pushl	$8
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %esi
	addl	$56, %esp
	subl	$24, %esi
	pushl	%esi
	pushl	$59
	pushl	%esi
	pushl	$3
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	subl	$4, %eax
	pushl	%eax
	movl	%eax, -16(%ebp)
	pushl	$2
	pushl	%esi
	pushl	$2
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	addl	$56, %esp
	pushl	-16(%ebp)
	pushl	$59
	pushl	-16(%ebp)
	pushl	$3
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	subl	$5, %eax
	pushl	%eax
	movl	16(%ebp), %eax
	pushl	$59
	subl	$23, %eax
	pushl	%eax
	movl	%eax, -20(%ebp)
	pushl	$59
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	16(%ebp), %eax
	addl	$56, %esp
	subl	$3, %eax
	movl	%eax, -24(%ebp)
	pushl	%eax
	pushl	$59
	pushl	%eax
	pushl	$2
	pushl	$0
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	pushl	-24(%ebp)
	pushl	$60
	pushl	%esi
	pushl	$60
	pushl	$0
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	12(%ebp), %edi
	addl	$56, %esp
	movl	12(%ebp), %ebx
	subl	$4, %ebx
	subl	$47, %edi
	pushl	%esi
	pushl	%ebx
	pushl	%esi
	pushl	%edi
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	pushl	-16(%ebp)
	pushl	%edi
	pushl	-20(%ebp)
	pushl	%edi
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	addl	$56, %esp
	pushl	-24(%ebp)
	pushl	%ebx
	pushl	-24(%ebp)
	pushl	%edi
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	movl	12(%ebp), %eax
	pushl	-24(%ebp)
	subl	$3, %eax
	pushl	%eax
	pushl	%esi
	pushl	%eax
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxFill8
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _putFont8
	.def	_putFont8;	.scl	2;	.type	32;	.endef
_putFont8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%esi, %esi
	pushl	%ebx
	movl	28(%ebp), %edi
	movb	24(%ebp), %bl
L67:
	movl	20(%ebp), %eax
	movl	16(%ebp), %edx
	addl	%esi, %eax
	imull	12(%ebp), %eax
	addl	8(%ebp), %eax
	leal	(%edx,%eax), %ecx
	movb	(%esi,%edi), %dl
	testb	%dl, %dl
	jns	L59
	movb	%bl, (%ecx)
L59:
	movb	%dl, %al
	andl	$64, %eax
	testb	%al, %al
	je	L60
	movb	%bl, 1(%ecx)
L60:
	movb	%dl, %al
	andl	$32, %eax
	testb	%al, %al
	je	L61
	movb	%bl, 2(%ecx)
L61:
	movb	%dl, %al
	andl	$16, %eax
	testb	%al, %al
	je	L62
	movb	%bl, 3(%ecx)
L62:
	movb	%dl, %al
	andl	$8, %eax
	testb	%al, %al
	je	L63
	movb	%bl, 4(%ecx)
L63:
	movb	%dl, %al
	andl	$4, %eax
	testb	%al, %al
	je	L64
	movb	%bl, 5(%ecx)
L64:
	movb	%dl, %al
	andl	$2, %eax
	testb	%al, %al
	je	L65
	movb	%bl, 6(%ecx)
L65:
	andl	$1, %edx
	testb	%dl, %dl
	je	L57
	movb	%bl, 7(%ecx)
L57:
	incl	%esi
	cmpl	$15, %esi
	jle	L67
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _putFont8_asc
	.def	_putFont8_asc;	.scl	2;	.type	32;	.endef
_putFont8_asc:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%ebx
	movl	28(%ebp), %ebx
	movb	24(%ebp), %al
	movb	%al, -13(%ebp)
	movl	16(%ebp), %esi
	movl	20(%ebp), %edi
	cmpb	$0, (%ebx)
	jne	L75
L77:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L75:
	movzbl	(%ebx), %eax
	sall	$4, %eax
	incl	%ebx
	addl	$_font, %eax
	pushl	%eax
	movsbl	-13(%ebp),%eax
	pushl	%eax
	pushl	%edi
	pushl	%esi
	addl	$8, %esi
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_putFont8
	addl	$24, %esp
	cmpb	$0, (%ebx)
	jne	L75
	jmp	L77
	.data
_cursor.1:
	.ascii "*..............."
	.ascii "**.............."
	.ascii "*O*............."
	.ascii "*OO*............"
	.ascii "*OOO*..........."
	.ascii "*OOOO*.........."
	.ascii "*OOOOO*........."
	.ascii "*OOOOOO*........"
	.ascii "*OOOOOOO*......."
	.ascii "*OOOO*****......"
	.ascii "*OO*O*.........."
	.ascii "*O*.*O*........."
	.ascii "**..*O*........."
	.ascii "*....*O*........"
	.ascii ".....*O*........"
	.ascii "......*........."
	.text
	.balign 2
.globl _initMouseCursor8
	.def	_initMouseCursor8;	.scl	2;	.type	32;	.endef
_initMouseCursor8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	xorl	%ebx, %ebx
	pushl	%edi
	xorl	%edi, %edi
	movb	12(%ebp), %al
	movl	8(%ebp), %esi
	movb	%al, -13(%ebp)
L91:
	xorl	%edx, %edx
L90:
	leal	(%edx,%edi), %eax
	cmpb	$42, _cursor.1(%eax)
	je	L96
L87:
	cmpb	$79, _cursor.1(%eax)
	je	L97
L88:
	cmpb	$46, _cursor.1(%eax)
	je	L98
L85:
	incl	%edx
	cmpl	$15, %edx
	jle	L90
	incl	%ebx
	addl	$16, %edi
	cmpl	$15, %ebx
	jle	L91
	popl	%esi
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L98:
	movb	-13(%ebp), %cl
	movb	%cl, (%eax,%esi)
	jmp	L85
L97:
	movb	$7, (%eax,%esi)
	jmp	L88
L96:
	movb	$0, (%eax,%esi)
	jmp	L87
	.balign 2
.globl _putblock8_8
	.def	_putblock8_8;	.scl	2;	.type	32;	.endef
_putblock8_8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%esi, %esi
	pushl	%ebx
	subl	$12, %esp
	cmpl	20(%ebp), %esi
	jge	L111
	xorl	%edi, %edi
L109:
	xorl	%ebx, %ebx
	cmpl	16(%ebp), %ebx
	jge	L113
	movl	32(%ebp), %eax
	addl	%edi, %eax
	movl	%eax, -20(%ebp)
L108:
	movl	28(%ebp), %eax
	movl	24(%ebp), %edx
	addl	%esi, %eax
	addl	%ebx, %edx
	imull	12(%ebp), %eax
	addl	%edx, %eax
	movl	8(%ebp), %ecx
	movl	-20(%ebp), %edx
	incl	%ebx
	movb	(%edx), %dl
	movb	%dl, (%eax,%ecx)
	incl	-20(%ebp)
	cmpl	16(%ebp), %ebx
	jl	L108
L113:
	incl	%esi
	addl	36(%ebp), %edi
	cmpl	20(%ebp), %esi
	jl	L109
L111:
	addl	$12, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _waitKeyboardControllerReady
	.def	_waitKeyboardControllerReady;	.scl	2;	.type	32;	.endef
_waitKeyboardControllerReady:
	pushl	%ebp
	movl	%esp, %ebp
L115:
	pushl	$100
	call	_io_in8
	popl	%edx
	andl	$2, %eax
	jne	L115
	leave
	ret
	.balign 2
.globl _initKeyboard
	.def	_initKeyboard;	.scl	2;	.type	32;	.endef
_initKeyboard:
	pushl	%ebp
	movl	%esp, %ebp
	call	_waitKeyboardControllerReady
	pushl	$96
	pushl	$100
	call	_io_out8
	call	_waitKeyboardControllerReady
	pushl	$71
	pushl	$96
	call	_io_out8
	leave
	ret
	.balign 2
.globl _enableMouse
	.def	_enableMouse;	.scl	2;	.type	32;	.endef
_enableMouse:
	pushl	%ebp
	movl	%esp, %ebp
	call	_waitKeyboardControllerReady
	pushl	$212
	pushl	$100
	call	_io_out8
	call	_waitKeyboardControllerReady
	pushl	$244
	pushl	$96
	call	_io_out8
	movl	8(%ebp), %eax
	movb	$0, 3(%eax)
	leave
	ret
	.balign 2
.globl _mouseDecode
	.def	_mouseDecode;	.scl	2;	.type	32;	.endef
_mouseDecode:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	8(%ebp), %edx
	movl	12(%ebp), %ecx
	movl	%ecx, %esi
	movb	3(%edx), %al
	testb	%al, %al
	jne	L122
	cmpb	$-6, %cl
	je	L131
L130:
	xorl	%eax, %eax
L121:
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L131:
	movb	$1, 3(%edx)
	jmp	L130
L122:
	cmpb	$1, %al
	je	L132
	cmpb	$2, %al
	je	L133
	cmpb	$3, %al
	je	L134
	orl	$-1, %eax
	jmp	L121
L134:
	movb	(%edx), %bl
	andl	$255, %esi
	movl	%ebx, %eax
	movb	%cl, 2(%edx)
	andl	$7, %eax
	movl	%esi, 8(%edx)
	movl	%eax, 12(%edx)
	movb	%bl, %al
	movzbl	1(%edx), %ecx
	andl	$16, %eax
	movl	%ecx, 4(%edx)
	movb	$1, 3(%edx)
	testb	%al, %al
	je	L128
	orl	$-256, %ecx
	movl	%ecx, 4(%edx)
L128:
	andl	$32, %ebx
	testb	%bl, %bl
	je	L129
	orl	$-256, 8(%edx)
L129:
	negl	8(%edx)
	movl	$1, %eax
	jmp	L121
L133:
	movb	%cl, 1(%edx)
	movb	$3, 3(%edx)
	jmp	L130
L132:
	andl	$-56, %esi
	movl	%esi, %eax
	cmpb	$8, %al
	jne	L130
	movb	%cl, (%edx)
	movb	$2, 3(%edx)
	jmp	L130
	.balign 2
.globl _memtest
	.def	_memtest;	.scl	2;	.type	32;	.endef
_memtest:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	xorl	%esi, %esi
	call	_io_load_eflags
	orl	$262144, %eax
	pushl	%eax
	call	_io_store_eflags
	call	_io_load_eflags
	popl	%edx
	testl	$262144, %eax
	je	L136
	movl	$1, %esi
L136:
	andl	$-262145, %eax
	pushl	%eax
	call	_io_store_eflags
	movl	%esi, %eax
	popl	%ebx
	testb	%al, %al
	jne	L139
L137:
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_memtest_sub
	movl	%eax, %ebx
	popl	%eax
	movl	%esi, %eax
	popl	%edx
	testb	%al, %al
	jne	L140
L138:
	leal	-8(%ebp), %esp
	movl	%ebx, %eax
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L140:
	call	_loadCr0
	andl	$-1610612737, %eax
	pushl	%eax
	call	_storeCr0
	popl	%ecx
	jmp	L138
L139:
	call	_loadCr0
	orl	$1610612736, %eax
	pushl	%eax
	call	_storeCr0
	popl	%ecx
	jmp	L137
	.balign 2
.globl _memsegTotal
	.def	_memsegTotal;	.scl	2;	.type	32;	.endef
_memsegTotal:
	pushl	%ebp
	xorl	%eax, %eax
	movl	%esp, %ebp
	xorl	%edx, %edx
	pushl	%ebx
	movl	8(%ebp), %ebx
	movl	(%ebx), %ecx
	cmpl	%ecx, %eax
	jae	L148
L146:
	addl	20(%ebx,%edx,8), %eax
	incl	%edx
	cmpl	%ecx, %edx
	jb	L146
L148:
	popl	%ebx
	popl	%ebp
	ret
	.balign 2
.globl _memsegInit
	.def	_memsegInit;	.scl	2;	.type	32;	.endef
_memsegInit:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	movl	$0, (%eax)
	movl	$0, 4(%eax)
	movl	$0, 8(%eax)
	movl	$0, 12(%eax)
	popl	%ebp
	ret
	.balign 2
.globl _memsegAlloc
	.def	_memsegAlloc;	.scl	2;	.type	32;	.endef
_memsegAlloc:
	pushl	%ebp
	xorl	%ecx, %ecx
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	movl	12(%ebp), %esi
	movl	8(%ebp), %ebx
	movl	(%ebx), %eax
	cmpl	%eax, %ecx
	jae	L164
L162:
	movl	20(%ebx,%ecx,8), %edx
	cmpl	%esi, %edx
	jae	L166
	incl	%ecx
	cmpl	%eax, %ecx
	jb	L162
L164:
	xorl	%eax, %eax
L150:
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L166:
	movl	16(%ebx,%ecx,8), %edi
	leal	(%esi,%edi), %eax
	movl	%eax, 16(%ebx,%ecx,8)
	movl	%edx, %eax
	subl	%esi, %eax
	movl	%eax, 20(%ebx,%ecx,8)
	testl	%eax, %eax
	jne	L156
	movl	(%ebx), %eax
	decl	%eax
	movl	%eax, (%ebx)
	cmpl	%eax, %ecx
	jae	L156
	movl	%eax, %esi
L161:
	movl	24(%ebx,%ecx,8), %eax
	movl	28(%ebx,%ecx,8), %edx
	movl	%eax, 16(%ebx,%ecx,8)
	movl	%edx, 20(%ebx,%ecx,8)
	incl	%ecx
	cmpl	%esi, %ecx
	jb	L161
L156:
	movl	%edi, %eax
	jmp	L150
	.balign 2
.globl _memsegFree
	.def	_memsegFree;	.scl	2;	.type	32;	.endef
_memsegFree:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	movl	8(%ebp), %esi
	pushl	%ebx
	xorl	%ebx, %ebx
	movl	(%esi), %edi
	cmpl	%edi, %ebx
	jge	L169
L173:
	movl	12(%ebp), %eax
	cmpl	%eax, 16(%esi,%ebx,8)
	ja	L169
	incl	%ebx
	cmpl	%edi, %ebx
	jl	L173
L169:
	testl	%ebx, %ebx
	jle	L174
	movl	12(%esi,%ebx,8), %edx
	movl	8(%esi,%ebx,8), %eax
	addl	%edx, %eax
	cmpl	12(%ebp), %eax
	je	L194
L174:
	cmpl	%edi, %ebx
	jge	L181
	movl	12(%ebp), %eax
	addl	16(%ebp), %eax
	cmpl	16(%esi,%ebx,8), %eax
	je	L195
L181:
	cmpl	$4089, %edi
	jg	L182
	movl	%edi, %ecx
	cmpl	%ebx, %edi
	jle	L192
L187:
	movl	8(%esi,%ecx,8), %eax
	movl	12(%esi,%ecx,8), %edx
	movl	%eax, 16(%esi,%ecx,8)
	movl	%edx, 20(%esi,%ecx,8)
	decl	%ecx
	cmpl	%ebx, %ecx
	jg	L187
L192:
	leal	1(%edi), %eax
	movl	%eax, (%esi)
	cmpl	%eax, 4(%esi)
	jge	L188
	movl	%eax, 4(%esi)
L188:
	movl	12(%ebp), %eax
	movl	%eax, 16(%esi,%ebx,8)
	movl	16(%ebp), %eax
	movl	%eax, 20(%esi,%ebx,8)
L193:
	xorl	%eax, %eax
L167:
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L182:
	movl	16(%ebp), %eax
	incl	12(%esi)
	addl	%eax, 8(%esi)
	orl	$-1, %eax
	jmp	L167
L195:
	movl	12(%ebp), %eax
	movl	%eax, 16(%esi,%ebx,8)
	movl	16(%ebp), %eax
	addl	%eax, 20(%esi,%ebx,8)
	jmp	L193
L194:
	addl	16(%ebp), %edx
	movl	%edx, 12(%esi,%ebx,8)
	cmpl	(%esi), %ebx
	jge	L193
	movl	12(%ebp), %eax
	addl	16(%ebp), %eax
	cmpl	16(%esi,%ebx,8), %eax
	jne	L193
	addl	20(%esi,%ebx,8), %edx
	movl	%edx, 12(%esi,%ebx,8)
	movl	(%esi), %eax
	decl	%eax
	movl	%eax, (%esi)
	cmpl	%eax, %ebx
	jge	L193
	movl	%eax, %ecx
L180:
	movl	24(%esi,%ebx,8), %eax
	movl	28(%esi,%ebx,8), %edx
	movl	%eax, 16(%esi,%ebx,8)
	movl	%edx, 20(%esi,%ebx,8)
	incl	%ebx
	cmpl	%ecx, %ebx
	jl	L180
	jmp	L193
	.balign 2
.globl _memsegAlloc4K
	.def	_memsegAlloc4K;	.scl	2;	.type	32;	.endef
_memsegAlloc4K:
	pushl	%ebp
	movl	%esp, %ebp
	movl	12(%ebp), %eax
	addl	$4095, %eax
	andl	$-4096, %eax
	movl	%eax, 12(%ebp)
	popl	%ebp
	jmp	_memsegAlloc
	.balign 2
.globl _memsegFree4K
	.def	_memsegFree4K;	.scl	2;	.type	32;	.endef
_memsegFree4K:
	pushl	%ebp
	movl	%esp, %ebp
	movl	16(%ebp), %eax
	addl	$4095, %eax
	andl	$-4096, %eax
	movl	%eax, 16(%ebp)
	popl	%ebp
	jmp	_memsegFree
	.balign 2
.globl _shtctlInit
	.def	_shtctlInit;	.scl	2;	.type	32;	.endef
_shtctlInit:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$9232
	pushl	8(%ebp)
	call	_memsegAlloc4K
	popl	%ecx
	movl	%eax, %edx
	popl	%eax
	xorl	%eax, %eax
	testl	%edx, %edx
	je	L198
	movl	12(%ebp), %eax
	movl	$255, %ecx
	movl	%eax, (%edx)
	movl	16(%ebp), %eax
	movl	%eax, 4(%edx)
	movl	20(%ebp), %eax
	movl	%eax, 8(%edx)
	leal	1068(%edx), %eax
	movl	$-1, 12(%edx)
L204:
	movl	$0, (%eax)
	addl	$32, %eax
	decl	%ecx
	jns	L204
	movl	%edx, %eax
L198:
	leave
	ret
	.balign 2
.globl _sheetAlloc
	.def	_sheetAlloc;	.scl	2;	.type	32;	.endef
_sheetAlloc:
	pushl	%ebp
	xorl	%edx, %edx
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	addl	$1040, %eax
L213:
	cmpl	$0, 28(%eax)
	je	L216
	incl	%edx
	addl	$32, %eax
	cmpl	$255, %edx
	jle	L213
	xorl	%eax, %eax
L207:
	popl	%ebp
	ret
L216:
	movl	$1, 28(%eax)
	movl	$-1, 24(%eax)
	jmp	L207
	.balign 2
.globl _sheetSetbuf
	.def	_sheetSetbuf;	.scl	2;	.type	32;	.endef
_sheetSetbuf:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %edx
	movl	12(%ebp), %eax
	movl	%eax, (%edx)
	movl	16(%ebp), %eax
	movl	%eax, 4(%edx)
	movl	20(%ebp), %eax
	movl	%eax, 8(%edx)
	movl	24(%ebp), %eax
	movl	%eax, 20(%edx)
	popl	%ebp
	ret
	.balign 2
.globl _sheetUpdown
	.def	_sheetUpdown;	.scl	2;	.type	32;	.endef
_sheetUpdown:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	movl	8(%ebp), %esi
	pushl	%ebx
	movl	12(%ebp), %edi
	movl	16(%ebp), %ebx
	movl	12(%esi), %edx
	incl	%edx
	movl	24(%edi), %eax
	cmpl	%edx, %ebx
	jle	L219
	movl	%edx, %ebx
L219:
	cmpl	$-1, %ebx
	jge	L220
	orl	$-1, %ebx
L220:
	movl	%ebx, 24(%edi)
	cmpl	%ebx, %eax
	jle	L221
	testl	%ebx, %ebx
	js	L222
	movl	%eax, %ecx
L227:
	movl	12(%esi,%ecx,4), %eax
	movl	%eax, 16(%esi,%ecx,4)
	movl	%ecx, 24(%eax)
	decl	%ecx
	cmpl	%ebx, %ecx
	jg	L227
L254:
	movl	%edi, 16(%esi,%ebx,4)
L243:
	movl	16(%edi), %ecx
	movl	%ecx, %eax
	addl	8(%edi), %eax
	pushl	%eax
	movl	12(%edi), %edx
	movl	%edx, %eax
	addl	4(%edi), %eax
	pushl	%eax
	pushl	%ecx
	pushl	%edx
	pushl	%edi
	pushl	%esi
	call	_sheetRefresh
	addl	$24, %esp
L218:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L222:
	movl	12(%esi), %edx
	cmpl	%eax, %edx
	jle	L243
	movl	%eax, %ecx
	cmpl	%edx, %eax
	jge	L252
L234:
	movl	20(%esi,%ecx,4), %eax
	movl	%eax, 16(%esi,%ecx,4)
	movl	%ecx, 24(%eax)
	incl	%ecx
	cmpl	12(%esi), %ecx
	jl	L234
L252:
	decl	12(%esi)
	jmp	L243
L221:
	cmpl	%ebx, %eax
	jge	L218
	testl	%eax, %eax
	js	L237
	movl	%eax, %ecx
	cmpl	%ebx, %eax
	jge	L254
L242:
	movl	20(%esi,%ecx,4), %eax
	movl	%eax, 16(%esi,%ecx,4)
	movl	%ecx, 24(%eax)
	incl	%ecx
	cmpl	%ebx, %ecx
	jl	L242
	jmp	L254
L237:
	movl	12(%esi), %ecx
	cmpl	%ebx, %ecx
	jl	L256
L248:
	movl	16(%esi,%ecx,4), %edx
	leal	1(%ecx), %eax
	movl	%edx, 20(%esi,%ecx,4)
	decl	%ecx
	movl	%eax, 24(%edx)
	cmpl	%ebx, %ecx
	jge	L248
L256:
	movl	%edi, 16(%esi,%ebx,4)
	incl	12(%esi)
	jmp	L243
	.balign 2
.globl _sheetRefresh
	.def	_sheetRefresh;	.scl	2;	.type	32;	.endef
_sheetRefresh:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%eax
	movl	12(%ebp), %edx
	movl	8(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	16(%ebp), %edi
	movl	20(%ebp), %esi
	movl	24(%ebp), %ebx
	movl	28(%ebp), %eax
	cmpl	$0, 24(%edx)
	js	L257
	movl	16(%edx), %ecx
	movl	12(%edx), %edx
	leal	(%eax,%ecx), %eax
	addl	%esi, %ecx
	movl	%eax, 24(%ebp)
	movl	%ecx, 16(%ebp)
	leal	(%ebx,%edx), %eax
	addl	%edi, %edx
	movl	%eax, 20(%ebp)
	movl	%edx, 12(%ebp)
	popl	%eax
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_sheetRefreshSub
L257:
	popl	%eax
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _sheetRefreshSub
	.def	_sheetRefreshSub;	.scl	2;	.type	32;	.endef
_sheetRefreshSub:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$40, %esp
	movl	8(%ebp), %eax
	cmpl	$0, 12(%ebp)
	movl	(%eax), %eax
	movl	%eax, -40(%ebp)
	js	L290
L260:
	cmpl	$0, 16(%ebp)
	js	L291
L261:
	movl	8(%ebp), %edx
	movl	4(%edx), %eax
	cmpl	%eax, 20(%ebp)
	jle	L262
	movl	%eax, 20(%ebp)
L262:
	movl	8(%ebp), %esi
	movl	8(%esi), %eax
	cmpl	%eax, 24(%ebp)
	jle	L263
	movl	%eax, 24(%ebp)
L263:
	movl	8(%ebp), %eax
	xorl	%edi, %edi
	movl	$0, -16(%ebp)
	cmpl	12(%eax), %edi
	jg	L285
L283:
	movl	-16(%ebp), %edx
	movl	8(%ebp), %esi
	movl	16(%ebp), %ebx
	movl	16(%esi,%edx,4), %ecx
	movl	20(%ebp), %esi
	movl	(%ecx), %edi
	movl	16(%ecx), %edx
	movl	%edi, -32(%ebp)
	movl	12(%ecx), %eax
	movl	24(%ebp), %edi
	subl	%edx, %ebx
	subl	%edx, %edi
	subl	%eax, %esi
	movl	12(%ebp), %edx
	movl	%esi, -52(%ebp)
	subl	%eax, %edx
	movl	%edi, -44(%ebp)
	movl	%edx, -28(%ebp)
	js	L292
L268:
	testl	%ebx, %ebx
	js	L293
L269:
	movl	4(%ecx), %eax
	cmpl	%eax, -52(%ebp)
	jle	L270
	movl	%eax, -52(%ebp)
L270:
	movl	8(%ecx), %eax
	cmpl	%eax, -44(%ebp)
	jle	L271
	movl	%eax, -44(%ebp)
L271:
	cmpl	-44(%ebp), %ebx
	jge	L287
L282:
	movl	16(%ecx), %esi
	movl	-28(%ebp), %edx
	addl	%ebx, %esi
	cmpl	-52(%ebp), %edx
	movl	%esi, -24(%ebp)
	jge	L289
L281:
	movl	%ebx, %eax
	movl	12(%ecx), %edi
	imull	4(%ecx), %eax
	addl	%edx, %edi
	movl	-32(%ebp), %esi
	addl	%edx, %eax
	movl	%edi, -20(%ebp)
	movb	(%eax,%esi), %al
	movb	%al, -33(%ebp)
	movzbl	%al, %eax
	cmpl	20(%ecx), %eax
	je	L278
	movl	8(%ebp), %edi
	movl	-24(%ebp), %eax
	movl	-40(%ebp), %esi
	imull	4(%edi), %eax
	addl	-20(%ebp), %eax
	movl	%eax, -48(%ebp)
	movb	-33(%ebp), %al
	movl	-48(%ebp), %edi
	movb	%al, (%edi,%esi)
L278:
	incl	%edx
	cmpl	-52(%ebp), %edx
	jl	L281
L289:
	incl	%ebx
	cmpl	-44(%ebp), %ebx
	jl	L282
L287:
	movl	8(%ebp), %edx
	incl	-16(%ebp)
	movl	-16(%ebp), %eax
	cmpl	12(%edx), %eax
	jle	L283
L285:
	addl	$40, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L293:
	xorl	%ebx, %ebx
	jmp	L269
L292:
	movl	$0, -28(%ebp)
	jmp	L268
L291:
	movl	$0, 16(%ebp)
	jmp	L261
L290:
	movl	$0, 12(%ebp)
	jmp	L260
	.balign 2
.globl _sheetSlide
	.def	_sheetSlide;	.scl	2;	.type	32;	.endef
_sheetSlide:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	movl	16(%ebp), %edi
	movl	12(%ebp), %ebx
	movl	20(%ebp), %esi
	movl	12(%ebx), %ecx
	movl	16(%ebx), %edx
	movl	%edi, 12(%ebx)
	movl	%esi, 16(%ebx)
	cmpl	$0, 24(%ebx)
	js	L294
	movl	%edx, %eax
	addl	8(%ebx), %eax
	pushl	%eax
	movl	%ecx, %eax
	addl	4(%ebx), %eax
	pushl	%eax
	pushl	%edx
	pushl	%ecx
	pushl	8(%ebp)
	call	_sheetRefreshSub
	movl	%esi, %eax
	addl	8(%ebx), %eax
	pushl	%eax
	movl	%edi, %eax
	addl	4(%ebx), %eax
	pushl	%eax
	pushl	%esi
	pushl	%edi
	pushl	8(%ebp)
	call	_sheetRefreshSub
	addl	$40, %esp
L294:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _sheetFree
	.def	_sheetFree;	.scl	2;	.type	32;	.endef
_sheetFree:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	12(%ebp), %ebx
	cmpl	$0, 24(%ebx)
	js	L297
	pushl	$-1
	pushl	%ebx
	pushl	8(%ebp)
	call	_sheetUpdown
	addl	$12, %esp
L297:
	movl	$0, 28(%ebx)
	movl	-4(%ebp), %ebx
	leave
	ret
	.data
LC0:
	.ascii "DickOS\0"
LC1:
	.ascii "(%d, %d)\0"
LC2:
	.ascii "memory %dMB free : %dKB\0"
LC4:
	.ascii "[lcr %4d %4d]\0"
LC5:
	.ascii "(%3d, %3d)\0"
LC3:
	.ascii "%02X\0"
	.text
	.balign 2
.globl _Main
	.def	_Main;	.scl	2;	.type	32;	.endef
_Main:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$504, %esp
	call	_initGdtit
	call	_init_pic
	call	_io_sti
	leal	-92(%ebp), %eax
	pushl	%eax
	pushl	$32
	pushl	$_keybuf
	call	_QueueInit
	leal	-220(%ebp), %eax
	pushl	%eax
	pushl	$128
	pushl	$_mousebuf
	call	_QueueInit
	pushl	$249
	pushl	$33
	call	_io_out8
	addl	$32, %esp
	pushl	$239
	pushl	$161
	call	_io_out8
	call	_initKeyboard
	leal	-236(%ebp), %eax
	pushl	%eax
	call	_enableMouse
	pushl	$-1073741825
	pushl	$4194304
	call	_memtest
	pushl	$3932160
	movl	%eax, %ebx
	call	_memsegInit
	pushl	$647168
	pushl	$4096
	pushl	$3932160
	call	_memsegFree
	leal	-4194304(%ebx), %eax
	addl	$36, %esp
	leal	-492(%ebp), %ebx
	pushl	%eax
	pushl	$4194304
	pushl	$3932160
	call	_memsegFree
	call	_init_palette
	movswl	4086,%eax
	pushl	%eax
	movswl	4084,%eax
	pushl	%eax
	pushl	4088
	pushl	$3932160
	call	_shtctlInit
	pushl	%eax
	movl	%eax, -496(%ebp)
	call	_sheetAlloc
	addl	$32, %esp
	pushl	-496(%ebp)
	movl	%eax, -500(%ebp)
	call	_sheetAlloc
	movswl	4086,%edx
	movl	%eax, -504(%ebp)
	movswl	4084,%eax
	imull	%edx, %eax
	pushl	%eax
	pushl	$3932160
	call	_memsegAlloc4K
	pushl	$-1
	movl	%eax, -508(%ebp)
	movswl	4086,%eax
	pushl	%eax
	movswl	4084,%eax
	pushl	%eax
	pushl	-508(%ebp)
	pushl	-500(%ebp)
	call	_sheetSetbuf
	addl	$32, %esp
	pushl	$14
	pushl	$16
	pushl	$16
	pushl	%ebx
	pushl	-504(%ebp)
	call	_sheetSetbuf
	movswl	4086,%eax
	pushl	%eax
	movswl	4084,%eax
	pushl	%eax
	pushl	-508(%ebp)
	call	_init_GUI
	addl	$32, %esp
	pushl	$14
	pushl	%ebx
	movl	$2, %ebx
	call	_initMouseCursor8
	pushl	$0
	pushl	$0
	pushl	-500(%ebp)
	pushl	-496(%ebp)
	call	_sheetSlide
	movswl	4084,%eax
	leal	-16(%eax), %ecx
	movl	%ecx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	movswl	4086,%eax
	leal	-44(%eax), %ecx
	movl	%ecx, %eax
	cltd
	idivl	%ebx
	pushl	%eax
	movl	%eax, %esi
	pushl	%edi
	leal	-60(%ebp), %ebx
	pushl	-504(%ebp)
	pushl	-496(%ebp)
	call	_sheetSlide
	addl	$40, %esp
	pushl	$0
	pushl	-500(%ebp)
	pushl	-496(%ebp)
	call	_sheetUpdown
	pushl	$1
	pushl	-504(%ebp)
	pushl	-496(%ebp)
	call	_sheetUpdown
	pushl	$LC0
	pushl	$7
	pushl	$32
	pushl	$30
	movswl	4084,%eax
	pushl	%eax
	pushl	-508(%ebp)
	call	_putFont8_asc
	addl	$48, %esp
	pushl	%esi
	pushl	%edi
	pushl	$LC1
	pushl	%ebx
	call	_sprintf
	pushl	%ebx
	pushl	$7
	pushl	$0
	pushl	$0
	movswl	4084,%eax
	pushl	%eax
	pushl	-508(%ebp)
	call	_putFont8_asc
	addl	$40, %esp
	pushl	$3932160
	call	_memsegTotal
	shrl	$10, %eax
	movl	%eax, (%esp)
	pushl	$-1073741825
	pushl	$4194304
	call	_memtest
	popl	%ecx
	shrl	$20, %eax
	popl	%edx
	pushl	%eax
	pushl	$LC2
	pushl	%ebx
	call	_sprintf
	pushl	%ebx
	pushl	$7
	pushl	$64
	pushl	$0
	movswl	4084,%eax
	pushl	%eax
	pushl	-508(%ebp)
	call	_putFont8_asc
	addl	$40, %esp
	pushl	$96
	movswl	4084,%eax
	pushl	%eax
	pushl	$0
	pushl	$0
	pushl	-500(%ebp)
	pushl	-496(%ebp)
	call	_sheetRefresh
	addl	$24, %esp
L299:
	call	_io_cli
	pushl	$_keybuf
	call	_QueueSize
	pushl	$_mousebuf
	movl	%eax, %ebx
	call	_QueueSize
	leal	(%eax,%ebx), %eax
	popl	%ebx
	popl	%edx
	testl	%eax, %eax
	je	L315
	pushl	$_keybuf
	call	_QueueSize
	popl	%ecx
	testl	%eax, %eax
	jne	L316
	pushl	$_mousebuf
	call	_QueueSize
	popl	%edx
	testl	%eax, %eax
	je	L299
	pushl	$_mousebuf
	call	_QueuePop
	movl	%eax, %ebx
	call	_io_sti
	movzbl	%bl, %eax
	pushl	%eax
	leal	-236(%ebp), %eax
	pushl	%eax
	call	_mouseDecode
	addl	$12, %esp
	testl	%eax, %eax
	je	L299
	pushl	-228(%ebp)
	pushl	-232(%ebp)
	pushl	$LC4
	leal	-60(%ebp), %ebx
	pushl	%ebx
	call	_sprintf
	addl	$16, %esp
	movl	-224(%ebp), %eax
	testl	$1, %eax
	je	L308
	movb	$76, -59(%ebp)
L308:
	testl	$2, %eax
	je	L309
	movb	$82, -57(%ebp)
L309:
	andl	$4, %eax
	je	L310
	movb	$67, -58(%ebp)
L310:
	pushl	$31
	pushl	$151
	pushl	$16
	pushl	$32
	pushl	$14
	movswl	4084,%eax
	pushl	%eax
	pushl	-508(%ebp)
	call	_boxFill8
	pushl	%ebx
	pushl	$7
	pushl	$16
	pushl	$32
	movswl	4084,%eax
	pushl	%eax
	pushl	-508(%ebp)
	call	_putFont8_asc
	addl	$52, %esp
	pushl	$32
	pushl	$152
	pushl	$16
	pushl	$32
	pushl	-500(%ebp)
	pushl	-496(%ebp)
	call	_sheetRefresh
	addl	$24, %esp
	addl	-228(%ebp), %esi
	addl	-232(%ebp), %edi
	js	L317
L311:
	testl	%esi, %esi
	js	L318
L312:
	movswl	4084,%eax
	decl	%eax
	cmpl	%eax, %edi
	jle	L313
	movl	%eax, %edi
L313:
	movswl	4086,%eax
	decl	%eax
	cmpl	%eax, %esi
	jle	L314
	movl	%eax, %esi
L314:
	pushl	%esi
	pushl	%edi
	pushl	$LC5
	pushl	%ebx
	call	_sprintf
	pushl	$15
	pushl	$79
	pushl	$0
	pushl	$0
	pushl	$14
	movswl	4084,%eax
	pushl	%eax
	pushl	-508(%ebp)
	call	_boxFill8
	addl	$44, %esp
	pushl	%ebx
	pushl	$7
	pushl	$0
	pushl	$0
	movswl	4084,%eax
	pushl	%eax
	pushl	-508(%ebp)
	call	_putFont8_asc
	pushl	$16
	pushl	$80
	pushl	$0
	pushl	$0
	pushl	-500(%ebp)
	pushl	-496(%ebp)
	call	_sheetRefresh
	addl	$48, %esp
	pushl	%esi
	pushl	%edi
	pushl	-504(%ebp)
	pushl	-496(%ebp)
	call	_sheetSlide
	addl	$16, %esp
	jmp	L299
L318:
	xorl	%esi, %esi
	jmp	L312
L317:
	xorl	%edi, %edi
	jmp	L311
L316:
	pushl	$_keybuf
	call	_QueuePop
	movl	%eax, %ebx
	call	_io_sti
	pushl	%ebx
	leal	-60(%ebp), %ebx
	pushl	$LC3
	pushl	%ebx
	call	_sprintf
	pushl	$31
	pushl	$15
	pushl	$16
	pushl	$0
	pushl	$14
	movswl	4084,%eax
	pushl	%eax
	pushl	-508(%ebp)
	call	_boxFill8
	addl	$44, %esp
	pushl	%ebx
	pushl	$7
	pushl	$16
	pushl	$0
	movswl	4084,%eax
	pushl	%eax
	pushl	-508(%ebp)
	call	_putFont8_asc
	pushl	$32
	pushl	$16
	pushl	$16
	pushl	$0
	pushl	-500(%ebp)
	pushl	-496(%ebp)
	call	_sheetRefresh
	addl	$48, %esp
	jmp	L299
L315:
	call	_io_stihlt
	jmp	L299
.globl _keybuf
	.data
	.balign 16
_keybuf:
	.space 24
.globl _mousebuf
	.data
	.balign 16
_mousebuf:
	.space 24
	.def	_io_stihlt;	.scl	2;	.type	32;	.endef
	.def	_sprintf;	.scl	2;	.type	32;	.endef
	.def	_io_sti;	.scl	2;	.type	32;	.endef
	.def	_sheetRefreshSub;	.scl	2;	.type	32;	.endef
	.def	_sheetRefresh;	.scl	2;	.type	32;	.endef
	.def	_memtest_sub;	.scl	2;	.type	32;	.endef
	.def	_storeCr0;	.scl	2;	.type	32;	.endef
	.def	_loadCr0;	.scl	2;	.type	32;	.endef
	.def	_io_store_eflags;	.scl	2;	.type	32;	.endef
	.def	_io_cli;	.scl	2;	.type	32;	.endef
	.def	_io_load_eflags;	.scl	2;	.type	32;	.endef
	.def	_asm_interruptHandler2c;	.scl	2;	.type	32;	.endef
	.def	_asm_interruptHandler27;	.scl	2;	.type	32;	.endef
	.def	_asm_interruptHandler21;	.scl	2;	.type	32;	.endef
	.def	_loadIdtr;	.scl	2;	.type	32;	.endef
	.def	_loadGdtr;	.scl	2;	.type	32;	.endef
	.def	_io_in8;	.scl	2;	.type	32;	.endef
	.def	_io_out8;	.scl	2;	.type	32;	.endef
