[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_io_in8
	EXTERN	_io_out8
	EXTERN	_io_load_eflags
	EXTERN	_io_cli
	EXTERN	_io_store_eflags
	EXTERN	_loadTr
	EXTERN	_farJmp
	EXTERN	_loadGdtr
	EXTERN	_loadIdtr
	EXTERN	_asm_interruptHandler20
	EXTERN	_asm_interruptHandler21
	EXTERN	_asm_interruptHandler27
	EXTERN	_asm_interruptHandler2c
	EXTERN	_font
	EXTERN	_memtest_sub
	EXTERN	_loadCr0
	EXTERN	_storeCr0
	EXTERN	_io_sti
	EXTERN	_sprintf
[FILE "bootpack.c"]
[SECTION .text]
	GLOBAL	_QueueInit
_QueueInit:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	MOV	EDX,DWORD [16+EBP]
	MOV	ECX,DWORD [12+EBP]
	MOV	DWORD [EAX],EDX
	MOV	DWORD [12+EAX],ECX
	MOV	EDX,DWORD [20+EBP]
	MOV	DWORD [16+EAX],ECX
	MOV	DWORD [20+EAX],0
	MOV	DWORD [8+EAX],0
	MOV	DWORD [4+EAX],0
	MOV	DWORD [24+EAX],EDX
	POP	EBP
	RET
	GLOBAL	_QueuePush
_QueuePush:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	CMP	DWORD [16+EBX],0
	JNE	L3
	OR	DWORD [20+EBX],1
	OR	EAX,-1
L2:
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
L3:
	MOV	ECX,DWORD [4+EBX]
	MOV	EDX,DWORD [EBX]
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [EDX+ECX*4],EAX
	MOV	EAX,DWORD [4+EBX]
	DEC	DWORD [16+EBX]
	INC	EAX
	CDQ
	IDIV	DWORD [12+EBX]
	MOV	EAX,DWORD [24+EBX]
	MOV	DWORD [4+EBX],EDX
	TEST	EAX,EAX
	JE	L4
	CMP	DWORD [4+EAX],2
	JE	L4
	PUSH	0
	PUSH	-1
	PUSH	EAX
	CALL	_processRun
	ADD	ESP,12
L4:
	XOR	EAX,EAX
	JMP	L2
	GLOBAL	_QueuePop
_QueuePop:
	PUSH	EBP
	OR	EAX,-1
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	ESI,DWORD [8+EBP]
	PUSH	EBX
	MOV	EDI,DWORD [16+ESI]
	MOV	EBX,DWORD [12+ESI]
	CMP	EDI,EBX
	JE	L6
	MOV	EAX,DWORD [8+ESI]
	MOV	EDX,DWORD [ESI]
	MOV	ECX,DWORD [EDX+EAX*4]
	INC	EAX
	CDQ
	IDIV	EBX
	LEA	EAX,DWORD [1+EDI]
	MOV	DWORD [8+ESI],EDX
	MOV	DWORD [16+ESI],EAX
	MOV	EAX,ECX
L6:
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_QueueSize
_QueueSize:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EDX,DWORD [8+EBP]
	POP	EBP
	MOV	EAX,DWORD [12+EDX]
	SUB	EAX,DWORD [16+EDX]
	RET
[SECTION .data]
_keyboardTable:
	DB	0
	DB	0
	DB	49
	DB	50
	DB	51
	DB	52
	DB	53
	DB	54
	DB	55
	DB	56
	DB	57
	DB	48
	DB	45
	DB	61
	DB	0
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	91
	DB	93
	DB	0
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	59
	DB	39
	DB	96
	DB	0
	DB	92
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	44
	DB	46
	DB	47
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
[SECTION .text]
	GLOBAL	_waitKeyboardControllerReady
_waitKeyboardControllerReady:
	PUSH	EBP
	MOV	EBP,ESP
L10:
	PUSH	100
	CALL	_io_in8
	POP	EDX
	AND	EAX,2
	JNE	L10
	LEAVE
	RET
	GLOBAL	_initKeyboard
_initKeyboard:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [_keybuf],EAX
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [_keyData0],EAX
	CALL	_waitKeyboardControllerReady
	PUSH	96
	PUSH	100
	CALL	_io_out8
	CALL	_waitKeyboardControllerReady
	POP	ECX
	POP	EAX
	MOV	DWORD [12+EBP],71
	MOV	DWORD [8+EBP],96
	LEAVE
	JMP	_io_out8
	GLOBAL	_enableMouse
_enableMouse:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [_mousebuf],EAX
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [_mouseData0],EAX
	CALL	_waitKeyboardControllerReady
	PUSH	212
	PUSH	100
	CALL	_io_out8
	CALL	_waitKeyboardControllerReady
	PUSH	244
	PUSH	96
	CALL	_io_out8
	MOV	EAX,DWORD [16+EBP]
	MOV	BYTE [3+EAX],0
	LEAVE
	RET
	GLOBAL	_mouseDecode
_mouseDecode:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	EDX,DWORD [8+EBP]
	MOV	ECX,DWORD [12+EBP]
	MOV	ESI,ECX
	MOV	AL,BYTE [3+EDX]
	TEST	AL,AL
	JNE	L17
	CMP	CL,-6
	JE	L26
L25:
	XOR	EAX,EAX
L16:
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L26:
	MOV	BYTE [3+EDX],1
	JMP	L25
L17:
	CMP	AL,1
	JE	L27
	CMP	AL,2
	JE	L28
	CMP	AL,3
	JE	L29
	OR	EAX,-1
	JMP	L16
L29:
	MOV	BL,BYTE [EDX]
	AND	ESI,255
	MOV	EAX,EBX
	MOV	BYTE [2+EDX],CL
	AND	EAX,7
	MOV	DWORD [8+EDX],ESI
	MOV	DWORD [12+EDX],EAX
	MOV	AL,BL
	MOVZX	ECX,BYTE [1+EDX]
	AND	EAX,16
	MOV	DWORD [4+EDX],ECX
	MOV	BYTE [3+EDX],1
	TEST	AL,AL
	JE	L23
	OR	ECX,-256
	MOV	DWORD [4+EDX],ECX
L23:
	AND	EBX,32
	TEST	BL,BL
	JE	L24
	OR	DWORD [8+EDX],-256
L24:
	NEG	DWORD [8+EDX]
	MOV	EAX,1
	JMP	L16
L28:
	MOV	BYTE [1+EDX],CL
	MOV	BYTE [3+EDX],3
	JMP	L25
L27:
	AND	ESI,-56
	MOV	EAX,ESI
	CMP	AL,8
	JNE	L25
	MOV	BYTE [EDX],CL
	MOV	BYTE [3+EDX],2
	JMP	L25
	GLOBAL	_initPit
_initPit:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	52
	PUSH	67
	CALL	_io_out8
	PUSH	156
	PUSH	64
	CALL	_io_out8
	PUSH	46
	PUSH	64
	CALL	_io_out8
	MOV	EDX,_timerctl+10000
	MOV	DWORD [_timerctl],0
	ADD	ESP,24
	MOV	EAX,_timerctl+20
L35:
	MOV	DWORD [EAX],0
	ADD	EAX,20
	CMP	EAX,EDX
	JLE	L35
	CALL	_timerAlloc
	MOV	DWORD [4+EAX],-1
	MOV	DWORD [8+EAX],2
	MOV	DWORD [EAX],0
	MOV	DWORD [_timerctl+8],EAX
	MOV	DWORD [_timerctl+4],-1
	LEAVE
	RET
	GLOBAL	_timerAlloc
_timerAlloc:
	PUSH	EBP
	XOR	EDX,EDX
	MOV	EBP,ESP
	MOV	EAX,_timerctl+12
L44:
	CMP	DWORD [8+EAX],0
	JE	L47
	INC	EDX
	ADD	EAX,20
	CMP	EDX,499
	JLE	L44
	XOR	EAX,EAX
L38:
	POP	EBP
	RET
L47:
	MOV	DWORD [8+EAX],1
	JMP	L38
	GLOBAL	_timerFree
_timerFree:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [8+EAX],0
	POP	EBP
	RET
	GLOBAL	_timerInit
_timerInit:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	MOV	EDX,DWORD [12+EBP]
	MOV	DWORD [12+EAX],EDX
	MOV	EDX,DWORD [16+EBP]
	MOV	BYTE [16+EAX],DL
	POP	EBP
	RET
	GLOBAL	_timerSetTime
_timerSetTime:
	PUSH	EBP
	MOV	EAX,DWORD [_timerctl]
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	ADD	EAX,DWORD [12+EBP]
	MOV	DWORD [8+EBX],2
	MOV	DWORD [4+EBX],EAX
	CALL	_io_load_eflags
	MOV	ESI,EAX
	CALL	_io_cli
	MOV	EAX,DWORD [_timerctl+8]
	MOV	EDX,DWORD [4+EBX]
	CMP	EDX,DWORD [4+EAX]
	JBE	L57
L52:
	MOV	ECX,EAX
	MOV	EAX,DWORD [EAX]
	TEST	EAX,EAX
	JE	L53
	CMP	EDX,DWORD [4+EAX]
	JA	L52
	MOV	DWORD [ECX],EBX
	MOV	DWORD [EBX],EAX
L53:
	MOV	DWORD [8+EBP],ESI
	POP	EBX
	POP	ESI
	POP	EBP
	JMP	_io_store_eflags
L57:
	MOV	DWORD [_timerctl+8],EBX
	MOV	DWORD [_timerctl+4],EDX
	MOV	DWORD [EBX],EAX
	JMP	L53
	GLOBAL	_processNow
_processNow:
	MOV	EAX,DWORD [_processctl]
	PUSH	EBP
	MOV	EBP,ESP
	POP	EBP
	MOV	EDX,DWORD [EAX]
	IMUL	EDX,EDX,408
	LEA	EAX,DWORD [8+EDX+EAX*1]
	MOV	EDX,DWORD [4+EAX]
	MOV	EAX,DWORD [8+EAX+EDX*4]
	RET
	GLOBAL	_processAdd
_processAdd:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	ECX,DWORD [8+EBP]
	MOV	EDX,DWORD [8+ECX]
	IMUL	EDX,EDX,408
	ADD	EDX,DWORD [_processctl]
	MOV	EAX,DWORD [8+EDX]
	MOV	DWORD [16+EDX+EAX*4],ECX
	INC	EAX
	MOV	DWORD [8+EDX],EAX
	MOV	DWORD [4+ECX],2
	POP	EBP
	RET
	GLOBAL	_processRemove
_processRemove:
	PUSH	EBP
	XOR	ECX,ECX
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	MOV	EAX,DWORD [8+EBX]
	IMUL	EAX,EAX,408
	ADD	EAX,DWORD [_processctl]
	LEA	EDX,DWORD [8+EAX]
	CMP	ECX,DWORD [8+EAX]
	JGE	L62
L66:
	CMP	DWORD [8+EDX+ECX*4],EBX
	JE	L62
	INC	ECX
	CMP	ECX,DWORD [EDX]
	JL	L66
L62:
	MOV	EAX,DWORD [4+EDX]
	DEC	DWORD [EDX]
	CMP	ECX,EAX
	JGE	L67
	DEC	EAX
	MOV	DWORD [4+EDX],EAX
L67:
	MOV	EAX,DWORD [EDX]
	CMP	DWORD [4+EDX],EAX
	JL	L68
	MOV	DWORD [4+EDX],0
L68:
	MOV	DWORD [4+EBX],1
	MOV	EBX,DWORD [EDX]
	CMP	ECX,EBX
	JGE	L76
L73:
	MOV	EAX,DWORD [12+EDX+ECX*4]
	MOV	DWORD [8+EDX+ECX*4],EAX
	INC	ECX
	CMP	ECX,EBX
	JL	L73
L76:
	POP	EBX
	POP	EBP
	RET
	GLOBAL	_processSwitchSub
_processSwitchSub:
	PUSH	EBP
	XOR	ECX,ECX
	MOV	EBP,ESP
	MOV	EAX,DWORD [_processctl]
	XOR	EDX,EDX
L83:
	CMP	DWORD [8+EAX+EDX*1],0
	JG	L79
	INC	ECX
	ADD	EDX,408
	CMP	ECX,9
	JLE	L83
L79:
	MOV	DWORD [EAX],ECX
	MOV	BYTE [4+EAX],0
	POP	EBP
	RET
	GLOBAL	_processInit
_processInit:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	EDI,EDI
	PUSH	EBX
	XOR	ESI,ESI
	PUSH	124088
	MOV	EBX,999
	PUSH	DWORD [8+EBP]
	CALL	_memsegAlloc4K
	MOV	DWORD [_processctl],EAX
	POP	EAX
	POP	EDX
L90:
	MOV	EAX,EDI
	LEA	EDX,DWORD [24+ESI]
	ADD	EAX,DWORD [_processctl]
	ADD	EDI,120
	MOV	DWORD [4092+EAX],0
	MOV	DWORD [4088+EAX],EDX
	ADD	EAX,4104
	PUSH	137
	PUSH	EAX
	LEA	EAX,DWORD [2555928+ESI]
	PUSH	103
	ADD	ESI,8
	PUSH	EAX
	CALL	_setSegmdesc
	ADD	ESP,16
	DEC	EBX
	JNS	L90
	MOV	ECX,DWORD [_processctl]
	XOR	EDX,EDX
	MOV	EBX,9
L95:
	LEA	EAX,DWORD [ECX+EDX*1]
	ADD	EDX,408
	DEC	EBX
	MOV	DWORD [8+EAX],0
	MOV	DWORD [12+EAX],0
	JNS	L95
	CALL	_processAlloc
	MOV	EBX,EAX
	MOV	DWORD [4+EAX],2
	MOV	DWORD [12+EAX],2
	MOV	DWORD [8+EAX],0
	PUSH	EAX
	CALL	_processAdd
	CALL	_processSwitchSub
	PUSH	DWORD [EBX]
	CALL	_loadTr
	CALL	_timerAlloc
	PUSH	2
	MOV	DWORD [_mpTimer],EAX
	PUSH	EAX
	CALL	_timerSetTime
	LEA	ESP,DWORD [-12+EBP]
	MOV	EAX,EBX
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_processAlloc
_processAlloc:
	PUSH	EBP
	XOR	ECX,ECX
	MOV	EBP,ESP
	XOR	EDX,EDX
L106:
	MOV	EAX,EDX
	ADD	EAX,DWORD [_processctl]
	CMP	DWORD [4092+EAX],0
	JE	L109
	INC	ECX
	ADD	EDX,120
	CMP	ECX,999
	JLE	L106
	XOR	EAX,EAX
L100:
	POP	EBP
	RET
L109:
	ADD	EAX,4088
	MOV	DWORD [4+EAX],1
	MOV	DWORD [52+EAX],514
	MOV	DWORD [56+EAX],0
	MOV	DWORD [60+EAX],0
	MOV	DWORD [64+EAX],0
	MOV	DWORD [68+EAX],0
	MOV	DWORD [76+EAX],0
	MOV	DWORD [80+EAX],0
	MOV	DWORD [84+EAX],0
	MOV	DWORD [88+EAX],0
	MOV	DWORD [100+EAX],0
	MOV	DWORD [104+EAX],0
	MOV	DWORD [108+EAX],0
	MOV	DWORD [112+EAX],0
	MOV	DWORD [116+EAX],1073741824
	JMP	L100
	GLOBAL	_processRun
_processRun:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	ESI,DWORD [12+EBP]
	MOV	EAX,DWORD [16+EBP]
	MOV	EBX,DWORD [8+EBP]
	TEST	ESI,ESI
	JS	L115
L111:
	TEST	EAX,EAX
	JLE	L112
	MOV	DWORD [12+EBX],EAX
L112:
	CMP	DWORD [4+EBX],2
	JE	L116
L113:
	CMP	DWORD [4+EBX],2
	JE	L114
	MOV	DWORD [8+EBX],ESI
	PUSH	EBX
	CALL	_processAdd
	POP	ECX
L114:
	MOV	EAX,DWORD [_processctl]
	MOV	BYTE [4+EAX],1
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L116:
	CMP	DWORD [8+EBX],ESI
	JE	L113
	PUSH	EBX
	CALL	_processRemove
	POP	EAX
	JMP	L113
L115:
	MOV	ESI,DWORD [8+EBX]
	JMP	L111
	GLOBAL	_processSwitch
_processSwitch:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	EBX,DWORD [_processctl]
	MOV	EDX,DWORD [EBX]
	IMUL	EDX,EDX,408
	LEA	EDX,DWORD [EDX+EBX*1]
	LEA	ECX,DWORD [8+EDX]
	MOV	EAX,DWORD [4+ECX]
	MOV	ESI,DWORD [8+ECX+EAX*4]
	INC	EAX
	MOV	DWORD [4+ECX],EAX
	CMP	EAX,DWORD [8+EDX]
	JE	L121
L118:
	CMP	BYTE [4+EBX],0
	JNE	L122
L119:
	MOV	EAX,DWORD [4+ECX]
	MOV	EBX,DWORD [8+ECX+EAX*4]
	PUSH	DWORD [12+EBX]
	PUSH	DWORD [_mpTimer]
	CALL	_timerSetTime
	CMP	EBX,ESI
	POP	ECX
	POP	EAX
	JE	L117
	PUSH	DWORD [EBX]
	PUSH	0
	CALL	_farJmp
	POP	EAX
	POP	EDX
L117:
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L122:
	CALL	_processSwitchSub
	MOV	EDX,DWORD [_processctl]
	MOV	EAX,DWORD [EDX]
	IMUL	EAX,EAX,408
	LEA	ECX,DWORD [8+EAX+EDX*1]
	JMP	L119
L121:
	MOV	DWORD [4+ECX],0
	JMP	L118
	GLOBAL	_processSleep
_processSleep:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	ESI,DWORD [8+EBP]
	CMP	DWORD [4+ESI],2
	JE	L126
L123:
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L126:
	CALL	_processNow
	PUSH	ESI
	MOV	EBX,EAX
	CALL	_processRemove
	POP	ECX
	CMP	ESI,EBX
	JNE	L123
	CALL	_processSwitchSub
	CALL	_processNow
	PUSH	DWORD [EAX]
	PUSH	0
	CALL	_farJmp
	POP	EAX
	POP	EDX
	JMP	L123
	GLOBAL	_init_pic
_init_pic:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	255
	PUSH	33
	CALL	_io_out8
	PUSH	255
	PUSH	161
	CALL	_io_out8
	PUSH	17
	PUSH	32
	CALL	_io_out8
	PUSH	32
	PUSH	33
	CALL	_io_out8
	ADD	ESP,32
	PUSH	4
	PUSH	33
	CALL	_io_out8
	PUSH	1
	PUSH	33
	CALL	_io_out8
	PUSH	17
	PUSH	160
	CALL	_io_out8
	PUSH	40
	PUSH	161
	CALL	_io_out8
	ADD	ESP,32
	PUSH	2
	PUSH	161
	CALL	_io_out8
	PUSH	1
	PUSH	161
	CALL	_io_out8
	PUSH	251
	PUSH	33
	CALL	_io_out8
	PUSH	255
	PUSH	161
	CALL	_io_out8
	LEAVE
	RET
	GLOBAL	_interruptHandler21
_interruptHandler21:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	97
	PUSH	32
	CALL	_io_out8
	PUSH	96
	CALL	_io_in8
	ADD	EAX,DWORD [_keyData0]
	PUSH	EAX
	PUSH	DWORD [_keybuf]
	CALL	_QueuePush
	LEAVE
	RET
	GLOBAL	_interruptHandler27
_interruptHandler27:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	103
	PUSH	32
	CALL	_io_out8
	LEAVE
	RET
	GLOBAL	_interruptHandler2c
_interruptHandler2c:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	100
	PUSH	160
	CALL	_io_out8
	PUSH	98
	PUSH	32
	CALL	_io_out8
	PUSH	96
	CALL	_io_in8
	ADD	EAX,DWORD [_mouseData0]
	PUSH	EAX
	PUSH	DWORD [_mousebuf]
	CALL	_QueuePush
	LEAVE
	RET
	GLOBAL	_interruptHandler20
_interruptHandler20:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	XOR	ESI,ESI
	PUSH	96
	PUSH	32
	CALL	_io_out8
	MOV	EAX,DWORD [_timerctl]
	INC	EAX
	MOV	DWORD [_timerctl],EAX
	CMP	DWORD [_timerctl+4],EAX
	POP	ECX
	POP	EBX
	JA	L131
	MOV	EBX,DWORD [_timerctl+8]
L133:
	MOV	EAX,DWORD [4+EBX]
	CMP	EAX,DWORD [_timerctl]
	JA	L134
	MOV	DWORD [8+EBX],1
	CMP	EBX,DWORD [_mpTimer]
	JE	L137
	MOVZX	EAX,BYTE [16+EBX]
	PUSH	EAX
	PUSH	DWORD [12+EBX]
	CALL	_QueuePush
	POP	EAX
	POP	EDX
L138:
	MOV	EBX,DWORD [EBX]
	JMP	L133
L137:
	MOV	ESI,1
	JMP	L138
L134:
	MOV	DWORD [_timerctl+4],EAX
	MOV	DWORD [_timerctl+8],EBX
	MOV	EAX,ESI
	TEST	AL,AL
	JNE	L140
L131:
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L140:
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	JMP	_processSwitch
	GLOBAL	_setSegmdesc
_setSegmdesc:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EDX,DWORD [12+EBP]
	MOV	ECX,DWORD [16+EBP]
	MOV	EBX,DWORD [8+EBP]
	MOV	EAX,DWORD [20+EBP]
	CMP	EDX,1048575
	JBE	L142
	SHR	EDX,12
	OR	EAX,32768
L142:
	MOV	WORD [EBX],DX
	MOV	BYTE [5+EBX],AL
	SHR	EDX,16
	SAR	EAX,8
	AND	EDX,15
	MOV	WORD [2+EBX],CX
	AND	EAX,-16
	SAR	ECX,16
	OR	EDX,EAX
	MOV	BYTE [4+EBX],CL
	MOV	BYTE [6+EBX],DL
	SAR	ECX,8
	MOV	BYTE [7+EBX],CL
	POP	EBX
	POP	EBP
	RET
	GLOBAL	_setGatedesc
_setGatedesc:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EDX,DWORD [8+EBP]
	MOV	EAX,DWORD [16+EBP]
	MOV	EBX,DWORD [20+EBP]
	MOV	ECX,DWORD [12+EBP]
	MOV	WORD [2+EDX],AX
	MOV	BYTE [5+EDX],BL
	MOV	WORD [EDX],CX
	MOV	EAX,EBX
	SAR	EAX,8
	SAR	ECX,16
	MOV	BYTE [4+EDX],AL
	MOV	WORD [6+EDX],CX
	POP	EBX
	POP	EBP
	RET
	GLOBAL	_initGdtit
_initGdtit:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	ESI,2555904
	MOV	EBX,8191
L149:
	PUSH	0
	PUSH	0
	PUSH	0
	PUSH	ESI
	ADD	ESI,8
	CALL	_setSegmdesc
	ADD	ESP,16
	DEC	EBX
	JNS	L149
	PUSH	16530
	MOV	EBX,255
	PUSH	0
	PUSH	-1
	PUSH	2555912
	CALL	_setSegmdesc
	PUSH	16538
	PUSH	2621440
	PUSH	524287
	PUSH	2555920
	CALL	_setSegmdesc
	ADD	ESP,32
	PUSH	2555904
	PUSH	65535
	CALL	_loadGdtr
	POP	ESI
	POP	EAX
	MOV	ESI,2553856
L154:
	PUSH	0
	PUSH	0
	PUSH	0
	PUSH	ESI
	ADD	ESI,8
	CALL	_setGatedesc
	ADD	ESP,16
	DEC	EBX
	JNS	L154
	PUSH	2553856
	PUSH	2047
	CALL	_loadIdtr
	PUSH	142
	PUSH	16
	PUSH	_asm_interruptHandler20
	PUSH	2554112
	CALL	_setGatedesc
	PUSH	142
	PUSH	16
	PUSH	_asm_interruptHandler21
	PUSH	2554120
	CALL	_setGatedesc
	ADD	ESP,40
	PUSH	142
	PUSH	16
	PUSH	_asm_interruptHandler27
	PUSH	2554168
	CALL	_setGatedesc
	PUSH	142
	PUSH	16
	PUSH	_asm_interruptHandler2c
	PUSH	2554208
	CALL	_setGatedesc
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
	GLOBAL	_set_palette
_set_palette:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	ECX
	MOV	EBX,DWORD [8+EBP]
	MOV	EDI,DWORD [12+EBP]
	MOV	ESI,DWORD [16+EBP]
	CALL	_io_load_eflags
	MOV	DWORD [-16+EBP],EAX
	CALL	_io_cli
	PUSH	EBX
	PUSH	968
	CALL	_io_out8
	CMP	EBX,EDI
	POP	EAX
	POP	EDX
	JGE	L166
	SUB	EDI,EBX
	MOV	EBX,EDI
L164:
	MOV	AL,BYTE [ESI]
	SHR	AL,2
	MOVZX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	MOV	AL,BYTE [1+ESI]
	SHR	AL,2
	MOVZX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	MOV	AL,BYTE [2+ESI]
	SHR	AL,2
	ADD	ESI,3
	MOVZX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	ADD	ESP,24
	DEC	EBX
	JNE	L164
L166:
	MOV	EAX,DWORD [-16+EBP]
	MOV	DWORD [8+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_io_store_eflags
[SECTION .data]
_table_rgb.0:
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	-1
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-58
	DB	-58
	DB	-58
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	-124
	DB	-124
	DB	-124
[SECTION .text]
	GLOBAL	_init_palette
_init_palette:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	_table_rgb.0
	PUSH	15
	PUSH	0
	CALL	_set_palette
	LEAVE
	RET
	GLOBAL	_boxFill8
_boxFill8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EDI
	PUSH	EDI
	MOV	AL,BYTE [16+EBP]
	MOV	ECX,DWORD [24+EBP]
	MOV	EDI,DWORD [28+EBP]
	MOV	BYTE [-13+EBP],AL
	CMP	ECX,DWORD [32+EBP]
	JG	L180
	MOV	EBX,DWORD [12+EBP]
	IMUL	EBX,ECX
L178:
	MOV	EDX,DWORD [20+EBP]
	CMP	EDX,EDI
	JG	L182
	MOV	ESI,DWORD [8+EBP]
	ADD	ESI,EBX
	ADD	ESI,EDX
	MOV	DWORD [-20+EBP],ESI
L177:
	MOV	ESI,DWORD [-20+EBP]
	MOV	AL,BYTE [-13+EBP]
	INC	EDX
	MOV	BYTE [ESI],AL
	INC	ESI
	MOV	DWORD [-20+EBP],ESI
	CMP	EDX,EDI
	JLE	L177
L182:
	INC	ECX
	ADD	EBX,DWORD [12+EBP]
	CMP	ECX,DWORD [32+EBP]
	JLE	L178
L180:
	POP	EBX
	POP	ESI
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_init_GUI
_init_GUI:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,12
	MOV	EAX,DWORD [16+EBP]
	MOV	EDI,DWORD [12+EBP]
	SUB	EAX,29
	DEC	EDI
	PUSH	EAX
	PUSH	EDI
	PUSH	0
	PUSH	0
	PUSH	14
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,28
	PUSH	EAX
	PUSH	EDI
	PUSH	EAX
	PUSH	0
	PUSH	8
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EAX,DWORD [16+EBP]
	ADD	ESP,56
	SUB	EAX,27
	PUSH	EAX
	PUSH	EDI
	PUSH	EAX
	PUSH	0
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EAX,DWORD [16+EBP]
	DEC	EAX
	PUSH	EAX
	MOV	EAX,DWORD [16+EBP]
	PUSH	EDI
	SUB	EAX,26
	PUSH	EAX
	PUSH	0
	PUSH	8
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	ESI,DWORD [16+EBP]
	ADD	ESP,56
	SUB	ESI,24
	PUSH	ESI
	PUSH	59
	PUSH	ESI
	PUSH	3
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,4
	PUSH	EAX
	MOV	DWORD [-16+EBP],EAX
	PUSH	2
	PUSH	ESI
	PUSH	2
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	ADD	ESP,56
	PUSH	DWORD [-16+EBP]
	PUSH	59
	PUSH	DWORD [-16+EBP]
	PUSH	3
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,5
	PUSH	EAX
	MOV	EAX,DWORD [16+EBP]
	PUSH	59
	SUB	EAX,23
	PUSH	EAX
	MOV	DWORD [-20+EBP],EAX
	PUSH	59
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EAX,DWORD [16+EBP]
	ADD	ESP,56
	SUB	EAX,3
	MOV	DWORD [-24+EBP],EAX
	PUSH	EAX
	PUSH	59
	PUSH	EAX
	PUSH	2
	PUSH	0
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	PUSH	DWORD [-24+EBP]
	PUSH	60
	PUSH	ESI
	PUSH	60
	PUSH	0
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EDI,DWORD [12+EBP]
	ADD	ESP,56
	MOV	EBX,DWORD [12+EBP]
	SUB	EBX,4
	SUB	EDI,47
	PUSH	ESI
	PUSH	EBX
	PUSH	ESI
	PUSH	EDI
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	PUSH	DWORD [-16+EBP]
	PUSH	EDI
	PUSH	DWORD [-20+EBP]
	PUSH	EDI
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	ADD	ESP,56
	PUSH	DWORD [-24+EBP]
	PUSH	EBX
	PUSH	DWORD [-24+EBP]
	PUSH	EDI
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EAX,DWORD [12+EBP]
	PUSH	DWORD [-24+EBP]
	SUB	EAX,3
	PUSH	EAX
	PUSH	ESI
	PUSH	EAX
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_putFont8
_putFont8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	ESI,ESI
	PUSH	EBX
	MOV	EDI,DWORD [28+EBP]
	MOV	BL,BYTE [24+EBP]
L197:
	MOV	EAX,DWORD [20+EBP]
	MOV	EDX,DWORD [16+EBP]
	ADD	EAX,ESI
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [8+EBP]
	LEA	ECX,DWORD [EDX+EAX*1]
	MOV	DL,BYTE [ESI+EDI*1]
	TEST	DL,DL
	JNS	L189
	MOV	BYTE [ECX],BL
L189:
	MOV	AL,DL
	AND	EAX,64
	TEST	AL,AL
	JE	L190
	MOV	BYTE [1+ECX],BL
L190:
	MOV	AL,DL
	AND	EAX,32
	TEST	AL,AL
	JE	L191
	MOV	BYTE [2+ECX],BL
L191:
	MOV	AL,DL
	AND	EAX,16
	TEST	AL,AL
	JE	L192
	MOV	BYTE [3+ECX],BL
L192:
	MOV	AL,DL
	AND	EAX,8
	TEST	AL,AL
	JE	L193
	MOV	BYTE [4+ECX],BL
L193:
	MOV	AL,DL
	AND	EAX,4
	TEST	AL,AL
	JE	L194
	MOV	BYTE [5+ECX],BL
L194:
	MOV	AL,DL
	AND	EAX,2
	TEST	AL,AL
	JE	L195
	MOV	BYTE [6+ECX],BL
L195:
	AND	EDX,1
	TEST	DL,DL
	JE	L187
	MOV	BYTE [7+ECX],BL
L187:
	INC	ESI
	CMP	ESI,15
	JLE	L197
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_putFont8_asc
_putFont8_asc:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EAX
	MOV	EBX,DWORD [28+EBP]
	MOV	AL,BYTE [24+EBP]
	MOV	BYTE [-13+EBP],AL
	MOV	ESI,DWORD [16+EBP]
	MOV	EDI,DWORD [20+EBP]
	CMP	BYTE [EBX],0
	JNE	L205
L207:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L205:
	MOVZX	EAX,BYTE [EBX]
	SAL	EAX,4
	INC	EBX
	ADD	EAX,_font
	PUSH	EAX
	MOVSX	EAX,BYTE [-13+EBP]
	PUSH	EAX
	PUSH	EDI
	PUSH	ESI
	ADD	ESI,8
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_putFont8
	ADD	ESP,24
	CMP	BYTE [EBX],0
	JNE	L205
	JMP	L207
	GLOBAL	_putFont8AscSheet
_putFont8AscSheet:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,12
	MOV	EAX,DWORD [8+EBP]
	MOV	EDI,DWORD [16+EBP]
	MOV	DWORD [-16+EBP],EAX
	MOV	EBX,DWORD [20+EBP]
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [-20+EBP],EAX
	MOV	EAX,DWORD [28+EBP]
	MOV	DWORD [-24+EBP],EAX
	LEA	EAX,DWORD [15+EDI]
	PUSH	EAX
	MOV	EAX,DWORD [-20+EBP]
	MOV	ESI,DWORD [32+EBP]
	MOVSX	EBX,BL
	LEA	ESI,DWORD [EAX+ESI*8]
	LEA	EAX,DWORD [-1+ESI]
	PUSH	EAX
	PUSH	EDI
	PUSH	DWORD [-20+EBP]
	MOVZX	EAX,BYTE [24+EBP]
	PUSH	EAX
	MOV	EAX,DWORD [-16+EBP]
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	PUSH	DWORD [-24+EBP]
	PUSH	EBX
	PUSH	EDI
	PUSH	DWORD [-20+EBP]
	MOV	EAX,DWORD [-16+EBP]
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_putFont8_asc
	MOV	DWORD [16+EBP],EDI
	LEA	EAX,DWORD [16+EDI]
	MOV	DWORD [20+EBP],ESI
	MOV	DWORD [24+EBP],EAX
	ADD	ESP,52
	MOV	EAX,DWORD [-20+EBP]
	MOV	DWORD [12+EBP],EAX
	MOV	EAX,DWORD [-16+EBP]
	MOV	DWORD [8+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_sheetRefresh
[SECTION .data]
_cursor.1:
	DB	"*..............."
	DB	"**.............."
	DB	"*O*............."
	DB	"*OO*............"
	DB	"*OOO*..........."
	DB	"*OOOO*.........."
	DB	"*OOOOO*........."
	DB	"*OOOOOO*........"
	DB	"*OOOOOOO*......."
	DB	"*OOOO*****......"
	DB	"*OO*O*.........."
	DB	"*O*.*O*........."
	DB	"**..*O*........."
	DB	"*....*O*........"
	DB	".....*O*........"
	DB	"......*........."
[SECTION .text]
	GLOBAL	_initMouseCursor8
_initMouseCursor8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	EDI,EDI
	PUSH	EBX
	XOR	EBX,EBX
	PUSH	EAX
	MOV	AL,BYTE [12+EBP]
	MOV	ESI,DWORD [8+EBP]
	MOV	BYTE [-13+EBP],AL
L222:
	XOR	EDX,EDX
L221:
	LEA	EAX,DWORD [EDX+EDI*1]
	CMP	BYTE [_cursor.1+EAX],42
	JE	L227
L218:
	CMP	BYTE [_cursor.1+EAX],79
	JE	L228
L219:
	CMP	BYTE [_cursor.1+EAX],46
	JE	L229
L216:
	INC	EDX
	CMP	EDX,15
	JLE	L221
	INC	EBX
	ADD	EDI,16
	CMP	EBX,15
	JLE	L222
	POP	EAX
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L229:
	MOV	CL,BYTE [-13+EBP]
	MOV	BYTE [EAX+ESI*1],CL
	JMP	L216
L228:
	MOV	BYTE [EAX+ESI*1],7
	JMP	L219
L227:
	MOV	BYTE [EAX+ESI*1],0
	JMP	L218
	GLOBAL	_putblock8_8
_putblock8_8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	ESI,ESI
	PUSH	EBX
	SUB	ESP,12
	CMP	ESI,DWORD [20+EBP]
	JGE	L242
	XOR	EDI,EDI
L240:
	XOR	EBX,EBX
	CMP	EBX,DWORD [16+EBP]
	JGE	L244
	MOV	EAX,DWORD [32+EBP]
	ADD	EAX,EDI
	MOV	DWORD [-20+EBP],EAX
L239:
	MOV	EAX,DWORD [28+EBP]
	MOV	EDX,DWORD [24+EBP]
	ADD	EAX,ESI
	ADD	EDX,EBX
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDX
	MOV	ECX,DWORD [8+EBP]
	MOV	EDX,DWORD [-20+EBP]
	INC	EBX
	MOV	DL,BYTE [EDX]
	MOV	BYTE [EAX+ECX*1],DL
	INC	DWORD [-20+EBP]
	CMP	EBX,DWORD [16+EBP]
	JL	L239
L244:
	INC	ESI
	ADD	EDI,DWORD [36+EBP]
	CMP	ESI,DWORD [20+EBP]
	JL	L240
L242:
	ADD	ESP,12
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_memtest
_memtest:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	XOR	ESI,ESI
	CALL	_io_load_eflags
	OR	EAX,262144
	PUSH	EAX
	CALL	_io_store_eflags
	CALL	_io_load_eflags
	POP	EDX
	TEST	EAX,262144
	JE	L246
	MOV	ESI,1
L246:
	AND	EAX,-262145
	PUSH	EAX
	CALL	_io_store_eflags
	MOV	EAX,ESI
	POP	EBX
	TEST	AL,AL
	JNE	L249
L247:
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_memtest_sub
	MOV	EBX,EAX
	POP	EAX
	MOV	EAX,ESI
	POP	EDX
	TEST	AL,AL
	JNE	L250
L248:
	LEA	ESP,DWORD [-8+EBP]
	MOV	EAX,EBX
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L250:
	CALL	_loadCr0
	AND	EAX,-1610612737
	PUSH	EAX
	CALL	_storeCr0
	POP	EAX
	JMP	L248
L249:
	CALL	_loadCr0
	OR	EAX,1610612736
	PUSH	EAX
	CALL	_storeCr0
	POP	ECX
	JMP	L247
	GLOBAL	_memsegTotal
_memsegTotal:
	PUSH	EBP
	XOR	EAX,EAX
	MOV	EBP,ESP
	XOR	EDX,EDX
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	MOV	ECX,DWORD [EBX]
	CMP	EAX,ECX
	JAE	L258
L256:
	ADD	EAX,DWORD [20+EBX+EDX*8]
	INC	EDX
	CMP	EDX,ECX
	JB	L256
L258:
	POP	EBX
	POP	EBP
	RET
	GLOBAL	_memsegInit
_memsegInit:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [EAX],0
	MOV	DWORD [4+EAX],0
	MOV	DWORD [8+EAX],0
	MOV	DWORD [12+EAX],0
	POP	EBP
	RET
	GLOBAL	_memsegAlloc
_memsegAlloc:
	PUSH	EBP
	XOR	ECX,ECX
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	ESI,DWORD [12+EBP]
	MOV	EBX,DWORD [8+EBP]
	MOV	EAX,DWORD [EBX]
	CMP	ECX,EAX
	JAE	L274
L272:
	MOV	EDX,DWORD [20+EBX+ECX*8]
	CMP	EDX,ESI
	JAE	L276
	INC	ECX
	CMP	ECX,EAX
	JB	L272
L274:
	XOR	EAX,EAX
L260:
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L276:
	MOV	EDI,DWORD [16+EBX+ECX*8]
	LEA	EAX,DWORD [ESI+EDI*1]
	MOV	DWORD [16+EBX+ECX*8],EAX
	MOV	EAX,EDX
	SUB	EAX,ESI
	MOV	DWORD [20+EBX+ECX*8],EAX
	TEST	EAX,EAX
	JNE	L266
	MOV	EAX,DWORD [EBX]
	DEC	EAX
	MOV	DWORD [EBX],EAX
	CMP	ECX,EAX
	JAE	L266
	MOV	ESI,EAX
L271:
	MOV	EAX,DWORD [24+EBX+ECX*8]
	MOV	EDX,DWORD [28+EBX+ECX*8]
	MOV	DWORD [16+EBX+ECX*8],EAX
	MOV	DWORD [20+EBX+ECX*8],EDX
	INC	ECX
	CMP	ECX,ESI
	JB	L271
L266:
	MOV	EAX,EDI
	JMP	L260
	GLOBAL	_memsegFree
_memsegFree:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	ESI,DWORD [8+EBP]
	PUSH	EBX
	XOR	EBX,EBX
	MOV	EDI,DWORD [ESI]
	CMP	EBX,EDI
	JGE	L279
L283:
	MOV	EAX,DWORD [12+EBP]
	CMP	DWORD [16+ESI+EBX*8],EAX
	JA	L279
	INC	EBX
	CMP	EBX,EDI
	JL	L283
L279:
	TEST	EBX,EBX
	JLE	L284
	MOV	EDX,DWORD [12+ESI+EBX*8]
	MOV	EAX,DWORD [8+ESI+EBX*8]
	ADD	EAX,EDX
	CMP	EAX,DWORD [12+EBP]
	JE	L304
L284:
	CMP	EBX,EDI
	JGE	L291
	MOV	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [16+EBP]
	CMP	EAX,DWORD [16+ESI+EBX*8]
	JE	L305
L291:
	CMP	EDI,4089
	JG	L292
	MOV	ECX,EDI
	CMP	EDI,EBX
	JLE	L302
L297:
	MOV	EAX,DWORD [8+ESI+ECX*8]
	MOV	EDX,DWORD [12+ESI+ECX*8]
	MOV	DWORD [16+ESI+ECX*8],EAX
	MOV	DWORD [20+ESI+ECX*8],EDX
	DEC	ECX
	CMP	ECX,EBX
	JG	L297
L302:
	LEA	EAX,DWORD [1+EDI]
	MOV	DWORD [ESI],EAX
	CMP	DWORD [4+ESI],EAX
	JGE	L298
	MOV	DWORD [4+ESI],EAX
L298:
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [16+ESI+EBX*8],EAX
	MOV	EAX,DWORD [16+EBP]
	MOV	DWORD [20+ESI+EBX*8],EAX
L303:
	XOR	EAX,EAX
L277:
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L292:
	MOV	EAX,DWORD [16+EBP]
	INC	DWORD [12+ESI]
	ADD	DWORD [8+ESI],EAX
	OR	EAX,-1
	JMP	L277
L305:
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [16+ESI+EBX*8],EAX
	MOV	EAX,DWORD [16+EBP]
	ADD	DWORD [20+ESI+EBX*8],EAX
	JMP	L303
L304:
	ADD	EDX,DWORD [16+EBP]
	MOV	DWORD [12+ESI+EBX*8],EDX
	CMP	EBX,DWORD [ESI]
	JGE	L303
	MOV	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [16+EBP]
	CMP	EAX,DWORD [16+ESI+EBX*8]
	JNE	L303
	ADD	EDX,DWORD [20+ESI+EBX*8]
	MOV	DWORD [12+ESI+EBX*8],EDX
	MOV	EAX,DWORD [ESI]
	DEC	EAX
	MOV	DWORD [ESI],EAX
	CMP	EBX,EAX
	JGE	L303
	MOV	ECX,EAX
L290:
	MOV	EAX,DWORD [24+ESI+EBX*8]
	MOV	EDX,DWORD [28+ESI+EBX*8]
	MOV	DWORD [16+ESI+EBX*8],EAX
	MOV	DWORD [20+ESI+EBX*8],EDX
	INC	EBX
	CMP	EBX,ECX
	JL	L290
	JMP	L303
	GLOBAL	_memsegAlloc4K
_memsegAlloc4K:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [12+EBP]
	ADD	EAX,4095
	AND	EAX,-4096
	MOV	DWORD [12+EBP],EAX
	POP	EBP
	JMP	_memsegAlloc
	GLOBAL	_memsegFree4K
_memsegFree4K:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [16+EBP]
	ADD	EAX,4095
	AND	EAX,-4096
	MOV	DWORD [16+EBP],EAX
	POP	EBP
	JMP	_memsegFree
	GLOBAL	_shtctlInit
_shtctlInit:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	ESI,DWORD [8+EBP]
	PUSH	10260
	MOV	EDI,DWORD [16+EBP]
	PUSH	ESI
	CALL	_memsegAlloc4K
	POP	ECX
	MOV	EBX,EAX
	POP	EAX
	XOR	EAX,EAX
	TEST	EBX,EBX
	JE	L308
	MOV	EAX,DWORD [20+EBP]
	IMUL	EAX,EDI
	PUSH	EAX
	PUSH	ESI
	CALL	_memsegAlloc4K
	TEST	EAX,EAX
	MOV	DWORD [4+EBX],EAX
	POP	ECX
	POP	EDX
	JE	L319
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [8+EBX],EDI
	MOV	DWORD [EBX],EAX
	LEA	EDX,DWORD [9180+EBX]
	MOV	EAX,DWORD [20+EBP]
	MOV	DWORD [12+EBX],EAX
	MOV	EAX,EBX
	MOV	DWORD [16+EBX],-1
L315:
	MOV	DWORD [1072+EAX],0
	MOV	DWORD [1076+EAX],EBX
	ADD	EAX,36
	CMP	EAX,EDX
	JLE	L315
L318:
	MOV	EAX,EBX
L308:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L319:
	PUSH	10260
	PUSH	EBX
	PUSH	ESI
	CALL	_memsegFree4K
	JMP	L318
	GLOBAL	_sheetAlloc
_sheetAlloc:
	PUSH	EBP
	XOR	EDX,EDX
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	ADD	EAX,1044
L326:
	CMP	DWORD [28+EAX],0
	JE	L329
	INC	EDX
	ADD	EAX,36
	CMP	EDX,255
	JLE	L326
	XOR	EAX,EAX
L320:
	POP	EBP
	RET
L329:
	MOV	DWORD [28+EAX],1
	MOV	DWORD [24+EAX],-1
	JMP	L320
	GLOBAL	_sheetSetbuf
_sheetSetbuf:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EDX,DWORD [8+EBP]
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [EDX],EAX
	MOV	EAX,DWORD [16+EBP]
	MOV	DWORD [4+EDX],EAX
	MOV	EAX,DWORD [20+EBP]
	MOV	DWORD [8+EDX],EAX
	MOV	EAX,DWORD [24+EBP]
	MOV	DWORD [20+EDX],EAX
	POP	EBP
	RET
	GLOBAL	_sheetRefreshMap
_sheetRefreshMap:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,40
	MOV	EAX,DWORD [8+EBP]
	CMP	DWORD [12+EBP],0
	MOV	EAX,DWORD [4+EAX]
	MOV	DWORD [-40+EBP],EAX
	JS	L362
L332:
	CMP	DWORD [16+EBP],0
	JS	L363
L333:
	MOV	EDX,DWORD [8+EBP]
	MOV	EAX,DWORD [8+EDX]
	CMP	DWORD [20+EBP],EAX
	JLE	L334
	MOV	DWORD [20+EBP],EAX
L334:
	MOV	ESI,DWORD [8+EBP]
	MOV	EAX,DWORD [12+ESI]
	CMP	DWORD [24+EBP],EAX
	JLE	L335
	MOV	DWORD [24+EBP],EAX
L335:
	MOV	EAX,DWORD [8+EBP]
	MOV	EDI,DWORD [28+EBP]
	MOV	DWORD [-16+EBP],EDI
	CMP	EDI,DWORD [16+EAX]
	JG	L357
L355:
	MOV	ESI,DWORD [8+EBP]
	MOV	EDX,DWORD [-16+EBP]
	MOV	EBX,DWORD [16+EBP]
	MOV	ECX,DWORD [20+ESI+EDX*4]
	MOV	EAX,ECX
	SUB	EAX,ESI
	MOV	EDI,DWORD [ECX]
	SUB	EAX,1044
	MOV	EDX,DWORD [16+ECX]
	SAR	EAX,2
	MOV	DWORD [-32+EBP],EDI
	IMUL	EAX,EAX,954437177
	MOV	EDI,DWORD [24+EBP]
	SUB	EBX,EDX
	SUB	EDI,EDX
	MOV	BYTE [-33+EBP],AL
	MOV	ESI,DWORD [20+EBP]
	MOV	EDX,DWORD [12+EBP]
	MOV	EAX,DWORD [12+ECX]
	MOV	DWORD [-44+EBP],EDI
	SUB	ESI,EAX
	SUB	EDX,EAX
	MOV	DWORD [-52+EBP],ESI
	MOV	DWORD [-28+EBP],EDX
	JS	L364
L340:
	TEST	EBX,EBX
	JS	L365
L341:
	MOV	EAX,DWORD [4+ECX]
	CMP	DWORD [-52+EBP],EAX
	JLE	L342
	MOV	DWORD [-52+EBP],EAX
L342:
	MOV	EAX,DWORD [8+ECX]
	CMP	DWORD [-44+EBP],EAX
	JLE	L343
	MOV	DWORD [-44+EBP],EAX
L343:
	CMP	EBX,DWORD [-44+EBP]
	JGE	L359
L354:
	MOV	ESI,DWORD [16+ECX]
	MOV	EDX,DWORD [-28+EBP]
	ADD	ESI,EBX
	CMP	EDX,DWORD [-52+EBP]
	MOV	DWORD [-24+EBP],ESI
	JGE	L361
L353:
	MOV	EAX,EBX
	MOV	EDI,DWORD [12+ECX]
	IMUL	EAX,DWORD [4+ECX]
	ADD	EDI,EDX
	MOV	ESI,DWORD [-32+EBP]
	ADD	EAX,EDX
	MOV	DWORD [-20+EBP],EDI
	MOVZX	ESI,BYTE [EAX+ESI*1]
	CMP	ESI,DWORD [20+ECX]
	JE	L350
	MOV	EDI,DWORD [8+EBP]
	MOV	EAX,DWORD [-24+EBP]
	MOV	ESI,DWORD [-40+EBP]
	IMUL	EAX,DWORD [8+EDI]
	ADD	EAX,DWORD [-20+EBP]
	MOV	DWORD [-48+EBP],EAX
	MOV	AL,BYTE [-33+EBP]
	MOV	EDI,DWORD [-48+EBP]
	MOV	BYTE [EDI+ESI*1],AL
L350:
	INC	EDX
	CMP	EDX,DWORD [-52+EBP]
	JL	L353
L361:
	INC	EBX
	CMP	EBX,DWORD [-44+EBP]
	JL	L354
L359:
	MOV	EDX,DWORD [8+EBP]
	INC	DWORD [-16+EBP]
	MOV	EAX,DWORD [-16+EBP]
	CMP	EAX,DWORD [16+EDX]
	JLE	L355
L357:
	ADD	ESP,40
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L365:
	XOR	EBX,EBX
	JMP	L341
L364:
	MOV	DWORD [-28+EBP],0
	JMP	L340
L363:
	MOV	DWORD [16+EBP],0
	JMP	L333
L362:
	MOV	DWORD [12+EBP],0
	JMP	L332
	GLOBAL	_sheetUpdown
_sheetUpdown:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	EDI,DWORD [8+EBP]
	PUSH	EBX
	MOV	ESI,DWORD [12+EBP]
	MOV	EBX,DWORD [32+EDI]
	MOV	EAX,DWORD [24+EDI]
	MOV	EDX,DWORD [16+EBX]
	INC	EDX
	CMP	ESI,EDX
	JLE	L367
	MOV	ESI,EDX
L367:
	CMP	ESI,-1
	JGE	L368
	OR	ESI,-1
L368:
	MOV	DWORD [24+EDI],ESI
	CMP	EAX,ESI
	JLE	L369
	TEST	ESI,ESI
	JS	L370
	MOV	ECX,EAX
L375:
	MOV	EAX,DWORD [16+EBX+ECX*4]
	MOV	DWORD [20+EBX+ECX*4],EAX
	MOV	DWORD [24+EAX],ECX
	DEC	ECX
	CMP	ECX,ESI
	JG	L375
	MOV	DWORD [20+EBX+ESI*4],EDI
	LEA	EBX,DWORD [1+ESI]
	PUSH	EBX
	MOV	ECX,DWORD [16+EDI]
	MOV	EAX,ECX
	ADD	EAX,DWORD [8+EDI]
	PUSH	EAX
	MOV	EDX,DWORD [12+EDI]
	MOV	EAX,EDX
	ADD	EAX,DWORD [4+EDI]
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	PUSH	DWORD [32+EDI]
	CALL	_sheetRefreshMap
	PUSH	EBX
L404:
	MOV	ECX,DWORD [16+EDI]
	MOV	EAX,ECX
	ADD	EAX,DWORD [8+EDI]
	PUSH	EAX
	MOV	EDX,DWORD [12+EDI]
	MOV	EAX,EDX
	ADD	EAX,DWORD [4+EDI]
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	PUSH	DWORD [32+EDI]
	CALL	_sheetRefreshSub
	ADD	ESP,48
L366:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L370:
	MOV	EDX,DWORD [16+EBX]
	CMP	EDX,EAX
	JLE	L377
	MOV	ECX,EAX
	CMP	EAX,EDX
	JGE	L377
L382:
	MOV	EAX,DWORD [24+EBX+ECX*4]
	MOV	DWORD [20+EBX+ECX*4],EAX
	MOV	DWORD [24+EAX],ECX
	INC	ECX
	CMP	ECX,DWORD [16+EBX]
	JL	L382
L377:
	DEC	DWORD [16+EBX]
	PUSH	0
	MOV	ECX,DWORD [16+EDI]
	MOV	EAX,ECX
	ADD	EAX,DWORD [8+EDI]
	PUSH	EAX
	MOV	EDX,DWORD [12+EDI]
	MOV	EAX,EDX
	ADD	EAX,DWORD [4+EDI]
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	PUSH	DWORD [32+EDI]
	CALL	_sheetRefreshMap
	PUSH	0
	JMP	L404
L369:
	CMP	EAX,ESI
	JGE	L366
	TEST	EAX,EAX
	JS	L385
	MOV	ECX,EAX
	CMP	EAX,ESI
	JGE	L401
L390:
	MOV	EAX,DWORD [24+EBX+ECX*4]
	MOV	DWORD [20+EBX+ECX*4],EAX
	MOV	DWORD [24+EAX],ECX
	INC	ECX
	CMP	ECX,ESI
	JL	L390
L401:
	MOV	DWORD [20+EBX+ESI*4],EDI
L391:
	PUSH	ESI
	MOV	ECX,DWORD [16+EDI]
	MOV	EAX,ECX
	ADD	EAX,DWORD [8+EDI]
	PUSH	EAX
	MOV	EDX,DWORD [12+EDI]
	MOV	EAX,EDX
	ADD	EAX,DWORD [4+EDI]
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	PUSH	DWORD [32+EDI]
	CALL	_sheetRefreshMap
	PUSH	ESI
	JMP	L404
L385:
	MOV	ECX,DWORD [16+EBX]
	CMP	ECX,ESI
	JL	L403
L396:
	MOV	EDX,DWORD [20+EBX+ECX*4]
	LEA	EAX,DWORD [1+ECX]
	MOV	DWORD [24+EBX+ECX*4],EDX
	DEC	ECX
	MOV	DWORD [24+EDX],EAX
	CMP	ECX,ESI
	JGE	L396
L403:
	MOV	DWORD [20+EBX+ESI*4],EDI
	INC	DWORD [16+EBX]
	JMP	L391
	GLOBAL	_sheetRefresh
_sheetRefresh:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	MOV	EAX,DWORD [24+EBX]
	TEST	EAX,EAX
	JS	L405
	PUSH	EAX
	MOV	ECX,DWORD [16+EBX]
	MOV	EAX,ECX
	ADD	ECX,DWORD [16+EBP]
	ADD	EAX,DWORD [24+EBP]
	PUSH	EAX
	MOV	EDX,DWORD [12+EBX]
	MOV	EAX,EDX
	ADD	EDX,DWORD [12+EBP]
	ADD	EAX,DWORD [20+EBP]
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	PUSH	DWORD [32+EBX]
	CALL	_sheetRefreshSub
	ADD	ESP,24
L405:
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
	GLOBAL	_sheetRefreshSub
_sheetRefreshSub:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,44
	MOV	EAX,DWORD [8+EBP]
	MOV	EDX,DWORD [8+EBP]
	CMP	DWORD [12+EBP],0
	MOV	EAX,DWORD [EAX]
	MOV	EDX,DWORD [4+EDX]
	MOV	DWORD [-36+EBP],EAX
	MOV	DWORD [-40+EBP],EDX
	JS	L438
L408:
	CMP	DWORD [16+EBP],0
	JS	L439
L409:
	MOV	ESI,DWORD [8+EBP]
	MOV	EAX,DWORD [8+ESI]
	CMP	DWORD [20+EBP],EAX
	JLE	L410
	MOV	DWORD [20+EBP],EAX
L410:
	MOV	EDI,DWORD [8+EBP]
	MOV	EAX,DWORD [12+EDI]
	CMP	DWORD [24+EBP],EAX
	JLE	L411
	MOV	DWORD [24+EBP],EAX
L411:
	MOV	EDX,DWORD [8+EBP]
	MOV	EAX,DWORD [28+EBP]
	MOV	DWORD [-16+EBP],EAX
	CMP	EAX,DWORD [16+EDX]
	JG	L433
L431:
	MOV	EDI,DWORD [8+EBP]
	MOV	ESI,DWORD [-16+EBP]
	MOV	ECX,DWORD [16+EBP]
	MOV	EBX,DWORD [20+EDI+ESI*4]
	MOV	ESI,DWORD [20+EBP]
	MOV	EAX,EBX
	SUB	EAX,EDI
	MOV	EDX,DWORD [16+EBX]
	SUB	EAX,1044
	MOV	EDI,DWORD [24+EBP]
	SAR	EAX,2
	SUB	EDI,EDX
	IMUL	EAX,EAX,954437177
	MOV	BYTE [-41+EBP],AL
	SUB	ECX,EDX
	MOV	EAX,DWORD [EBX]
	MOV	EDX,DWORD [12+EBP]
	MOV	DWORD [-32+EBP],EAX
	MOV	DWORD [-56+EBP],EDI
	MOV	EAX,DWORD [12+EBX]
	SUB	ESI,EAX
	SUB	EDX,EAX
	MOV	DWORD [-28+EBP],ESI
	MOV	DWORD [-24+EBP],EDX
	JS	L440
L416:
	TEST	ECX,ECX
	JS	L441
L417:
	MOV	EAX,DWORD [4+EBX]
	CMP	DWORD [-28+EBP],EAX
	JLE	L418
	MOV	DWORD [-28+EBP],EAX
L418:
	MOV	EAX,DWORD [8+EBX]
	CMP	DWORD [-56+EBP],EAX
	JLE	L419
	MOV	DWORD [-56+EBP],EAX
L419:
	MOV	ESI,ECX
	CMP	ECX,DWORD [-56+EBP]
	JGE	L435
L430:
	MOV	EDI,DWORD [16+EBX]
	MOV	ECX,DWORD [-24+EBP]
	ADD	EDI,ESI
	CMP	ECX,DWORD [-28+EBP]
	MOV	DWORD [-20+EBP],EDI
	JGE	L437
L429:
	MOV	EDX,DWORD [8+EBP]
	MOV	EDI,DWORD [-20+EBP]
	MOV	EAX,DWORD [12+EBX]
	IMUL	EDI,DWORD [8+EDX]
	ADD	EAX,ECX
	MOV	DL,BYTE [-41+EBP]
	ADD	EAX,EDI
	MOV	EDI,DWORD [-40+EBP]
	MOV	DWORD [-52+EBP],EAX
	CMP	BYTE [EAX+EDI*1],DL
	JE	L442
L426:
	INC	ECX
	CMP	ECX,DWORD [-28+EBP]
	JL	L429
L437:
	INC	ESI
	CMP	ESI,DWORD [-56+EBP]
	JL	L430
L435:
	MOV	EDI,DWORD [8+EBP]
	INC	DWORD [-16+EBP]
	MOV	ESI,DWORD [-16+EBP]
	CMP	ESI,DWORD [16+EDI]
	JLE	L431
L433:
	ADD	ESP,44
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L442:
	MOV	EAX,ESI
	MOV	EDX,DWORD [-32+EBP]
	IMUL	EAX,DWORD [4+EBX]
	ADD	EAX,ECX
	MOV	EDI,DWORD [-36+EBP]
	MOV	AL,BYTE [EAX+EDX*1]
	MOV	EDX,DWORD [-52+EBP]
	MOV	BYTE [EDX+EDI*1],AL
	JMP	L426
L441:
	XOR	ECX,ECX
	JMP	L417
L440:
	MOV	DWORD [-24+EBP],0
	JMP	L416
L439:
	MOV	DWORD [16+EBP],0
	JMP	L409
L438:
	MOV	DWORD [12+EBP],0
	JMP	L408
	GLOBAL	_sheetSlide
_sheetSlide:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	EAX,DWORD [12+EBP]
	MOV	EBX,DWORD [8+EBP]
	MOV	EDI,DWORD [12+EBX]
	MOV	ESI,DWORD [16+EBX]
	MOV	DWORD [12+EBX],EAX
	MOV	EAX,DWORD [16+EBP]
	MOV	DWORD [16+EBX],EAX
	CMP	DWORD [24+EBX],0
	JS	L443
	PUSH	0
	MOV	EAX,ESI
	ADD	EAX,DWORD [8+EBX]
	PUSH	EAX
	MOV	EAX,EDI
	ADD	EAX,DWORD [4+EBX]
	PUSH	EAX
	PUSH	ESI
	PUSH	EDI
	PUSH	DWORD [32+EBX]
	CALL	_sheetRefreshMap
	MOV	EAX,DWORD [16+EBP]
	PUSH	DWORD [24+EBX]
	ADD	EAX,DWORD [8+EBX]
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [4+EBX]
	PUSH	EAX
	PUSH	DWORD [16+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [32+EBX]
	CALL	_sheetRefreshMap
	MOV	EAX,ESI
	ADD	ESP,48
	PUSH	0
	ADD	EAX,DWORD [8+EBX]
	PUSH	EAX
	MOV	EAX,EDI
	ADD	EAX,DWORD [4+EBX]
	PUSH	EAX
	PUSH	ESI
	PUSH	EDI
	PUSH	DWORD [32+EBX]
	CALL	_sheetRefreshSub
	MOV	EAX,DWORD [16+EBP]
	PUSH	DWORD [24+EBX]
	ADD	EAX,DWORD [8+EBX]
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [4+EBX]
	PUSH	EAX
	PUSH	DWORD [16+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [32+EBX]
	CALL	_sheetRefreshSub
	ADD	ESP,48
L443:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_sheetFree
_sheetFree:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	CMP	DWORD [24+EBX],0
	JS	L446
	PUSH	-1
	PUSH	EBX
	CALL	_sheetUpdown
	POP	EAX
	POP	EDX
L446:
	MOV	DWORD [28+EBX],0
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
[SECTION .data]
LC0:
	DB	"%011d",0x00
[SECTION .text]
	GLOBAL	_taskBmain
_taskBmain:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	EDI,EDI
	PUSH	EBX
	LEA	EAX,DWORD [-556+EBP]
	SUB	ESP,564
	LEA	EBX,DWORD [-44+EBP]
	MOV	DWORD [-576+EBP],0
	PUSH	0
	PUSH	EAX
	PUSH	128
	PUSH	EBX
	CALL	_QueueInit
	CALL	_timerAlloc
	PUSH	100
	PUSH	EBX
	MOV	ESI,EAX
	PUSH	EAX
	CALL	_timerInit
	PUSH	100
	PUSH	ESI
	CALL	_timerSetTime
	ADD	ESP,36
L448:
	LEA	EBX,DWORD [-44+EBP]
	CALL	_io_cli
	PUSH	EBX
	INC	EDI
	CALL	_QueueSize
	POP	EDX
	TEST	EAX,EAX
	JE	L454
	PUSH	EBX
	CALL	_QueuePop
	MOV	EBX,EAX
	CALL	_io_sti
	POP	EAX
	CMP	EBX,100
	JNE	L448
	MOV	EAX,EDI
	LEA	EBX,DWORD [-572+EBP]
	SUB	EAX,DWORD [-576+EBP]
	PUSH	EAX
	PUSH	LC0
	PUSH	EBX
	CALL	_sprintf
	PUSH	11
	PUSH	EBX
	PUSH	8
	PUSH	0
	PUSH	28
	PUSH	24
	PUSH	DWORD [8+EBP]
	CALL	_putFont8AscSheet
	ADD	ESP,40
	MOV	DWORD [-576+EBP],EDI
	PUSH	100
	PUSH	ESI
	CALL	_timerSetTime
	POP	ECX
	POP	EBX
	JMP	L448
L454:
	CALL	_io_sti
	JMP	L448
	GLOBAL	_makeTextBox
_makeTextBox:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,20
	MOV	EAX,DWORD [12+EBP]
	MOV	ESI,DWORD [16+EBP]
	ADD	EAX,DWORD [20+EBP]
	SUB	ESI,3
	PUSH	ESI
	MOV	DWORD [-16+EBP],EAX
	MOV	EAX,DWORD [16+EBP]
	ADD	EAX,DWORD [24+EBP]
	MOV	DWORD [-20+EBP],EAX
	MOV	EAX,DWORD [-16+EBP]
	INC	EAX
	PUSH	EAX
	MOV	DWORD [-24+EBP],EAX
	MOV	EAX,DWORD [12+EBP]
	PUSH	ESI
	SUB	EAX,2
	PUSH	EAX
	MOV	DWORD [-28+EBP],EAX
	MOV	EAX,DWORD [8+EBP]
	PUSH	15
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	MOV	EDI,DWORD [12+EBP]
	MOV	EAX,DWORD [-20+EBP]
	SUB	EDI,3
	INC	EAX
	PUSH	EAX
	MOV	DWORD [-32+EBP],EAX
	PUSH	EDI
	MOV	EAX,DWORD [8+EBP]
	PUSH	ESI
	PUSH	EDI
	PUSH	15
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	MOV	EAX,DWORD [8+EBP]
	ADD	ESP,56
	MOV	EBX,DWORD [-20+EBP]
	ADD	EBX,2
	PUSH	EBX
	PUSH	DWORD [-24+EBP]
	PUSH	EBX
	PUSH	EDI
	PUSH	7
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	MOV	EAX,DWORD [-16+EBP]
	PUSH	EBX
	ADD	EAX,2
	PUSH	EAX
	PUSH	ESI
	PUSH	EAX
	MOV	EAX,DWORD [8+EBP]
	PUSH	7
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	MOV	EAX,DWORD [8+EBP]
	ADD	ESP,56
	MOV	EBX,DWORD [16+EBP]
	SUB	EBX,2
	MOV	EDI,DWORD [12+EBP]
	PUSH	EBX
	DEC	EDI
	PUSH	DWORD [-16+EBP]
	PUSH	EBX
	PUSH	EDI
	PUSH	0
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [-20+EBP]
	PUSH	DWORD [-28+EBP]
	PUSH	EBX
	PUSH	DWORD [-28+EBP]
	PUSH	0
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	MOV	EAX,DWORD [8+EBP]
	ADD	ESP,56
	PUSH	DWORD [-32+EBP]
	PUSH	DWORD [-16+EBP]
	PUSH	DWORD [-32+EBP]
	PUSH	DWORD [-28+EBP]
	PUSH	8
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [-32+EBP]
	PUSH	DWORD [-24+EBP]
	PUSH	EBX
	PUSH	DWORD [-24+EBP]
	PUSH	8
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	MOV	EAX,DWORD [16+EBP]
	ADD	ESP,56
	DEC	EAX
	PUSH	DWORD [-20+EBP]
	PUSH	DWORD [-16+EBP]
	PUSH	EAX
	PUSH	EDI
	MOVZX	EAX,BYTE [28+EBP]
	PUSH	EAX
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
[SECTION .data]
_closeBtn.2:
	DB	"OOOOOOOOOOOOOOO@"
	DB	"OQQQQQQQQQQQQQ$@"
	DB	"OQQQQQQQQQQQQQ$@"
	DB	"OQQQ@@QQQQ@@QQ$@"
	DB	"OQQQQ@@QQ@@QQQ$@"
	DB	"OQQQQQ@@@@QQQQ$@"
	DB	"OQQQQQQ@@QQQQQ$@"
	DB	"OQQQQQ@@@@QQQQ$@"
	DB	"OQQQQ@@QQ@@QQQ$@"
	DB	"OQQQ@@QQQQ@@QQ$@"
	DB	"OQQQQQQQQQQQQQ$@"
	DB	"OQQQQQQQQQQQQQ$@"
	DB	"O$$$$$$$$$$$$$$@"
	DB	"@@@@@@@@@@@@@@@@"
[SECTION .text]
	GLOBAL	_makeWindow
_makeWindow:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,12
	CMP	BYTE [24+EBP],0
	JE	L457
	MOV	BYTE [-17+EBP],7
	MOV	BYTE [-18+EBP],12
L458:
	MOV	EAX,DWORD [12+EBP]
	PUSH	0
	DEC	EAX
	PUSH	EAX
	MOV	DWORD [-24+EBP],EAX
	PUSH	0
	PUSH	0
	PUSH	8
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	ESI,DWORD [12+EBP]
	PUSH	1
	SUB	ESI,2
	PUSH	ESI
	PUSH	1
	PUSH	1
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EDI,DWORD [16+EBP]
	ADD	ESP,56
	DEC	EDI
	PUSH	EDI
	PUSH	0
	PUSH	0
	PUSH	0
	PUSH	8
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EBX,DWORD [16+EBP]
	SUB	EBX,2
	PUSH	EBX
	PUSH	1
	PUSH	1
	PUSH	1
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	ADD	ESP,56
	PUSH	EBX
	PUSH	ESI
	PUSH	1
	PUSH	ESI
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	PUSH	EDI
	PUSH	DWORD [-24+EBP]
	PUSH	0
	PUSH	DWORD [-24+EBP]
	PUSH	0
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EAX,DWORD [16+EBP]
	ADD	ESP,56
	SUB	EAX,3
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	SUB	EAX,3
	PUSH	EAX
	PUSH	2
	PUSH	2
	PUSH	8
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EAX,DWORD [12+EBP]
	PUSH	20
	SUB	EAX,4
	PUSH	EAX
	PUSH	3
	PUSH	3
	MOVZX	EAX,BYTE [-18+EBP]
	PUSH	EAX
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	ADD	ESP,56
	PUSH	EBX
	PUSH	ESI
	PUSH	EBX
	PUSH	1
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	PUSH	EDI
	PUSH	DWORD [-24+EBP]
	PUSH	EDI
	XOR	EDI,EDI
	PUSH	0
	PUSH	0
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	ADD	ESP,56
	PUSH	DWORD [20+EBP]
	MOVSX	EAX,BYTE [-17+EBP]
	PUSH	EAX
	PUSH	4
	PUSH	24
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_putFont8_asc
	ADD	ESP,24
	IMUL	EBX,DWORD [12+EBP],5
	MOV	DWORD [-16+EBP],0
L474:
	MOV	EAX,DWORD [12+EBP]
	MOV	EDX,DWORD [8+EBP]
	ADD	EAX,EBX
	XOR	ESI,ESI
	LEA	ECX,DWORD [-21+EDX+EAX*1]
L473:
	MOV	DL,BYTE [_closeBtn.2+ESI+EDI*1]
	CMP	DL,64
	JE	L479
	CMP	DL,36
	JE	L480
	CMP	DL,81
	MOV	DL,8
	SETNE	AL
	SUB	DL,AL
L468:
	INC	ESI
	MOV	BYTE [ECX],DL
	INC	ECX
	CMP	ESI,15
	JLE	L473
	INC	DWORD [-16+EBP]
	ADD	EDI,16
	ADD	EBX,DWORD [12+EBP]
	CMP	DWORD [-16+EBP],13
	JLE	L474
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L480:
	MOV	DL,15
	JMP	L468
L479:
	XOR	EDX,EDX
	JMP	L468
L457:
	MOV	BYTE [-17+EBP],8
	MOV	BYTE [-18+EBP],15
	JMP	L458
[SECTION .data]
LC1:
	DB	"processB%d",0x00
LC2:
	DB	"processA",0x00
LC3:
	DB	"Welcome to DickOS",0x00
LC4:
	DB	"(%3d, %3d)",0x00
LC5:
	DB	"memory %dMB free : %dKB",0x00
LC8:
	DB	"[lcr %4d %4d]",0x00
LC6:
	DB	"%02X",0x00
LC7:
	DB	" ",0x00
[SECTION .text]
	GLOBAL	_Main
_Main:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	ESI,ESI
	PUSH	EBX
	LEA	EBX,DWORD [-892+EBP]
	SUB	ESP,940
	CALL	_initGdtit
	CALL	_init_pic
	CALL	_io_sti
	LEA	EAX,DWORD [-572+EBP]
	PUSH	0
	PUSH	EAX
	PUSH	128
	PUSH	EBX
	CALL	_QueueInit
	CALL	_initPit
	PUSH	256
	PUSH	EBX
	CALL	_initKeyboard
	LEA	EAX,DWORD [-588+EBP]
	PUSH	EAX
	PUSH	512
	PUSH	EBX
	CALL	_enableMouse
	ADD	ESP,36
	PUSH	248
	PUSH	33
	CALL	_io_out8
	PUSH	239
	PUSH	161
	CALL	_io_out8
	CALL	_timerAlloc
	PUSH	1
	PUSH	EBX
	PUSH	EAX
	MOV	DWORD [-940+EBP],EAX
	CALL	_timerInit
	PUSH	50
	PUSH	DWORD [-940+EBP]
	CALL	_timerSetTime
	ADD	ESP,36
	PUSH	-1073741825
	PUSH	4194304
	CALL	_memtest
	PUSH	3932160
	MOV	EBX,EAX
	CALL	_memsegInit
	PUSH	647168
	PUSH	4096
	PUSH	3932160
	CALL	_memsegFree
	LEA	EAX,DWORD [-4194304+EBX]
	PUSH	EAX
	PUSH	4194304
	PUSH	3932160
	CALL	_memsegFree
	ADD	ESP,36
	CALL	_init_palette
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	PUSH	3932160
	CALL	_shtctlInit
	PUSH	3932160
	MOV	DWORD [-928+EBP],EAX
	CALL	_processInit
	PUSH	0
	PUSH	1
	MOV	DWORD [-944+EBP],EAX
	PUSH	EAX
	MOV	DWORD [-868+EBP],EAX
	CALL	_processRun
	ADD	ESP,32
	PUSH	DWORD [-928+EBP]
	CALL	_sheetAlloc
	MOVSX	EDX,WORD [4086]
	MOV	DWORD [-932+EBP],EAX
	MOVSX	EAX,WORD [4084]
	IMUL	EAX,EDX
	PUSH	EAX
	PUSH	3932160
	CALL	_memsegAlloc4K
	PUSH	-1
	MOV	EBX,EAX
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	EBX
	PUSH	DWORD [-932+EBP]
	CALL	_sheetSetbuf
	ADD	ESP,32
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	EBX
	CALL	_init_GUI
	ADD	ESP,12
L486:
	PUSH	DWORD [-928+EBP]
	CALL	_sheetAlloc
	PUSH	7488
	PUSH	3932160
	MOV	DWORD [-604+EBP+ESI*4],EAX
	CALL	_memsegAlloc4K
	PUSH	-1
	MOV	EBX,EAX
	PUSH	52
	PUSH	144
	PUSH	EAX
	PUSH	DWORD [-604+EBP+ESI*4]
	CALL	_sheetSetbuf
	LEA	EAX,DWORD [-60+EBP]
	ADD	ESP,32
	PUSH	ESI
	PUSH	LC1
	PUSH	EAX
	CALL	_sprintf
	LEA	EDX,DWORD [-60+EBP]
	PUSH	0
	PUSH	EDX
	PUSH	52
	PUSH	144
	PUSH	EBX
	CALL	_makeWindow
	ADD	ESP,32
	CALL	_processAlloc
	PUSH	65536
	MOV	EBX,EAX
	PUSH	3932160
	MOV	DWORD [-908+EBP+ESI*4],EAX
	CALL	_memsegAlloc4K
	ADD	EAX,65528
	MOV	DWORD [72+EBX],EAX
	MOV	EBX,DWORD [-604+EBP+ESI*4]
	MOV	EAX,DWORD [-908+EBP+ESI*4]
	MOV	ECX,DWORD [72+EAX]
	MOV	DWORD [4+ECX],EBX
	LEA	EBX,DWORD [1+ESI]
	MOV	DWORD [48+EAX],_taskBmain
	MOV	DWORD [88+EAX],8
	MOV	DWORD [92+EAX],16
	MOV	DWORD [96+EAX],8
	MOV	DWORD [100+EAX],8
	MOV	DWORD [104+EAX],8
	MOV	DWORD [108+EAX],8
	PUSH	EBX
	MOV	ESI,EBX
	PUSH	2
	PUSH	EAX
	CALL	_processRun
	ADD	ESP,20
	CMP	EBX,2
	JLE	L486
	PUSH	DWORD [-928+EBP]
	CALL	_sheetAlloc
	PUSH	8320
	PUSH	3932160
	MOV	EDI,EAX
	CALL	_memsegAlloc4K
	PUSH	-1
	PUSH	52
	MOV	EBX,EAX
	PUSH	144
	PUSH	EAX
	PUSH	EDI
	CALL	_sheetSetbuf
	ADD	ESP,32
	PUSH	1
	PUSH	LC2
	PUSH	52
	PUSH	144
	PUSH	EBX
	LEA	EBX,DWORD [-860+EBP]
	CALL	_makeWindow
	PUSH	7
	PUSH	16
	PUSH	128
	PUSH	28
	PUSH	8
	PUSH	EDI
	CALL	_makeTextBox
	ADD	ESP,44
	PUSH	DWORD [-928+EBP]
	MOV	DWORD [-920+EBP],8
	MOV	DWORD [-924+EBP],7
	CALL	_sheetAlloc
	PUSH	14
	PUSH	16
	PUSH	16
	MOV	DWORD [-936+EBP],EAX
	PUSH	EBX
	PUSH	EAX
	CALL	_sheetSetbuf
	PUSH	14
	PUSH	EBX
	MOV	EBX,2
	CALL	_initMouseCursor8
	ADD	ESP,32
	MOVSX	EAX,WORD [4084]
	LEA	ECX,DWORD [-16+EAX]
	MOV	EAX,ECX
	CDQ
	IDIV	EBX
	MOV	DWORD [-912+EBP],EAX
	MOVSX	EAX,WORD [4086]
	PUSH	0
	LEA	ECX,DWORD [-44+EAX]
	PUSH	0
	MOV	EAX,ECX
	CDQ
	IDIV	EBX
	PUSH	DWORD [-932+EBP]
	MOV	DWORD [-916+EBP],EAX
	LEA	EBX,DWORD [-60+EBP]
	CALL	_sheetSlide
	PUSH	64
	PUSH	168
	PUSH	DWORD [-604+EBP]
	CALL	_sheetSlide
	PUSH	124
	PUSH	8
	PUSH	DWORD [-600+EBP]
	CALL	_sheetSlide
	ADD	ESP,36
	PUSH	124
	PUSH	168
	PUSH	DWORD [-596+EBP]
	CALL	_sheetSlide
	PUSH	64
	PUSH	8
	PUSH	EDI
	CALL	_sheetSlide
	PUSH	DWORD [-916+EBP]
	PUSH	DWORD [-912+EBP]
	PUSH	DWORD [-936+EBP]
	CALL	_sheetSlide
	ADD	ESP,36
	PUSH	0
	PUSH	DWORD [-932+EBP]
	CALL	_sheetUpdown
	PUSH	1
	PUSH	DWORD [-604+EBP]
	CALL	_sheetUpdown
	PUSH	2
	PUSH	DWORD [-600+EBP]
	CALL	_sheetUpdown
	PUSH	3
	PUSH	DWORD [-596+EBP]
	CALL	_sheetUpdown
	ADD	ESP,32
	PUSH	4
	PUSH	EDI
	CALL	_sheetUpdown
	PUSH	5
	PUSH	DWORD [-936+EBP]
	CALL	_sheetUpdown
	PUSH	17
	PUSH	LC3
	PUSH	14
	PUSH	7
	PUSH	32
	PUSH	0
	PUSH	DWORD [-932+EBP]
	CALL	_putFont8AscSheet
	ADD	ESP,44
	PUSH	DWORD [-916+EBP]
	PUSH	DWORD [-912+EBP]
	PUSH	LC4
	PUSH	EBX
	CALL	_sprintf
	PUSH	10
	PUSH	EBX
	PUSH	14
	PUSH	7
	PUSH	0
	PUSH	0
	PUSH	DWORD [-932+EBP]
	CALL	_putFont8AscSheet
	ADD	ESP,44
	PUSH	3932160
	CALL	_memsegTotal
	SHR	EAX,10
	MOV	DWORD [ESP],EAX
	PUSH	-1073741825
	PUSH	4194304
	CALL	_memtest
	POP	ESI
	SHR	EAX,20
	POP	EDX
	PUSH	EAX
	PUSH	LC5
	PUSH	EBX
	CALL	_sprintf
	PUSH	26
	PUSH	EBX
	PUSH	14
	PUSH	7
	PUSH	48
	PUSH	0
	PUSH	DWORD [-932+EBP]
	CALL	_putFont8AscSheet
	ADD	ESP,44
L487:
	LEA	ESI,DWORD [-892+EBP]
	CALL	_io_cli
	PUSH	ESI
	CALL	_QueueSize
	POP	EBX
	TEST	EAX,EAX
	JE	L513
	PUSH	ESI
	CALL	_QueuePop
	MOV	EBX,EAX
	CALL	_io_sti
	POP	EDX
	LEA	EAX,DWORD [-256+EBX]
	CMP	EAX,255
	JBE	L514
	LEA	EAX,DWORD [-512+EBX]
	CMP	EAX,255
	JBE	L515
	CMP	EBX,1
	JG	L487
	DEC	EBX
	JE	L516
	PUSH	1
	PUSH	ESI
	PUSH	DWORD [-940+EBP]
	CALL	_timerInit
	MOV	DWORD [-924+EBP],7
L512:
	ADD	ESP,12
	MOV	EAX,DWORD [-920+EBP]
	ADD	EAX,7
	PUSH	43
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-920+EBP]
	PUSH	DWORD [-924+EBP]
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [EDI]
	CALL	_boxFill8
	PUSH	50
	PUSH	DWORD [-940+EBP]
	CALL	_timerSetTime
	MOV	EAX,DWORD [-920+EBP]
	ADD	ESP,36
	ADD	EAX,8
	PUSH	44
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-920+EBP]
	PUSH	EDI
	CALL	_sheetRefresh
	ADD	ESP,20
	JMP	L487
L516:
	PUSH	0
	PUSH	ESI
	PUSH	DWORD [-940+EBP]
	CALL	_timerInit
	MOV	DWORD [-924+EBP],0
	JMP	L512
L515:
	MOVZX	EAX,BL
	PUSH	EAX
	LEA	EAX,DWORD [-588+EBP]
	PUSH	EAX
	CALL	_mouseDecode
	POP	ECX
	POP	EBX
	TEST	EAX,EAX
	JE	L487
	PUSH	DWORD [-580+EBP]
	PUSH	DWORD [-584+EBP]
	PUSH	LC8
	LEA	EBX,DWORD [-60+EBP]
	PUSH	EBX
	CALL	_sprintf
	ADD	ESP,16
	TEST	DWORD [-576+EBP],1
	JE	L499
	MOV	EAX,DWORD [-916+EBP]
	SUB	EAX,8
	PUSH	EAX
	MOV	EAX,DWORD [-912+EBP]
	SUB	EAX,80
	PUSH	EAX
	PUSH	EDI
	MOV	BYTE [-59+EBP],76
	CALL	_sheetSlide
	ADD	ESP,12
L499:
	MOV	EAX,DWORD [-576+EBP]
	TEST	EAX,2
	JE	L500
	MOV	BYTE [-57+EBP],82
L500:
	AND	EAX,4
	JE	L501
	MOV	BYTE [-58+EBP],67
L501:
	PUSH	15
	PUSH	EBX
	PUSH	14
	PUSH	7
	PUSH	16
	PUSH	32
	PUSH	DWORD [-932+EBP]
	CALL	_putFont8AscSheet
	MOV	EDX,DWORD [-584+EBP]
	MOV	EAX,DWORD [-580+EBP]
	ADD	ESP,28
	ADD	DWORD [-916+EBP],EAX
	ADD	DWORD [-912+EBP],EDX
	JS	L517
L502:
	CMP	DWORD [-916+EBP],0
	JS	L518
L503:
	MOVSX	EAX,WORD [4084]
	DEC	EAX
	CMP	DWORD [-912+EBP],EAX
	JLE	L504
	MOV	DWORD [-912+EBP],EAX
L504:
	MOVSX	EAX,WORD [4086]
	DEC	EAX
	CMP	DWORD [-916+EBP],EAX
	JLE	L505
	MOV	DWORD [-916+EBP],EAX
L505:
	PUSH	DWORD [-916+EBP]
	PUSH	DWORD [-912+EBP]
	PUSH	LC4
	PUSH	EBX
	CALL	_sprintf
	PUSH	10
	PUSH	EBX
	PUSH	14
	PUSH	7
	PUSH	0
	PUSH	0
	PUSH	DWORD [-932+EBP]
	CALL	_putFont8AscSheet
	ADD	ESP,44
	PUSH	DWORD [-916+EBP]
	PUSH	DWORD [-912+EBP]
	PUSH	DWORD [-936+EBP]
	CALL	_sheetSlide
	ADD	ESP,12
	JMP	L487
L518:
	MOV	DWORD [-916+EBP],0
	JMP	L503
L517:
	MOV	DWORD [-912+EBP],0
	JMP	L502
L514:
	PUSH	EAX
	LEA	ESI,DWORD [-60+EBP]
	PUSH	LC6
	PUSH	ESI
	CALL	_sprintf
	PUSH	2
	PUSH	ESI
	PUSH	14
	PUSH	7
	PUSH	16
	PUSH	0
	PUSH	DWORD [-932+EBP]
	CALL	_putFont8AscSheet
	ADD	ESP,40
	CMP	EBX,383
	JG	L493
	MOV	AL,BYTE [_keyboardTable-256+EBX]
	TEST	AL,AL
	JE	L493
	CMP	DWORD [-920+EBP],143
	JG	L493
	PUSH	1
	MOV	BYTE [-60+EBP],AL
	PUSH	ESI
	PUSH	7
	PUSH	0
	PUSH	28
	PUSH	DWORD [-920+EBP]
	PUSH	EDI
	MOV	BYTE [-59+EBP],0
	CALL	_putFont8AscSheet
	ADD	ESP,28
	ADD	DWORD [-920+EBP],8
L493:
	CMP	EBX,270
	JE	L519
L495:
	MOV	EAX,DWORD [-920+EBP]
	PUSH	43
	ADD	EAX,7
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-920+EBP]
	PUSH	DWORD [-924+EBP]
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [EDI]
	CALL	_boxFill8
	MOV	EAX,DWORD [-920+EBP]
	PUSH	44
	ADD	EAX,8
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-920+EBP]
	PUSH	EDI
	CALL	_sheetRefresh
	ADD	ESP,48
	JMP	L487
L519:
	CMP	DWORD [-920+EBP],8
	JLE	L495
	PUSH	1
	PUSH	LC7
	PUSH	7
	PUSH	0
	PUSH	28
	PUSH	DWORD [-920+EBP]
	PUSH	EDI
	CALL	_putFont8AscSheet
	ADD	ESP,28
	SUB	DWORD [-920+EBP],8
	JMP	L495
L513:
	PUSH	DWORD [-944+EBP]
	CALL	_processSleep
	CALL	_io_sti
	POP	ECX
	JMP	L487
	GLOBAL	_keybuf
[SECTION .data]
	ALIGNB	4
_keybuf:
	RESB	4
	GLOBAL	_keyData0
[SECTION .data]
	ALIGNB	4
_keyData0:
	RESB	4
	GLOBAL	_mousebuf
[SECTION .data]
	ALIGNB	4
_mousebuf:
	RESB	4
	GLOBAL	_mouseData0
[SECTION .data]
	ALIGNB	4
_mouseData0:
	RESB	4
	GLOBAL	_timerctl
[SECTION .data]
	ALIGNB	16
_timerctl:
	RESB	10012
	GLOBAL	_processctl
[SECTION .data]
	ALIGNB	4
_processctl:
	RESB	4
	GLOBAL	_mpTimer
[SECTION .data]
	ALIGNB	4
_mpTimer:
	RESB	4
