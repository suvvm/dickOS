[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_io_in8
	EXTERN	_io_out8
	EXTERN	_io_load_eflags
	EXTERN	_io_cli
	EXTERN	_io_store_eflags
	EXTERN	_farJmp
	EXTERN	_loadGdtr
	EXTERN	_loadIdtr
	EXTERN	_asm_interruptHandler20
	EXTERN	_asm_interruptHandler21
	EXTERN	_asm_interruptHandler27
	EXTERN	_asm_interruptHandler2c
	EXTERN	_font
	EXTERN	_memtest_sub
	EXTERN	_loadCr0
	EXTERN	_storeCr0
	EXTERN	_io_sti
	EXTERN	_sprintf
	EXTERN	_loadTr
	EXTERN	_io_stihlt
[FILE "bootpack.c"]
[SECTION .text]
	GLOBAL	_QueueInit
_QueueInit:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	MOV	ECX,DWORD [12+EBP]
	MOV	EDX,DWORD [16+EBP]
	MOV	DWORD [12+EAX],ECX
	MOV	DWORD [EAX],EDX
	MOV	DWORD [16+EAX],ECX
	MOV	DWORD [20+EAX],0
	MOV	DWORD [8+EAX],0
	MOV	DWORD [4+EAX],0
	POP	EBP
	RET
	GLOBAL	_QueuePush
_QueuePush:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	CMP	DWORD [16+EBX],0
	JNE	L3
	OR	DWORD [20+EBX],1
	OR	EAX,-1
L2:
	POP	EBX
	POP	EBP
	RET
L3:
	MOV	ECX,DWORD [4+EBX]
	MOV	EDX,DWORD [EBX]
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [EDX+ECX*4],EAX
	MOV	EAX,DWORD [4+EBX]
	DEC	DWORD [16+EBX]
	INC	EAX
	CDQ
	IDIV	DWORD [12+EBX]
	XOR	EAX,EAX
	MOV	DWORD [4+EBX],EDX
	JMP	L2
	GLOBAL	_QueuePop
_QueuePop:
	PUSH	EBP
	OR	EAX,-1
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	ESI,DWORD [8+EBP]
	PUSH	EBX
	MOV	EDI,DWORD [16+ESI]
	MOV	EBX,DWORD [12+ESI]
	CMP	EDI,EBX
	JE	L4
	MOV	EAX,DWORD [8+ESI]
	MOV	EDX,DWORD [ESI]
	MOV	ECX,DWORD [EDX+EAX*4]
	INC	EAX
	CDQ
	IDIV	EBX
	LEA	EAX,DWORD [1+EDI]
	MOV	DWORD [8+ESI],EDX
	MOV	DWORD [16+ESI],EAX
	MOV	EAX,ECX
L4:
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_QueueSize
_QueueSize:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EDX,DWORD [8+EBP]
	POP	EBP
	MOV	EAX,DWORD [12+EDX]
	SUB	EAX,DWORD [16+EDX]
	RET
[SECTION .data]
_keyboardTable:
	DB	0
	DB	0
	DB	49
	DB	50
	DB	51
	DB	52
	DB	53
	DB	54
	DB	55
	DB	56
	DB	57
	DB	48
	DB	45
	DB	61
	DB	0
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	91
	DB	93
	DB	0
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	59
	DB	39
	DB	96
	DB	0
	DB	92
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	44
	DB	46
	DB	47
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
[SECTION .text]
	GLOBAL	_waitKeyboardControllerReady
_waitKeyboardControllerReady:
	PUSH	EBP
	MOV	EBP,ESP
L8:
	PUSH	100
	CALL	_io_in8
	POP	EDX
	AND	EAX,2
	JNE	L8
	LEAVE
	RET
	GLOBAL	_initKeyboard
_initKeyboard:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [_keybuf],EAX
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [_keyData0],EAX
	CALL	_waitKeyboardControllerReady
	PUSH	96
	PUSH	100
	CALL	_io_out8
	CALL	_waitKeyboardControllerReady
	POP	ECX
	POP	EAX
	MOV	DWORD [12+EBP],71
	MOV	DWORD [8+EBP],96
	LEAVE
	JMP	_io_out8
	GLOBAL	_enableMouse
_enableMouse:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [_mousebuf],EAX
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [_mouseData0],EAX
	CALL	_waitKeyboardControllerReady
	PUSH	212
	PUSH	100
	CALL	_io_out8
	CALL	_waitKeyboardControllerReady
	PUSH	244
	PUSH	96
	CALL	_io_out8
	MOV	EAX,DWORD [16+EBP]
	MOV	BYTE [3+EAX],0
	LEAVE
	RET
	GLOBAL	_mouseDecode
_mouseDecode:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	EDX,DWORD [8+EBP]
	MOV	ECX,DWORD [12+EBP]
	MOV	ESI,ECX
	MOV	AL,BYTE [3+EDX]
	TEST	AL,AL
	JNE	L15
	CMP	CL,-6
	JE	L24
L23:
	XOR	EAX,EAX
L14:
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L24:
	MOV	BYTE [3+EDX],1
	JMP	L23
L15:
	CMP	AL,1
	JE	L25
	CMP	AL,2
	JE	L26
	CMP	AL,3
	JE	L27
	OR	EAX,-1
	JMP	L14
L27:
	MOV	BL,BYTE [EDX]
	AND	ESI,255
	MOV	EAX,EBX
	MOV	BYTE [2+EDX],CL
	AND	EAX,7
	MOV	DWORD [8+EDX],ESI
	MOV	DWORD [12+EDX],EAX
	MOV	AL,BL
	MOVZX	ECX,BYTE [1+EDX]
	AND	EAX,16
	MOV	DWORD [4+EDX],ECX
	MOV	BYTE [3+EDX],1
	TEST	AL,AL
	JE	L21
	OR	ECX,-256
	MOV	DWORD [4+EDX],ECX
L21:
	AND	EBX,32
	TEST	BL,BL
	JE	L22
	OR	DWORD [8+EDX],-256
L22:
	NEG	DWORD [8+EDX]
	MOV	EAX,1
	JMP	L14
L26:
	MOV	BYTE [1+EDX],CL
	MOV	BYTE [3+EDX],3
	JMP	L23
L25:
	AND	ESI,-56
	MOV	EAX,ESI
	CMP	AL,8
	JNE	L23
	MOV	BYTE [EDX],CL
	MOV	BYTE [3+EDX],2
	JMP	L23
	GLOBAL	_initPit
_initPit:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	52
	PUSH	67
	CALL	_io_out8
	PUSH	156
	PUSH	64
	CALL	_io_out8
	PUSH	46
	PUSH	64
	CALL	_io_out8
	MOV	EDX,_timerctl+10000
	MOV	DWORD [_timerctl],0
	ADD	ESP,24
	MOV	EAX,_timerctl+20
L33:
	MOV	DWORD [EAX],0
	ADD	EAX,20
	CMP	EAX,EDX
	JLE	L33
	CALL	_timerAlloc
	MOV	DWORD [4+EAX],-1
	MOV	DWORD [8+EAX],2
	MOV	DWORD [EAX],0
	MOV	DWORD [_timerctl+8],EAX
	MOV	DWORD [_timerctl+4],-1
	LEAVE
	RET
	GLOBAL	_timerAlloc
_timerAlloc:
	PUSH	EBP
	XOR	EDX,EDX
	MOV	EBP,ESP
	MOV	EAX,_timerctl+12
L42:
	CMP	DWORD [8+EAX],0
	JE	L45
	INC	EDX
	ADD	EAX,20
	CMP	EDX,499
	JLE	L42
	XOR	EAX,EAX
L36:
	POP	EBP
	RET
L45:
	MOV	DWORD [8+EAX],1
	JMP	L36
	GLOBAL	_timerFree
_timerFree:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [8+EAX],0
	POP	EBP
	RET
	GLOBAL	_timerInit
_timerInit:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	MOV	EDX,DWORD [12+EBP]
	MOV	DWORD [12+EAX],EDX
	MOV	EDX,DWORD [16+EBP]
	MOV	BYTE [16+EAX],DL
	POP	EBP
	RET
	GLOBAL	_timerSetTime
_timerSetTime:
	PUSH	EBP
	MOV	EAX,DWORD [_timerctl]
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	ADD	EAX,DWORD [12+EBP]
	MOV	DWORD [8+EBX],2
	MOV	DWORD [4+EBX],EAX
	CALL	_io_load_eflags
	MOV	ESI,EAX
	CALL	_io_cli
	MOV	EAX,DWORD [_timerctl+8]
	MOV	EDX,DWORD [4+EBX]
	CMP	EDX,DWORD [4+EAX]
	JBE	L55
L50:
	MOV	ECX,EAX
	MOV	EAX,DWORD [EAX]
	TEST	EAX,EAX
	JE	L51
	CMP	EDX,DWORD [4+EAX]
	JA	L50
	MOV	DWORD [ECX],EBX
	MOV	DWORD [EBX],EAX
L51:
	MOV	DWORD [8+EBP],ESI
	POP	EBX
	POP	ESI
	POP	EBP
	JMP	_io_store_eflags
L55:
	MOV	DWORD [_timerctl+8],EBX
	MOV	DWORD [_timerctl+4],EDX
	MOV	DWORD [EBX],EAX
	JMP	L51
	GLOBAL	_multiProcessInit
_multiProcessInit:
	PUSH	EBP
	MOV	EBP,ESP
	CALL	_timerAlloc
	PUSH	2
	MOV	DWORD [_mpTimer],EAX
	PUSH	EAX
	CALL	_timerSetTime
	MOV	DWORD [_mpTr],24
	LEAVE
	RET
	GLOBAL	_processSwitch
_processSwitch:
	PUSH	EBP
	XOR	EAX,EAX
	CMP	DWORD [_mpTr],24
	SETE	AL
	MOV	EBP,ESP
	PUSH	2
	PUSH	DWORD [_mpTimer]
	LEA	EAX,DWORD [24+EAX*8]
	MOV	DWORD [_mpTr],EAX
	CALL	_timerSetTime
	PUSH	DWORD [_mpTr]
	PUSH	0
	CALL	_farJmp
	LEAVE
	RET
	GLOBAL	_init_pic
_init_pic:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	255
	PUSH	33
	CALL	_io_out8
	PUSH	255
	PUSH	161
	CALL	_io_out8
	PUSH	17
	PUSH	32
	CALL	_io_out8
	PUSH	32
	PUSH	33
	CALL	_io_out8
	ADD	ESP,32
	PUSH	4
	PUSH	33
	CALL	_io_out8
	PUSH	1
	PUSH	33
	CALL	_io_out8
	PUSH	17
	PUSH	160
	CALL	_io_out8
	PUSH	40
	PUSH	161
	CALL	_io_out8
	ADD	ESP,32
	PUSH	2
	PUSH	161
	CALL	_io_out8
	PUSH	1
	PUSH	161
	CALL	_io_out8
	PUSH	251
	PUSH	33
	CALL	_io_out8
	PUSH	255
	PUSH	161
	CALL	_io_out8
	LEAVE
	RET
	GLOBAL	_interruptHandler21
_interruptHandler21:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	97
	PUSH	32
	CALL	_io_out8
	PUSH	96
	CALL	_io_in8
	ADD	EAX,DWORD [_keyData0]
	PUSH	EAX
	PUSH	DWORD [_keybuf]
	CALL	_QueuePush
	LEAVE
	RET
	GLOBAL	_interruptHandler27
_interruptHandler27:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	103
	PUSH	32
	CALL	_io_out8
	LEAVE
	RET
	GLOBAL	_interruptHandler2c
_interruptHandler2c:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	100
	PUSH	160
	CALL	_io_out8
	PUSH	98
	PUSH	32
	CALL	_io_out8
	PUSH	96
	CALL	_io_in8
	ADD	EAX,DWORD [_mouseData0]
	PUSH	EAX
	PUSH	DWORD [_mousebuf]
	CALL	_QueuePush
	LEAVE
	RET
	GLOBAL	_interruptHandler20
_interruptHandler20:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	XOR	ESI,ESI
	PUSH	96
	PUSH	32
	CALL	_io_out8
	MOV	EAX,DWORD [_timerctl]
	INC	EAX
	MOV	DWORD [_timerctl],EAX
	CMP	DWORD [_timerctl+4],EAX
	POP	ECX
	POP	EBX
	JA	L64
	MOV	EBX,DWORD [_timerctl+8]
L66:
	MOV	EAX,DWORD [4+EBX]
	CMP	EAX,DWORD [_timerctl]
	JA	L67
	MOV	DWORD [8+EBX],1
	CMP	EBX,DWORD [_mpTimer]
	JE	L70
	MOVZX	EAX,BYTE [16+EBX]
	PUSH	EAX
	PUSH	DWORD [12+EBX]
	CALL	_QueuePush
	POP	EAX
	POP	EDX
L71:
	MOV	EBX,DWORD [EBX]
	JMP	L66
L70:
	MOV	ESI,1
	JMP	L71
L67:
	MOV	DWORD [_timerctl+4],EAX
	MOV	DWORD [_timerctl+8],EBX
	MOV	EAX,ESI
	TEST	AL,AL
	JNE	L73
L64:
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L73:
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	JMP	_processSwitch
	GLOBAL	_setSegmdesc
_setSegmdesc:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EDX,DWORD [12+EBP]
	MOV	ECX,DWORD [16+EBP]
	MOV	EBX,DWORD [8+EBP]
	MOV	EAX,DWORD [20+EBP]
	CMP	EDX,1048575
	JBE	L75
	SHR	EDX,12
	OR	EAX,32768
L75:
	MOV	WORD [EBX],DX
	MOV	BYTE [5+EBX],AL
	SHR	EDX,16
	SAR	EAX,8
	AND	EDX,15
	MOV	WORD [2+EBX],CX
	AND	EAX,-16
	SAR	ECX,16
	OR	EDX,EAX
	MOV	BYTE [4+EBX],CL
	MOV	BYTE [6+EBX],DL
	SAR	ECX,8
	MOV	BYTE [7+EBX],CL
	POP	EBX
	POP	EBP
	RET
	GLOBAL	_setGatedesc
_setGatedesc:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EDX,DWORD [8+EBP]
	MOV	EAX,DWORD [16+EBP]
	MOV	EBX,DWORD [20+EBP]
	MOV	ECX,DWORD [12+EBP]
	MOV	WORD [2+EDX],AX
	MOV	BYTE [5+EDX],BL
	MOV	WORD [EDX],CX
	MOV	EAX,EBX
	SAR	EAX,8
	SAR	ECX,16
	MOV	BYTE [4+EDX],AL
	MOV	WORD [6+EDX],CX
	POP	EBX
	POP	EBP
	RET
	GLOBAL	_initGdtit
_initGdtit:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	ESI,2555904
	MOV	EBX,8191
L82:
	PUSH	0
	PUSH	0
	PUSH	0
	PUSH	ESI
	ADD	ESI,8
	CALL	_setSegmdesc
	ADD	ESP,16
	DEC	EBX
	JNS	L82
	PUSH	16530
	MOV	EBX,255
	PUSH	0
	PUSH	-1
	PUSH	2555912
	CALL	_setSegmdesc
	PUSH	16538
	PUSH	2621440
	PUSH	524287
	PUSH	2555920
	CALL	_setSegmdesc
	ADD	ESP,32
	PUSH	2555904
	PUSH	65535
	CALL	_loadGdtr
	POP	ESI
	POP	EAX
	MOV	ESI,2553856
L87:
	PUSH	0
	PUSH	0
	PUSH	0
	PUSH	ESI
	ADD	ESI,8
	CALL	_setGatedesc
	ADD	ESP,16
	DEC	EBX
	JNS	L87
	PUSH	2553856
	PUSH	2047
	CALL	_loadIdtr
	PUSH	142
	PUSH	16
	PUSH	_asm_interruptHandler20
	PUSH	2554112
	CALL	_setGatedesc
	PUSH	142
	PUSH	16
	PUSH	_asm_interruptHandler21
	PUSH	2554120
	CALL	_setGatedesc
	ADD	ESP,40
	PUSH	142
	PUSH	16
	PUSH	_asm_interruptHandler27
	PUSH	2554168
	CALL	_setGatedesc
	PUSH	142
	PUSH	16
	PUSH	_asm_interruptHandler2c
	PUSH	2554208
	CALL	_setGatedesc
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
	GLOBAL	_set_palette
_set_palette:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	ECX
	MOV	EBX,DWORD [8+EBP]
	MOV	EDI,DWORD [12+EBP]
	MOV	ESI,DWORD [16+EBP]
	CALL	_io_load_eflags
	MOV	DWORD [-16+EBP],EAX
	CALL	_io_cli
	PUSH	EBX
	PUSH	968
	CALL	_io_out8
	CMP	EBX,EDI
	POP	EAX
	POP	EDX
	JGE	L99
	SUB	EDI,EBX
	MOV	EBX,EDI
L97:
	MOV	AL,BYTE [ESI]
	SHR	AL,2
	MOVZX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	MOV	AL,BYTE [1+ESI]
	SHR	AL,2
	MOVZX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	MOV	AL,BYTE [2+ESI]
	SHR	AL,2
	ADD	ESI,3
	MOVZX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	ADD	ESP,24
	DEC	EBX
	JNE	L97
L99:
	MOV	EAX,DWORD [-16+EBP]
	MOV	DWORD [8+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_io_store_eflags
[SECTION .data]
_table_rgb.0:
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	-1
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-58
	DB	-58
	DB	-58
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	-124
	DB	-124
	DB	-124
[SECTION .text]
	GLOBAL	_init_palette
_init_palette:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	_table_rgb.0
	PUSH	15
	PUSH	0
	CALL	_set_palette
	LEAVE
	RET
	GLOBAL	_boxFill8
_boxFill8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EDI
	PUSH	EDI
	MOV	AL,BYTE [16+EBP]
	MOV	ECX,DWORD [24+EBP]
	MOV	EDI,DWORD [28+EBP]
	MOV	BYTE [-13+EBP],AL
	CMP	ECX,DWORD [32+EBP]
	JG	L113
	MOV	EBX,DWORD [12+EBP]
	IMUL	EBX,ECX
L111:
	MOV	EDX,DWORD [20+EBP]
	CMP	EDX,EDI
	JG	L115
	MOV	ESI,DWORD [8+EBP]
	ADD	ESI,EBX
	ADD	ESI,EDX
	MOV	DWORD [-20+EBP],ESI
L110:
	MOV	ESI,DWORD [-20+EBP]
	MOV	AL,BYTE [-13+EBP]
	INC	EDX
	MOV	BYTE [ESI],AL
	INC	ESI
	MOV	DWORD [-20+EBP],ESI
	CMP	EDX,EDI
	JLE	L110
L115:
	INC	ECX
	ADD	EBX,DWORD [12+EBP]
	CMP	ECX,DWORD [32+EBP]
	JLE	L111
L113:
	POP	EBX
	POP	ESI
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_init_GUI
_init_GUI:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,12
	MOV	EAX,DWORD [16+EBP]
	MOV	EDI,DWORD [12+EBP]
	SUB	EAX,29
	DEC	EDI
	PUSH	EAX
	PUSH	EDI
	PUSH	0
	PUSH	0
	PUSH	14
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,28
	PUSH	EAX
	PUSH	EDI
	PUSH	EAX
	PUSH	0
	PUSH	8
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EAX,DWORD [16+EBP]
	ADD	ESP,56
	SUB	EAX,27
	PUSH	EAX
	PUSH	EDI
	PUSH	EAX
	PUSH	0
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EAX,DWORD [16+EBP]
	DEC	EAX
	PUSH	EAX
	MOV	EAX,DWORD [16+EBP]
	PUSH	EDI
	SUB	EAX,26
	PUSH	EAX
	PUSH	0
	PUSH	8
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	ESI,DWORD [16+EBP]
	ADD	ESP,56
	SUB	ESI,24
	PUSH	ESI
	PUSH	59
	PUSH	ESI
	PUSH	3
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,4
	PUSH	EAX
	MOV	DWORD [-16+EBP],EAX
	PUSH	2
	PUSH	ESI
	PUSH	2
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	ADD	ESP,56
	PUSH	DWORD [-16+EBP]
	PUSH	59
	PUSH	DWORD [-16+EBP]
	PUSH	3
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,5
	PUSH	EAX
	MOV	EAX,DWORD [16+EBP]
	PUSH	59
	SUB	EAX,23
	PUSH	EAX
	MOV	DWORD [-20+EBP],EAX
	PUSH	59
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EAX,DWORD [16+EBP]
	ADD	ESP,56
	SUB	EAX,3
	MOV	DWORD [-24+EBP],EAX
	PUSH	EAX
	PUSH	59
	PUSH	EAX
	PUSH	2
	PUSH	0
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	PUSH	DWORD [-24+EBP]
	PUSH	60
	PUSH	ESI
	PUSH	60
	PUSH	0
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EDI,DWORD [12+EBP]
	ADD	ESP,56
	MOV	EBX,DWORD [12+EBP]
	SUB	EBX,4
	SUB	EDI,47
	PUSH	ESI
	PUSH	EBX
	PUSH	ESI
	PUSH	EDI
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	PUSH	DWORD [-16+EBP]
	PUSH	EDI
	PUSH	DWORD [-20+EBP]
	PUSH	EDI
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	ADD	ESP,56
	PUSH	DWORD [-24+EBP]
	PUSH	EBX
	PUSH	DWORD [-24+EBP]
	PUSH	EDI
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EAX,DWORD [12+EBP]
	PUSH	DWORD [-24+EBP]
	SUB	EAX,3
	PUSH	EAX
	PUSH	ESI
	PUSH	EAX
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_putFont8
_putFont8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	ESI,ESI
	PUSH	EBX
	MOV	EDI,DWORD [28+EBP]
	MOV	BL,BYTE [24+EBP]
L130:
	MOV	EAX,DWORD [20+EBP]
	MOV	EDX,DWORD [16+EBP]
	ADD	EAX,ESI
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [8+EBP]
	LEA	ECX,DWORD [EDX+EAX*1]
	MOV	DL,BYTE [ESI+EDI*1]
	TEST	DL,DL
	JNS	L122
	MOV	BYTE [ECX],BL
L122:
	MOV	AL,DL
	AND	EAX,64
	TEST	AL,AL
	JE	L123
	MOV	BYTE [1+ECX],BL
L123:
	MOV	AL,DL
	AND	EAX,32
	TEST	AL,AL
	JE	L124
	MOV	BYTE [2+ECX],BL
L124:
	MOV	AL,DL
	AND	EAX,16
	TEST	AL,AL
	JE	L125
	MOV	BYTE [3+ECX],BL
L125:
	MOV	AL,DL
	AND	EAX,8
	TEST	AL,AL
	JE	L126
	MOV	BYTE [4+ECX],BL
L126:
	MOV	AL,DL
	AND	EAX,4
	TEST	AL,AL
	JE	L127
	MOV	BYTE [5+ECX],BL
L127:
	MOV	AL,DL
	AND	EAX,2
	TEST	AL,AL
	JE	L128
	MOV	BYTE [6+ECX],BL
L128:
	AND	EDX,1
	TEST	DL,DL
	JE	L120
	MOV	BYTE [7+ECX],BL
L120:
	INC	ESI
	CMP	ESI,15
	JLE	L130
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_putFont8_asc
_putFont8_asc:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EAX
	MOV	EBX,DWORD [28+EBP]
	MOV	AL,BYTE [24+EBP]
	MOV	BYTE [-13+EBP],AL
	MOV	ESI,DWORD [16+EBP]
	MOV	EDI,DWORD [20+EBP]
	CMP	BYTE [EBX],0
	JNE	L138
L140:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L138:
	MOVZX	EAX,BYTE [EBX]
	SAL	EAX,4
	INC	EBX
	ADD	EAX,_font
	PUSH	EAX
	MOVSX	EAX,BYTE [-13+EBP]
	PUSH	EAX
	PUSH	EDI
	PUSH	ESI
	ADD	ESI,8
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_putFont8
	ADD	ESP,24
	CMP	BYTE [EBX],0
	JNE	L138
	JMP	L140
	GLOBAL	_putFont8AscSheet
_putFont8AscSheet:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,12
	MOV	EAX,DWORD [8+EBP]
	MOV	EDI,DWORD [16+EBP]
	MOV	DWORD [-16+EBP],EAX
	MOV	EBX,DWORD [20+EBP]
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [-20+EBP],EAX
	MOV	EAX,DWORD [28+EBP]
	MOV	DWORD [-24+EBP],EAX
	LEA	EAX,DWORD [15+EDI]
	PUSH	EAX
	MOV	EAX,DWORD [-20+EBP]
	MOV	ESI,DWORD [32+EBP]
	MOVSX	EBX,BL
	LEA	ESI,DWORD [EAX+ESI*8]
	LEA	EAX,DWORD [-1+ESI]
	PUSH	EAX
	PUSH	EDI
	PUSH	DWORD [-20+EBP]
	MOVZX	EAX,BYTE [24+EBP]
	PUSH	EAX
	MOV	EAX,DWORD [-16+EBP]
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	PUSH	DWORD [-24+EBP]
	PUSH	EBX
	PUSH	EDI
	PUSH	DWORD [-20+EBP]
	MOV	EAX,DWORD [-16+EBP]
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_putFont8_asc
	MOV	DWORD [16+EBP],EDI
	LEA	EAX,DWORD [16+EDI]
	MOV	DWORD [20+EBP],ESI
	MOV	DWORD [24+EBP],EAX
	ADD	ESP,52
	MOV	EAX,DWORD [-20+EBP]
	MOV	DWORD [12+EBP],EAX
	MOV	EAX,DWORD [-16+EBP]
	MOV	DWORD [8+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_sheetRefresh
[SECTION .data]
_cursor.1:
	DB	"*..............."
	DB	"**.............."
	DB	"*O*............."
	DB	"*OO*............"
	DB	"*OOO*..........."
	DB	"*OOOO*.........."
	DB	"*OOOOO*........."
	DB	"*OOOOOO*........"
	DB	"*OOOOOOO*......."
	DB	"*OOOO*****......"
	DB	"*OO*O*.........."
	DB	"*O*.*O*........."
	DB	"**..*O*........."
	DB	"*....*O*........"
	DB	".....*O*........"
	DB	"......*........."
[SECTION .text]
	GLOBAL	_initMouseCursor8
_initMouseCursor8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	EDI,EDI
	PUSH	EBX
	XOR	EBX,EBX
	PUSH	EAX
	MOV	AL,BYTE [12+EBP]
	MOV	ESI,DWORD [8+EBP]
	MOV	BYTE [-13+EBP],AL
L155:
	XOR	EDX,EDX
L154:
	LEA	EAX,DWORD [EDX+EDI*1]
	CMP	BYTE [_cursor.1+EAX],42
	JE	L160
L151:
	CMP	BYTE [_cursor.1+EAX],79
	JE	L161
L152:
	CMP	BYTE [_cursor.1+EAX],46
	JE	L162
L149:
	INC	EDX
	CMP	EDX,15
	JLE	L154
	INC	EBX
	ADD	EDI,16
	CMP	EBX,15
	JLE	L155
	POP	EAX
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L162:
	MOV	CL,BYTE [-13+EBP]
	MOV	BYTE [EAX+ESI*1],CL
	JMP	L149
L161:
	MOV	BYTE [EAX+ESI*1],7
	JMP	L152
L160:
	MOV	BYTE [EAX+ESI*1],0
	JMP	L151
	GLOBAL	_putblock8_8
_putblock8_8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	ESI,ESI
	PUSH	EBX
	SUB	ESP,12
	CMP	ESI,DWORD [20+EBP]
	JGE	L175
	XOR	EDI,EDI
L173:
	XOR	EBX,EBX
	CMP	EBX,DWORD [16+EBP]
	JGE	L177
	MOV	EAX,DWORD [32+EBP]
	ADD	EAX,EDI
	MOV	DWORD [-20+EBP],EAX
L172:
	MOV	EAX,DWORD [28+EBP]
	MOV	EDX,DWORD [24+EBP]
	ADD	EAX,ESI
	ADD	EDX,EBX
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDX
	MOV	ECX,DWORD [8+EBP]
	MOV	EDX,DWORD [-20+EBP]
	INC	EBX
	MOV	DL,BYTE [EDX]
	MOV	BYTE [EAX+ECX*1],DL
	INC	DWORD [-20+EBP]
	CMP	EBX,DWORD [16+EBP]
	JL	L172
L177:
	INC	ESI
	ADD	EDI,DWORD [36+EBP]
	CMP	ESI,DWORD [20+EBP]
	JL	L173
L175:
	ADD	ESP,12
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_memtest
_memtest:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	XOR	ESI,ESI
	CALL	_io_load_eflags
	OR	EAX,262144
	PUSH	EAX
	CALL	_io_store_eflags
	CALL	_io_load_eflags
	POP	EDX
	TEST	EAX,262144
	JE	L179
	MOV	ESI,1
L179:
	AND	EAX,-262145
	PUSH	EAX
	CALL	_io_store_eflags
	MOV	EAX,ESI
	POP	EBX
	TEST	AL,AL
	JNE	L182
L180:
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_memtest_sub
	MOV	EBX,EAX
	POP	EAX
	MOV	EAX,ESI
	POP	EDX
	TEST	AL,AL
	JNE	L183
L181:
	LEA	ESP,DWORD [-8+EBP]
	MOV	EAX,EBX
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L183:
	CALL	_loadCr0
	AND	EAX,-1610612737
	PUSH	EAX
	CALL	_storeCr0
	POP	EAX
	JMP	L181
L182:
	CALL	_loadCr0
	OR	EAX,1610612736
	PUSH	EAX
	CALL	_storeCr0
	POP	ECX
	JMP	L180
	GLOBAL	_memsegTotal
_memsegTotal:
	PUSH	EBP
	XOR	EAX,EAX
	MOV	EBP,ESP
	XOR	EDX,EDX
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	MOV	ECX,DWORD [EBX]
	CMP	EAX,ECX
	JAE	L191
L189:
	ADD	EAX,DWORD [20+EBX+EDX*8]
	INC	EDX
	CMP	EDX,ECX
	JB	L189
L191:
	POP	EBX
	POP	EBP
	RET
	GLOBAL	_memsegInit
_memsegInit:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [EAX],0
	MOV	DWORD [4+EAX],0
	MOV	DWORD [8+EAX],0
	MOV	DWORD [12+EAX],0
	POP	EBP
	RET
	GLOBAL	_memsegAlloc
_memsegAlloc:
	PUSH	EBP
	XOR	ECX,ECX
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	ESI,DWORD [12+EBP]
	MOV	EBX,DWORD [8+EBP]
	MOV	EAX,DWORD [EBX]
	CMP	ECX,EAX
	JAE	L207
L205:
	MOV	EDX,DWORD [20+EBX+ECX*8]
	CMP	EDX,ESI
	JAE	L209
	INC	ECX
	CMP	ECX,EAX
	JB	L205
L207:
	XOR	EAX,EAX
L193:
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L209:
	MOV	EDI,DWORD [16+EBX+ECX*8]
	LEA	EAX,DWORD [ESI+EDI*1]
	MOV	DWORD [16+EBX+ECX*8],EAX
	MOV	EAX,EDX
	SUB	EAX,ESI
	MOV	DWORD [20+EBX+ECX*8],EAX
	TEST	EAX,EAX
	JNE	L199
	MOV	EAX,DWORD [EBX]
	DEC	EAX
	MOV	DWORD [EBX],EAX
	CMP	ECX,EAX
	JAE	L199
	MOV	ESI,EAX
L204:
	MOV	EAX,DWORD [24+EBX+ECX*8]
	MOV	EDX,DWORD [28+EBX+ECX*8]
	MOV	DWORD [16+EBX+ECX*8],EAX
	MOV	DWORD [20+EBX+ECX*8],EDX
	INC	ECX
	CMP	ECX,ESI
	JB	L204
L199:
	MOV	EAX,EDI
	JMP	L193
	GLOBAL	_memsegFree
_memsegFree:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	ESI,DWORD [8+EBP]
	PUSH	EBX
	XOR	EBX,EBX
	MOV	EDI,DWORD [ESI]
	CMP	EBX,EDI
	JGE	L212
L216:
	MOV	EAX,DWORD [12+EBP]
	CMP	DWORD [16+ESI+EBX*8],EAX
	JA	L212
	INC	EBX
	CMP	EBX,EDI
	JL	L216
L212:
	TEST	EBX,EBX
	JLE	L217
	MOV	EDX,DWORD [12+ESI+EBX*8]
	MOV	EAX,DWORD [8+ESI+EBX*8]
	ADD	EAX,EDX
	CMP	EAX,DWORD [12+EBP]
	JE	L237
L217:
	CMP	EBX,EDI
	JGE	L224
	MOV	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [16+EBP]
	CMP	EAX,DWORD [16+ESI+EBX*8]
	JE	L238
L224:
	CMP	EDI,4089
	JG	L225
	MOV	ECX,EDI
	CMP	EDI,EBX
	JLE	L235
L230:
	MOV	EAX,DWORD [8+ESI+ECX*8]
	MOV	EDX,DWORD [12+ESI+ECX*8]
	MOV	DWORD [16+ESI+ECX*8],EAX
	MOV	DWORD [20+ESI+ECX*8],EDX
	DEC	ECX
	CMP	ECX,EBX
	JG	L230
L235:
	LEA	EAX,DWORD [1+EDI]
	MOV	DWORD [ESI],EAX
	CMP	DWORD [4+ESI],EAX
	JGE	L231
	MOV	DWORD [4+ESI],EAX
L231:
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [16+ESI+EBX*8],EAX
	MOV	EAX,DWORD [16+EBP]
	MOV	DWORD [20+ESI+EBX*8],EAX
L236:
	XOR	EAX,EAX
L210:
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L225:
	MOV	EAX,DWORD [16+EBP]
	INC	DWORD [12+ESI]
	ADD	DWORD [8+ESI],EAX
	OR	EAX,-1
	JMP	L210
L238:
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [16+ESI+EBX*8],EAX
	MOV	EAX,DWORD [16+EBP]
	ADD	DWORD [20+ESI+EBX*8],EAX
	JMP	L236
L237:
	ADD	EDX,DWORD [16+EBP]
	MOV	DWORD [12+ESI+EBX*8],EDX
	CMP	EBX,DWORD [ESI]
	JGE	L236
	MOV	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [16+EBP]
	CMP	EAX,DWORD [16+ESI+EBX*8]
	JNE	L236
	ADD	EDX,DWORD [20+ESI+EBX*8]
	MOV	DWORD [12+ESI+EBX*8],EDX
	MOV	EAX,DWORD [ESI]
	DEC	EAX
	MOV	DWORD [ESI],EAX
	CMP	EBX,EAX
	JGE	L236
	MOV	ECX,EAX
L223:
	MOV	EAX,DWORD [24+ESI+EBX*8]
	MOV	EDX,DWORD [28+ESI+EBX*8]
	MOV	DWORD [16+ESI+EBX*8],EAX
	MOV	DWORD [20+ESI+EBX*8],EDX
	INC	EBX
	CMP	EBX,ECX
	JL	L223
	JMP	L236
	GLOBAL	_memsegAlloc4K
_memsegAlloc4K:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [12+EBP]
	ADD	EAX,4095
	AND	EAX,-4096
	MOV	DWORD [12+EBP],EAX
	POP	EBP
	JMP	_memsegAlloc
	GLOBAL	_memsegFree4K
_memsegFree4K:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [16+EBP]
	ADD	EAX,4095
	AND	EAX,-4096
	MOV	DWORD [16+EBP],EAX
	POP	EBP
	JMP	_memsegFree
	GLOBAL	_shtctlInit
_shtctlInit:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	ESI,DWORD [8+EBP]
	PUSH	10260
	MOV	EDI,DWORD [16+EBP]
	PUSH	ESI
	CALL	_memsegAlloc4K
	POP	ECX
	MOV	EBX,EAX
	POP	EAX
	XOR	EAX,EAX
	TEST	EBX,EBX
	JE	L241
	MOV	EAX,DWORD [20+EBP]
	IMUL	EAX,EDI
	PUSH	EAX
	PUSH	ESI
	CALL	_memsegAlloc4K
	TEST	EAX,EAX
	MOV	DWORD [4+EBX],EAX
	POP	ECX
	POP	EDX
	JE	L252
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [8+EBX],EDI
	MOV	DWORD [EBX],EAX
	LEA	EDX,DWORD [9180+EBX]
	MOV	EAX,DWORD [20+EBP]
	MOV	DWORD [12+EBX],EAX
	MOV	EAX,EBX
	MOV	DWORD [16+EBX],-1
L248:
	MOV	DWORD [1072+EAX],0
	MOV	DWORD [1076+EAX],EBX
	ADD	EAX,36
	CMP	EAX,EDX
	JLE	L248
L251:
	MOV	EAX,EBX
L241:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L252:
	PUSH	10260
	PUSH	EBX
	PUSH	ESI
	CALL	_memsegFree4K
	JMP	L251
	GLOBAL	_sheetAlloc
_sheetAlloc:
	PUSH	EBP
	XOR	EDX,EDX
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	ADD	EAX,1044
L259:
	CMP	DWORD [28+EAX],0
	JE	L262
	INC	EDX
	ADD	EAX,36
	CMP	EDX,255
	JLE	L259
	XOR	EAX,EAX
L253:
	POP	EBP
	RET
L262:
	MOV	DWORD [28+EAX],1
	MOV	DWORD [24+EAX],-1
	JMP	L253
	GLOBAL	_sheetSetbuf
_sheetSetbuf:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EDX,DWORD [8+EBP]
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [EDX],EAX
	MOV	EAX,DWORD [16+EBP]
	MOV	DWORD [4+EDX],EAX
	MOV	EAX,DWORD [20+EBP]
	MOV	DWORD [8+EDX],EAX
	MOV	EAX,DWORD [24+EBP]
	MOV	DWORD [20+EDX],EAX
	POP	EBP
	RET
	GLOBAL	_sheetRefreshMap
_sheetRefreshMap:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,40
	MOV	EAX,DWORD [8+EBP]
	CMP	DWORD [12+EBP],0
	MOV	EAX,DWORD [4+EAX]
	MOV	DWORD [-40+EBP],EAX
	JS	L295
L265:
	CMP	DWORD [16+EBP],0
	JS	L296
L266:
	MOV	EDX,DWORD [8+EBP]
	MOV	EAX,DWORD [8+EDX]
	CMP	DWORD [20+EBP],EAX
	JLE	L267
	MOV	DWORD [20+EBP],EAX
L267:
	MOV	ESI,DWORD [8+EBP]
	MOV	EAX,DWORD [12+ESI]
	CMP	DWORD [24+EBP],EAX
	JLE	L268
	MOV	DWORD [24+EBP],EAX
L268:
	MOV	EAX,DWORD [8+EBP]
	MOV	EDI,DWORD [28+EBP]
	MOV	DWORD [-16+EBP],EDI
	CMP	EDI,DWORD [16+EAX]
	JG	L290
L288:
	MOV	ESI,DWORD [8+EBP]
	MOV	EDX,DWORD [-16+EBP]
	MOV	EBX,DWORD [16+EBP]
	MOV	ECX,DWORD [20+ESI+EDX*4]
	MOV	EAX,ECX
	SUB	EAX,ESI
	MOV	EDI,DWORD [ECX]
	SUB	EAX,1044
	MOV	EDX,DWORD [16+ECX]
	SAR	EAX,2
	MOV	DWORD [-32+EBP],EDI
	IMUL	EAX,EAX,954437177
	MOV	EDI,DWORD [24+EBP]
	SUB	EBX,EDX
	SUB	EDI,EDX
	MOV	BYTE [-33+EBP],AL
	MOV	ESI,DWORD [20+EBP]
	MOV	EDX,DWORD [12+EBP]
	MOV	EAX,DWORD [12+ECX]
	MOV	DWORD [-44+EBP],EDI
	SUB	ESI,EAX
	SUB	EDX,EAX
	MOV	DWORD [-52+EBP],ESI
	MOV	DWORD [-28+EBP],EDX
	JS	L297
L273:
	TEST	EBX,EBX
	JS	L298
L274:
	MOV	EAX,DWORD [4+ECX]
	CMP	DWORD [-52+EBP],EAX
	JLE	L275
	MOV	DWORD [-52+EBP],EAX
L275:
	MOV	EAX,DWORD [8+ECX]
	CMP	DWORD [-44+EBP],EAX
	JLE	L276
	MOV	DWORD [-44+EBP],EAX
L276:
	CMP	EBX,DWORD [-44+EBP]
	JGE	L292
L287:
	MOV	ESI,DWORD [16+ECX]
	MOV	EDX,DWORD [-28+EBP]
	ADD	ESI,EBX
	CMP	EDX,DWORD [-52+EBP]
	MOV	DWORD [-24+EBP],ESI
	JGE	L294
L286:
	MOV	EAX,EBX
	MOV	EDI,DWORD [12+ECX]
	IMUL	EAX,DWORD [4+ECX]
	ADD	EDI,EDX
	MOV	ESI,DWORD [-32+EBP]
	ADD	EAX,EDX
	MOV	DWORD [-20+EBP],EDI
	MOVZX	ESI,BYTE [EAX+ESI*1]
	CMP	ESI,DWORD [20+ECX]
	JE	L283
	MOV	EDI,DWORD [8+EBP]
	MOV	EAX,DWORD [-24+EBP]
	MOV	ESI,DWORD [-40+EBP]
	IMUL	EAX,DWORD [8+EDI]
	ADD	EAX,DWORD [-20+EBP]
	MOV	DWORD [-48+EBP],EAX
	MOV	AL,BYTE [-33+EBP]
	MOV	EDI,DWORD [-48+EBP]
	MOV	BYTE [EDI+ESI*1],AL
L283:
	INC	EDX
	CMP	EDX,DWORD [-52+EBP]
	JL	L286
L294:
	INC	EBX
	CMP	EBX,DWORD [-44+EBP]
	JL	L287
L292:
	MOV	EDX,DWORD [8+EBP]
	INC	DWORD [-16+EBP]
	MOV	EAX,DWORD [-16+EBP]
	CMP	EAX,DWORD [16+EDX]
	JLE	L288
L290:
	ADD	ESP,40
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L298:
	XOR	EBX,EBX
	JMP	L274
L297:
	MOV	DWORD [-28+EBP],0
	JMP	L273
L296:
	MOV	DWORD [16+EBP],0
	JMP	L266
L295:
	MOV	DWORD [12+EBP],0
	JMP	L265
	GLOBAL	_sheetUpdown
_sheetUpdown:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	EDI,DWORD [8+EBP]
	PUSH	EBX
	MOV	ESI,DWORD [12+EBP]
	MOV	EBX,DWORD [32+EDI]
	MOV	EAX,DWORD [24+EDI]
	MOV	EDX,DWORD [16+EBX]
	INC	EDX
	CMP	ESI,EDX
	JLE	L300
	MOV	ESI,EDX
L300:
	CMP	ESI,-1
	JGE	L301
	OR	ESI,-1
L301:
	MOV	DWORD [24+EDI],ESI
	CMP	EAX,ESI
	JLE	L302
	TEST	ESI,ESI
	JS	L303
	MOV	ECX,EAX
L308:
	MOV	EAX,DWORD [16+EBX+ECX*4]
	MOV	DWORD [20+EBX+ECX*4],EAX
	MOV	DWORD [24+EAX],ECX
	DEC	ECX
	CMP	ECX,ESI
	JG	L308
	MOV	DWORD [20+EBX+ESI*4],EDI
	LEA	EBX,DWORD [1+ESI]
	PUSH	EBX
	MOV	ECX,DWORD [16+EDI]
	MOV	EAX,ECX
	ADD	EAX,DWORD [8+EDI]
	PUSH	EAX
	MOV	EDX,DWORD [12+EDI]
	MOV	EAX,EDX
	ADD	EAX,DWORD [4+EDI]
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	PUSH	DWORD [32+EDI]
	CALL	_sheetRefreshMap
	PUSH	EBX
L337:
	MOV	ECX,DWORD [16+EDI]
	MOV	EAX,ECX
	ADD	EAX,DWORD [8+EDI]
	PUSH	EAX
	MOV	EDX,DWORD [12+EDI]
	MOV	EAX,EDX
	ADD	EAX,DWORD [4+EDI]
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	PUSH	DWORD [32+EDI]
	CALL	_sheetRefreshSub
	ADD	ESP,48
L299:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L303:
	MOV	EDX,DWORD [16+EBX]
	CMP	EDX,EAX
	JLE	L310
	MOV	ECX,EAX
	CMP	EAX,EDX
	JGE	L310
L315:
	MOV	EAX,DWORD [24+EBX+ECX*4]
	MOV	DWORD [20+EBX+ECX*4],EAX
	MOV	DWORD [24+EAX],ECX
	INC	ECX
	CMP	ECX,DWORD [16+EBX]
	JL	L315
L310:
	DEC	DWORD [16+EBX]
	PUSH	0
	MOV	ECX,DWORD [16+EDI]
	MOV	EAX,ECX
	ADD	EAX,DWORD [8+EDI]
	PUSH	EAX
	MOV	EDX,DWORD [12+EDI]
	MOV	EAX,EDX
	ADD	EAX,DWORD [4+EDI]
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	PUSH	DWORD [32+EDI]
	CALL	_sheetRefreshMap
	PUSH	0
	JMP	L337
L302:
	CMP	EAX,ESI
	JGE	L299
	TEST	EAX,EAX
	JS	L318
	MOV	ECX,EAX
	CMP	EAX,ESI
	JGE	L334
L323:
	MOV	EAX,DWORD [24+EBX+ECX*4]
	MOV	DWORD [20+EBX+ECX*4],EAX
	MOV	DWORD [24+EAX],ECX
	INC	ECX
	CMP	ECX,ESI
	JL	L323
L334:
	MOV	DWORD [20+EBX+ESI*4],EDI
L324:
	PUSH	ESI
	MOV	ECX,DWORD [16+EDI]
	MOV	EAX,ECX
	ADD	EAX,DWORD [8+EDI]
	PUSH	EAX
	MOV	EDX,DWORD [12+EDI]
	MOV	EAX,EDX
	ADD	EAX,DWORD [4+EDI]
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	PUSH	DWORD [32+EDI]
	CALL	_sheetRefreshMap
	PUSH	ESI
	JMP	L337
L318:
	MOV	ECX,DWORD [16+EBX]
	CMP	ECX,ESI
	JL	L336
L329:
	MOV	EDX,DWORD [20+EBX+ECX*4]
	LEA	EAX,DWORD [1+ECX]
	MOV	DWORD [24+EBX+ECX*4],EDX
	DEC	ECX
	MOV	DWORD [24+EDX],EAX
	CMP	ECX,ESI
	JGE	L329
L336:
	MOV	DWORD [20+EBX+ESI*4],EDI
	INC	DWORD [16+EBX]
	JMP	L324
	GLOBAL	_sheetRefresh
_sheetRefresh:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	MOV	EAX,DWORD [24+EBX]
	TEST	EAX,EAX
	JS	L338
	PUSH	EAX
	MOV	ECX,DWORD [16+EBX]
	MOV	EAX,ECX
	ADD	ECX,DWORD [16+EBP]
	ADD	EAX,DWORD [24+EBP]
	PUSH	EAX
	MOV	EDX,DWORD [12+EBX]
	MOV	EAX,EDX
	ADD	EDX,DWORD [12+EBP]
	ADD	EAX,DWORD [20+EBP]
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	PUSH	DWORD [32+EBX]
	CALL	_sheetRefreshSub
	ADD	ESP,24
L338:
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
	GLOBAL	_sheetRefreshSub
_sheetRefreshSub:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,44
	MOV	EAX,DWORD [8+EBP]
	MOV	EDX,DWORD [8+EBP]
	CMP	DWORD [12+EBP],0
	MOV	EAX,DWORD [EAX]
	MOV	EDX,DWORD [4+EDX]
	MOV	DWORD [-36+EBP],EAX
	MOV	DWORD [-40+EBP],EDX
	JS	L371
L341:
	CMP	DWORD [16+EBP],0
	JS	L372
L342:
	MOV	ESI,DWORD [8+EBP]
	MOV	EAX,DWORD [8+ESI]
	CMP	DWORD [20+EBP],EAX
	JLE	L343
	MOV	DWORD [20+EBP],EAX
L343:
	MOV	EDI,DWORD [8+EBP]
	MOV	EAX,DWORD [12+EDI]
	CMP	DWORD [24+EBP],EAX
	JLE	L344
	MOV	DWORD [24+EBP],EAX
L344:
	MOV	EDX,DWORD [8+EBP]
	MOV	EAX,DWORD [28+EBP]
	MOV	DWORD [-16+EBP],EAX
	CMP	EAX,DWORD [16+EDX]
	JG	L366
L364:
	MOV	EDI,DWORD [8+EBP]
	MOV	ESI,DWORD [-16+EBP]
	MOV	ECX,DWORD [16+EBP]
	MOV	EBX,DWORD [20+EDI+ESI*4]
	MOV	ESI,DWORD [20+EBP]
	MOV	EAX,EBX
	SUB	EAX,EDI
	MOV	EDX,DWORD [16+EBX]
	SUB	EAX,1044
	MOV	EDI,DWORD [24+EBP]
	SAR	EAX,2
	SUB	EDI,EDX
	IMUL	EAX,EAX,954437177
	MOV	BYTE [-41+EBP],AL
	SUB	ECX,EDX
	MOV	EAX,DWORD [EBX]
	MOV	EDX,DWORD [12+EBP]
	MOV	DWORD [-32+EBP],EAX
	MOV	DWORD [-56+EBP],EDI
	MOV	EAX,DWORD [12+EBX]
	SUB	ESI,EAX
	SUB	EDX,EAX
	MOV	DWORD [-28+EBP],ESI
	MOV	DWORD [-24+EBP],EDX
	JS	L373
L349:
	TEST	ECX,ECX
	JS	L374
L350:
	MOV	EAX,DWORD [4+EBX]
	CMP	DWORD [-28+EBP],EAX
	JLE	L351
	MOV	DWORD [-28+EBP],EAX
L351:
	MOV	EAX,DWORD [8+EBX]
	CMP	DWORD [-56+EBP],EAX
	JLE	L352
	MOV	DWORD [-56+EBP],EAX
L352:
	MOV	ESI,ECX
	CMP	ECX,DWORD [-56+EBP]
	JGE	L368
L363:
	MOV	EDI,DWORD [16+EBX]
	MOV	ECX,DWORD [-24+EBP]
	ADD	EDI,ESI
	CMP	ECX,DWORD [-28+EBP]
	MOV	DWORD [-20+EBP],EDI
	JGE	L370
L362:
	MOV	EDX,DWORD [8+EBP]
	MOV	EDI,DWORD [-20+EBP]
	MOV	EAX,DWORD [12+EBX]
	IMUL	EDI,DWORD [8+EDX]
	ADD	EAX,ECX
	MOV	DL,BYTE [-41+EBP]
	ADD	EAX,EDI
	MOV	EDI,DWORD [-40+EBP]
	MOV	DWORD [-52+EBP],EAX
	CMP	BYTE [EAX+EDI*1],DL
	JE	L375
L359:
	INC	ECX
	CMP	ECX,DWORD [-28+EBP]
	JL	L362
L370:
	INC	ESI
	CMP	ESI,DWORD [-56+EBP]
	JL	L363
L368:
	MOV	EDI,DWORD [8+EBP]
	INC	DWORD [-16+EBP]
	MOV	ESI,DWORD [-16+EBP]
	CMP	ESI,DWORD [16+EDI]
	JLE	L364
L366:
	ADD	ESP,44
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L375:
	MOV	EAX,ESI
	MOV	EDX,DWORD [-32+EBP]
	IMUL	EAX,DWORD [4+EBX]
	ADD	EAX,ECX
	MOV	EDI,DWORD [-36+EBP]
	MOV	AL,BYTE [EAX+EDX*1]
	MOV	EDX,DWORD [-52+EBP]
	MOV	BYTE [EDX+EDI*1],AL
	JMP	L359
L374:
	XOR	ECX,ECX
	JMP	L350
L373:
	MOV	DWORD [-24+EBP],0
	JMP	L349
L372:
	MOV	DWORD [16+EBP],0
	JMP	L342
L371:
	MOV	DWORD [12+EBP],0
	JMP	L341
	GLOBAL	_sheetSlide
_sheetSlide:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	EAX,DWORD [12+EBP]
	MOV	EBX,DWORD [8+EBP]
	MOV	EDI,DWORD [12+EBX]
	MOV	ESI,DWORD [16+EBX]
	MOV	DWORD [12+EBX],EAX
	MOV	EAX,DWORD [16+EBP]
	MOV	DWORD [16+EBX],EAX
	CMP	DWORD [24+EBX],0
	JS	L376
	PUSH	0
	MOV	EAX,ESI
	ADD	EAX,DWORD [8+EBX]
	PUSH	EAX
	MOV	EAX,EDI
	ADD	EAX,DWORD [4+EBX]
	PUSH	EAX
	PUSH	ESI
	PUSH	EDI
	PUSH	DWORD [32+EBX]
	CALL	_sheetRefreshMap
	MOV	EAX,DWORD [16+EBP]
	PUSH	DWORD [24+EBX]
	ADD	EAX,DWORD [8+EBX]
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [4+EBX]
	PUSH	EAX
	PUSH	DWORD [16+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [32+EBX]
	CALL	_sheetRefreshMap
	MOV	EAX,ESI
	ADD	ESP,48
	PUSH	0
	ADD	EAX,DWORD [8+EBX]
	PUSH	EAX
	MOV	EAX,EDI
	ADD	EAX,DWORD [4+EBX]
	PUSH	EAX
	PUSH	ESI
	PUSH	EDI
	PUSH	DWORD [32+EBX]
	CALL	_sheetRefreshSub
	MOV	EAX,DWORD [16+EBP]
	PUSH	DWORD [24+EBX]
	ADD	EAX,DWORD [8+EBX]
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [4+EBX]
	PUSH	EAX
	PUSH	DWORD [16+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [32+EBX]
	CALL	_sheetRefreshSub
	ADD	ESP,48
L376:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_sheetFree
_sheetFree:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	CMP	DWORD [24+EBX],0
	JS	L379
	PUSH	-1
	PUSH	EBX
	CALL	_sheetUpdown
	POP	EAX
	POP	EDX
L379:
	MOV	DWORD [28+EBX],0
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
[SECTION .data]
LC0:
	DB	"%011d",0x00
[SECTION .text]
	GLOBAL	_taskBmain
_taskBmain:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	LEA	EAX,DWORD [-556+EBP]
	SUB	ESP,568
	LEA	EBX,DWORD [-44+EBP]
	MOV	DWORD [-576+EBP],0
	PUSH	EAX
	PUSH	128
	PUSH	EBX
	MOV	DWORD [-580+EBP],0
	CALL	_QueueInit
	CALL	_timerAlloc
	PUSH	100
	PUSH	EBX
	MOV	EDI,EAX
	PUSH	EAX
	CALL	_timerInit
	PUSH	100
	PUSH	EDI
	CALL	_timerSetTime
	ADD	ESP,32
	CALL	_timerAlloc
	PUSH	1
	MOV	ESI,EAX
	PUSH	EBX
	PUSH	EAX
	CALL	_timerInit
	PUSH	1
	PUSH	ESI
	CALL	_timerSetTime
	ADD	ESP,20
L381:
	LEA	EBX,DWORD [-44+EBP]
	INC	DWORD [-576+EBP]
	CALL	_io_cli
	PUSH	EBX
	CALL	_QueueSize
	POP	EDX
	TEST	EAX,EAX
	JE	L390
	PUSH	EBX
	CALL	_QueuePop
	MOV	EBX,EAX
	CALL	_io_sti
	POP	EAX
	CMP	EBX,100
	JE	L391
	DEC	EBX
	JNE	L381
	PUSH	DWORD [-576+EBP]
	PUSH	LC0
	LEA	EBX,DWORD [-572+EBP]
	PUSH	EBX
	CALL	_sprintf
	PUSH	11
	PUSH	EBX
	PUSH	14
	PUSH	7
	PUSH	144
	PUSH	0
	PUSH	DWORD [8+EBP]
	CALL	_putFont8AscSheet
	ADD	ESP,40
	PUSH	1
	PUSH	ESI
L389:
	CALL	_timerSetTime
	POP	ECX
	POP	EBX
	JMP	L381
L391:
	MOV	EAX,DWORD [-576+EBP]
	LEA	EBX,DWORD [-572+EBP]
	SUB	EAX,DWORD [-580+EBP]
	PUSH	EAX
	PUSH	LC0
	PUSH	EBX
	CALL	_sprintf
	PUSH	11
	PUSH	EBX
	PUSH	14
	PUSH	7
	PUSH	128
	PUSH	0
	PUSH	DWORD [8+EBP]
	CALL	_putFont8AscSheet
	ADD	ESP,40
	MOV	EAX,DWORD [-576+EBP]
	PUSH	100
	MOV	DWORD [-580+EBP],EAX
	PUSH	EDI
	JMP	L389
L390:
	CALL	_io_sti
	JMP	L381
	GLOBAL	_makeTextBox
_makeTextBox:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,20
	MOV	EAX,DWORD [12+EBP]
	MOV	ESI,DWORD [16+EBP]
	ADD	EAX,DWORD [20+EBP]
	SUB	ESI,3
	PUSH	ESI
	MOV	DWORD [-16+EBP],EAX
	MOV	EAX,DWORD [16+EBP]
	ADD	EAX,DWORD [24+EBP]
	MOV	DWORD [-20+EBP],EAX
	MOV	EAX,DWORD [-16+EBP]
	INC	EAX
	PUSH	EAX
	MOV	DWORD [-24+EBP],EAX
	MOV	EAX,DWORD [12+EBP]
	PUSH	ESI
	SUB	EAX,2
	PUSH	EAX
	MOV	DWORD [-28+EBP],EAX
	MOV	EAX,DWORD [8+EBP]
	PUSH	15
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	MOV	EDI,DWORD [12+EBP]
	MOV	EAX,DWORD [-20+EBP]
	SUB	EDI,3
	INC	EAX
	PUSH	EAX
	MOV	DWORD [-32+EBP],EAX
	PUSH	EDI
	MOV	EAX,DWORD [8+EBP]
	PUSH	ESI
	PUSH	EDI
	PUSH	15
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	MOV	EAX,DWORD [8+EBP]
	ADD	ESP,56
	MOV	EBX,DWORD [-20+EBP]
	ADD	EBX,2
	PUSH	EBX
	PUSH	DWORD [-24+EBP]
	PUSH	EBX
	PUSH	EDI
	PUSH	7
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	MOV	EAX,DWORD [-16+EBP]
	PUSH	EBX
	ADD	EAX,2
	PUSH	EAX
	PUSH	ESI
	PUSH	EAX
	MOV	EAX,DWORD [8+EBP]
	PUSH	7
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	MOV	EAX,DWORD [8+EBP]
	ADD	ESP,56
	MOV	EBX,DWORD [16+EBP]
	SUB	EBX,2
	MOV	EDI,DWORD [12+EBP]
	PUSH	EBX
	DEC	EDI
	PUSH	DWORD [-16+EBP]
	PUSH	EBX
	PUSH	EDI
	PUSH	0
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [-20+EBP]
	PUSH	DWORD [-28+EBP]
	PUSH	EBX
	PUSH	DWORD [-28+EBP]
	PUSH	0
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	MOV	EAX,DWORD [8+EBP]
	ADD	ESP,56
	PUSH	DWORD [-32+EBP]
	PUSH	DWORD [-16+EBP]
	PUSH	DWORD [-32+EBP]
	PUSH	DWORD [-28+EBP]
	PUSH	8
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [-32+EBP]
	PUSH	DWORD [-24+EBP]
	PUSH	EBX
	PUSH	DWORD [-24+EBP]
	PUSH	8
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	MOV	EAX,DWORD [16+EBP]
	ADD	ESP,56
	DEC	EAX
	PUSH	DWORD [-20+EBP]
	PUSH	DWORD [-16+EBP]
	PUSH	EAX
	PUSH	EDI
	MOVZX	EAX,BYTE [28+EBP]
	PUSH	EAX
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
[SECTION .data]
_closeBtn.2:
	DB	"OOOOOOOOOOOOOOO@"
	DB	"OQQQQQQQQQQQQQ$@"
	DB	"OQQQQQQQQQQQQQ$@"
	DB	"OQQQ@@QQQQ@@QQ$@"
	DB	"OQQQQ@@QQ@@QQQ$@"
	DB	"OQQQQQ@@@@QQQQ$@"
	DB	"OQQQQQQ@@QQQQQ$@"
	DB	"OQQQQQ@@@@QQQQ$@"
	DB	"OQQQQ@@QQ@@QQQ$@"
	DB	"OQQQ@@QQQQ@@QQ$@"
	DB	"OQQQQQQQQQQQQQ$@"
	DB	"OQQQQQQQQQQQQQ$@"
	DB	"O$$$$$$$$$$$$$$@"
	DB	"@@@@@@@@@@@@@@@@"
[SECTION .text]
	GLOBAL	_makeWindow
_makeWindow:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,20
	MOV	EBX,DWORD [12+EBP]
	PUSH	0
	LEA	EAX,DWORD [-1+EBX]
	LEA	EDI,DWORD [-2+EBX]
	PUSH	EAX
	MOV	DWORD [-20+EBP],EAX
	PUSH	0
	PUSH	0
	PUSH	8
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	PUSH	1
	PUSH	EDI
	PUSH	1
	PUSH	1
	PUSH	7
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EDX,DWORD [16+EBP]
	ADD	ESP,56
	DEC	EDX
	MOV	DWORD [-24+EBP],EDX
	PUSH	EDX
	PUSH	0
	PUSH	0
	PUSH	0
	PUSH	8
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	ESI,DWORD [16+EBP]
	SUB	ESI,2
	PUSH	ESI
	PUSH	1
	PUSH	1
	PUSH	1
	PUSH	7
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	ADD	ESP,56
	PUSH	ESI
	PUSH	EDI
	PUSH	1
	PUSH	EDI
	PUSH	15
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	PUSH	DWORD [-24+EBP]
	PUSH	DWORD [-20+EBP]
	PUSH	0
	PUSH	DWORD [-20+EBP]
	PUSH	0
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EAX,DWORD [16+EBP]
	ADD	ESP,56
	SUB	EAX,3
	PUSH	EAX
	LEA	EAX,DWORD [-3+EBX]
	PUSH	EAX
	PUSH	2
	PUSH	2
	PUSH	8
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	LEA	EAX,DWORD [-4+EBX]
	PUSH	20
	PUSH	EAX
	PUSH	3
	PUSH	3
	PUSH	12
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	ADD	ESP,56
	PUSH	ESI
	PUSH	EDI
	PUSH	ESI
	PUSH	1
	PUSH	15
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	PUSH	DWORD [-24+EBP]
	PUSH	DWORD [-20+EBP]
	PUSH	DWORD [-24+EBP]
	PUSH	0
	PUSH	0
	IMUL	ESI,EBX,5
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	ADD	ESP,56
	PUSH	DWORD [20+EBP]
	PUSH	7
	PUSH	4
	PUSH	24
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_putFont8_asc
	ADD	ESP,24
	MOV	DWORD [-16+EBP],0
	MOV	DWORD [-32+EBP],0
L409:
	LEA	EAX,DWORD [ESI+EBX*1]
	MOV	EDX,DWORD [8+EBP]
	XOR	EDI,EDI
	LEA	ECX,DWORD [-21+EDX+EAX*1]
L408:
	MOV	EAX,DWORD [-32+EBP]
	MOV	DL,BYTE [_closeBtn.2+EDI+EAX*1]
	CMP	DL,64
	JE	L414
	CMP	DL,36
	JE	L415
	CMP	DL,81
	MOV	DL,8
	SETNE	AL
	SUB	DL,AL
L403:
	INC	EDI
	MOV	BYTE [ECX],DL
	INC	ECX
	CMP	EDI,15
	JLE	L408
	INC	DWORD [-16+EBP]
	ADD	ESI,EBX
	ADD	DWORD [-32+EBP],16
	CMP	DWORD [-16+EBP],13
	JLE	L409
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L415:
	MOV	DL,15
	JMP	L403
L414:
	XOR	EDX,EDX
	JMP	L403
[SECTION .data]
LC1:
	DB	"window",0x00
LC2:
	DB	"DickOS",0x00
LC3:
	DB	"(%3d, %3d)",0x00
LC4:
	DB	"memory %dMB free : %dKB",0x00
LC9:
	DB	"3[sec]",0x00
LC8:
	DB	"10[sec]",0x00
LC7:
	DB	"[lcr %4d %4d]",0x00
LC5:
	DB	"%02X",0x00
LC6:
	DB	" ",0x00
[SECTION .text]
	GLOBAL	_Main
_Main:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	LEA	ESI,DWORD [-876+EBP]
	SUB	ESP,1124
	CALL	_initGdtit
	CALL	_init_pic
	CALL	_io_sti
	LEA	EAX,DWORD [-572+EBP]
	PUSH	EAX
	PUSH	128
	PUSH	ESI
	CALL	_QueueInit
	CALL	_initPit
	PUSH	256
	PUSH	ESI
	CALL	_initKeyboard
	LEA	EAX,DWORD [-588+EBP]
	PUSH	EAX
	PUSH	512
	PUSH	ESI
	CALL	_enableMouse
	ADD	ESP,32
	PUSH	248
	PUSH	33
	CALL	_io_out8
	PUSH	239
	PUSH	161
	CALL	_io_out8
	CALL	_timerAlloc
	PUSH	10
	PUSH	ESI
	MOV	EBX,EAX
	PUSH	EAX
	CALL	_timerInit
	PUSH	1000
	PUSH	EBX
	CALL	_timerSetTime
	ADD	ESP,36
	CALL	_timerAlloc
	PUSH	3
	MOV	EBX,EAX
	PUSH	ESI
	PUSH	EAX
	CALL	_timerInit
	PUSH	300
	PUSH	EBX
	CALL	_timerSetTime
	CALL	_timerAlloc
	PUSH	1
	PUSH	ESI
	PUSH	EAX
	MOV	DWORD [-1128+EBP],EAX
	CALL	_timerInit
	ADD	ESP,32
	PUSH	50
	PUSH	DWORD [-1128+EBP]
	CALL	_timerSetTime
	PUSH	-1073741825
	PUSH	4194304
	CALL	_memtest
	PUSH	3932160
	MOV	EBX,EAX
	CALL	_memsegInit
	PUSH	647168
	PUSH	4096
	PUSH	3932160
	CALL	_memsegFree
	LEA	EAX,DWORD [-4194304+EBX]
	ADD	ESP,32
	PUSH	EAX
	PUSH	4194304
	PUSH	3932160
	CALL	_memsegFree
	CALL	_init_palette
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	PUSH	3932160
	CALL	_shtctlInit
	MOV	EBX,EAX
	PUSH	EAX
	CALL	_sheetAlloc
	ADD	ESP,32
	PUSH	EBX
	MOV	DWORD [-1116+EBP],EAX
	CALL	_sheetAlloc
	PUSH	EBX
	LEA	EBX,DWORD [-844+EBP]
	MOV	DWORD [-1120+EBP],EAX
	CALL	_sheetAlloc
	MOVSX	EDX,WORD [4086]
	MOV	DWORD [-1124+EBP],EAX
	MOVSX	EAX,WORD [4084]
	IMUL	EAX,EDX
	PUSH	EAX
	PUSH	3932160
	CALL	_memsegAlloc4K
	PUSH	8320
	PUSH	3932160
	MOV	ESI,EAX
	CALL	_memsegAlloc4K
	PUSH	-1
	MOV	EDI,EAX
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	ESI
	PUSH	DWORD [-1116+EBP]
	CALL	_sheetSetbuf
	ADD	ESP,44
	PUSH	14
	PUSH	16
	PUSH	16
	PUSH	EBX
	PUSH	DWORD [-1120+EBP]
	CALL	_sheetSetbuf
	PUSH	-1
	PUSH	52
	PUSH	160
	PUSH	EDI
	PUSH	DWORD [-1124+EBP]
	CALL	_sheetSetbuf
	ADD	ESP,40
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	ESI
	CALL	_init_GUI
	PUSH	14
	PUSH	EBX
	MOV	EBX,2
	CALL	_initMouseCursor8
	PUSH	LC1
	PUSH	52
	PUSH	160
	PUSH	EDI
	CALL	_makeWindow
	ADD	ESP,36
	PUSH	7
	PUSH	16
	PUSH	144
	PUSH	28
	PUSH	8
	PUSH	DWORD [-1124+EBP]
	CALL	_makeTextBox
	PUSH	0
	PUSH	0
	PUSH	DWORD [-1116+EBP]
	MOV	DWORD [-1108+EBP],8
	MOV	DWORD [-1112+EBP],7
	CALL	_sheetSlide
	ADD	ESP,36
	MOVSX	EAX,WORD [4084]
	LEA	ECX,DWORD [-16+EAX]
	MOV	EAX,ECX
	CDQ
	IDIV	EBX
	MOV	DWORD [-1104+EBP],EAX
	MOVSX	EAX,WORD [4086]
	LEA	ECX,DWORD [-44+EAX]
	MOV	EAX,ECX
	CDQ
	IDIV	EBX
	PUSH	EAX
	MOV	EDI,EAX
	PUSH	DWORD [-1104+EBP]
	PUSH	DWORD [-1120+EBP]
	LEA	EBX,DWORD [-60+EBP]
	CALL	_sheetSlide
	PUSH	80
	PUSH	80
	PUSH	DWORD [-1124+EBP]
	CALL	_sheetSlide
	PUSH	0
	PUSH	DWORD [-1116+EBP]
	CALL	_sheetUpdown
	ADD	ESP,32
	PUSH	1
	PUSH	DWORD [-1124+EBP]
	CALL	_sheetUpdown
	PUSH	2
	PUSH	DWORD [-1120+EBP]
	CALL	_sheetUpdown
	PUSH	6
	PUSH	LC2
	PUSH	14
	PUSH	7
	PUSH	32
	PUSH	30
	PUSH	DWORD [-1116+EBP]
	CALL	_putFont8AscSheet
	ADD	ESP,44
	PUSH	EDI
	PUSH	DWORD [-1104+EBP]
	PUSH	LC3
	PUSH	EBX
	CALL	_sprintf
	PUSH	10
	PUSH	EBX
	PUSH	14
	PUSH	7
	PUSH	0
	PUSH	0
	PUSH	DWORD [-1116+EBP]
	CALL	_putFont8AscSheet
	ADD	ESP,44
	PUSH	3932160
	CALL	_memsegTotal
	SHR	EAX,10
	MOV	DWORD [ESP],EAX
	PUSH	-1073741825
	PUSH	4194304
	CALL	_memtest
	POP	ESI
	SHR	EAX,20
	POP	EDX
	PUSH	EAX
	PUSH	LC4
	PUSH	EBX
	CALL	_sprintf
	PUSH	26
	PUSH	EBX
	PUSH	14
	PUSH	7
	PUSH	48
	PUSH	0
	PUSH	DWORD [-1116+EBP]
	CALL	_putFont8AscSheet
	LEA	EAX,DWORD [-988+EBP]
	ADD	ESP,44
	MOV	DWORD [-892+EBP],0
	PUSH	137
	PUSH	EAX
	PUSH	103
	PUSH	2555928
	MOV	DWORD [-888+EBP],1073741824
	MOV	DWORD [-1004+EBP],0
	MOV	DWORD [-1000+EBP],1073741824
	CALL	_setSegmdesc
	LEA	EAX,DWORD [-1100+EBP]
	PUSH	137
	PUSH	EAX
	PUSH	103
	PUSH	2555936
	CALL	_setSegmdesc
	ADD	ESP,32
	PUSH	24
	CALL	_loadTr
	PUSH	65536
	PUSH	3932160
	CALL	_memsegAlloc4K
	MOV	EBX,DWORD [-1116+EBP]
	ADD	EAX,65528
	MOV	DWORD [4+EAX],EBX
	MOV	DWORD [-1044+EBP],EAX
	MOV	DWORD [-1068+EBP],_taskBmain
	MOV	DWORD [-1064+EBP],514
	MOV	DWORD [-1060+EBP],0
	MOV	DWORD [-1056+EBP],0
	MOV	DWORD [-1052+EBP],0
	MOV	DWORD [-1048+EBP],0
	MOV	DWORD [-1040+EBP],0
	MOV	DWORD [-1036+EBP],0
	MOV	DWORD [-1032+EBP],0
	MOV	DWORD [-1028+EBP],8
	MOV	DWORD [-1024+EBP],16
	MOV	DWORD [-1020+EBP],8
	MOV	DWORD [-1016+EBP],8
	MOV	DWORD [-1012+EBP],8
	MOV	DWORD [-1008+EBP],8
	CALL	_multiProcessInit
L445:
	ADD	ESP,12
L417:
	LEA	ESI,DWORD [-876+EBP]
	CALL	_io_cli
	PUSH	ESI
	CALL	_QueueSize
	POP	ECX
	TEST	EAX,EAX
	JE	L447
	PUSH	ESI
	CALL	_QueuePop
	MOV	EBX,EAX
	CALL	_io_sti
	POP	EDX
	LEA	EAX,DWORD [-256+EBX]
	CMP	EAX,255
	JBE	L448
	LEA	EAX,DWORD [-512+EBX]
	CMP	EAX,255
	JBE	L449
	CMP	EBX,10
	JE	L450
	CMP	EBX,3
	JE	L451
	CMP	EBX,1
	JG	L417
	DEC	EBX
	JE	L452
	PUSH	1
	PUSH	ESI
	PUSH	DWORD [-1128+EBP]
	CALL	_timerInit
	MOV	DWORD [-1112+EBP],7
L446:
	ADD	ESP,12
	MOV	EAX,DWORD [-1108+EBP]
	ADD	EAX,7
	MOV	EBX,DWORD [-1124+EBP]
	PUSH	43
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1108+EBP]
	PUSH	DWORD [-1112+EBP]
	PUSH	DWORD [4+EBX]
	PUSH	DWORD [EBX]
	CALL	_boxFill8
	PUSH	50
	PUSH	DWORD [-1128+EBP]
	CALL	_timerSetTime
	MOV	EAX,DWORD [-1108+EBP]
	ADD	ESP,36
	ADD	EAX,8
	PUSH	44
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1108+EBP]
	PUSH	EBX
	CALL	_sheetRefresh
	ADD	ESP,20
	JMP	L417
L452:
	PUSH	0
	PUSH	ESI
	PUSH	DWORD [-1128+EBP]
	CALL	_timerInit
	MOV	DWORD [-1112+EBP],0
	JMP	L446
L451:
	PUSH	6
	PUSH	LC9
	PUSH	14
	PUSH	7
	PUSH	96
L444:
	PUSH	0
	PUSH	DWORD [-1116+EBP]
	CALL	_putFont8AscSheet
	ADD	ESP,28
	JMP	L417
L450:
	PUSH	7
	PUSH	LC8
	PUSH	14
	PUSH	7
	PUSH	80
	JMP	L444
L449:
	MOVZX	EAX,BL
	PUSH	EAX
	LEA	EAX,DWORD [-588+EBP]
	PUSH	EAX
	CALL	_mouseDecode
	POP	ECX
	POP	EBX
	TEST	EAX,EAX
	JE	L417
	PUSH	DWORD [-580+EBP]
	PUSH	DWORD [-584+EBP]
	PUSH	LC7
	LEA	EBX,DWORD [-60+EBP]
	PUSH	EBX
	CALL	_sprintf
	ADD	ESP,16
	TEST	DWORD [-576+EBP],1
	JE	L429
	LEA	EAX,DWORD [-8+EDI]
	PUSH	EAX
	MOV	EAX,DWORD [-1104+EBP]
	SUB	EAX,80
	PUSH	EAX
	PUSH	DWORD [-1124+EBP]
	MOV	BYTE [-59+EBP],76
	CALL	_sheetSlide
	ADD	ESP,12
L429:
	MOV	EAX,DWORD [-576+EBP]
	TEST	EAX,2
	JE	L430
	MOV	BYTE [-57+EBP],82
L430:
	AND	EAX,4
	JE	L431
	MOV	BYTE [-58+EBP],67
L431:
	PUSH	15
	PUSH	EBX
	PUSH	14
	PUSH	7
	PUSH	16
	PUSH	32
	PUSH	DWORD [-1116+EBP]
	CALL	_putFont8AscSheet
	MOV	EDX,DWORD [-584+EBP]
	ADD	EDI,DWORD [-580+EBP]
	ADD	ESP,28
	ADD	DWORD [-1104+EBP],EDX
	JS	L453
L432:
	TEST	EDI,EDI
	JS	L454
L433:
	MOVSX	EAX,WORD [4084]
	DEC	EAX
	CMP	DWORD [-1104+EBP],EAX
	JLE	L434
	MOV	DWORD [-1104+EBP],EAX
L434:
	MOVSX	EAX,WORD [4086]
	DEC	EAX
	CMP	EDI,EAX
	JLE	L435
	MOV	EDI,EAX
L435:
	PUSH	EDI
	PUSH	DWORD [-1104+EBP]
	PUSH	LC3
	PUSH	EBX
	CALL	_sprintf
	PUSH	10
	PUSH	EBX
	PUSH	14
	PUSH	7
	PUSH	0
	PUSH	0
	PUSH	DWORD [-1116+EBP]
	CALL	_putFont8AscSheet
	ADD	ESP,44
	PUSH	EDI
	PUSH	DWORD [-1104+EBP]
	PUSH	DWORD [-1120+EBP]
	CALL	_sheetSlide
	JMP	L445
L454:
	XOR	EDI,EDI
	JMP	L433
L453:
	MOV	DWORD [-1104+EBP],0
	JMP	L432
L448:
	PUSH	EAX
	LEA	ESI,DWORD [-60+EBP]
	PUSH	LC5
	PUSH	ESI
	CALL	_sprintf
	PUSH	2
	PUSH	ESI
	PUSH	14
	PUSH	7
	PUSH	16
	PUSH	0
	PUSH	DWORD [-1116+EBP]
	CALL	_putFont8AscSheet
	ADD	ESP,40
	CMP	EBX,383
	JG	L423
	MOV	AL,BYTE [_keyboardTable-256+EBX]
	TEST	AL,AL
	JE	L423
	CMP	DWORD [-1108+EBP],143
	JG	L423
	PUSH	1
	MOV	BYTE [-60+EBP],AL
	PUSH	ESI
	PUSH	7
	PUSH	0
	PUSH	28
	PUSH	DWORD [-1108+EBP]
	PUSH	DWORD [-1124+EBP]
	MOV	BYTE [-59+EBP],0
	CALL	_putFont8AscSheet
	ADD	ESP,28
	ADD	DWORD [-1108+EBP],8
L423:
	CMP	EBX,270
	JE	L455
L425:
	MOV	EAX,DWORD [-1108+EBP]
	PUSH	43
	ADD	EAX,7
	PUSH	EAX
	MOV	EAX,DWORD [-1124+EBP]
	PUSH	28
	PUSH	DWORD [-1108+EBP]
	PUSH	DWORD [-1112+EBP]
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	MOV	EAX,DWORD [-1108+EBP]
	PUSH	44
	ADD	EAX,8
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1108+EBP]
	PUSH	DWORD [-1124+EBP]
	CALL	_sheetRefresh
	ADD	ESP,48
	JMP	L417
L455:
	CMP	DWORD [-1108+EBP],8
	JLE	L425
	PUSH	1
	PUSH	LC6
	PUSH	7
	PUSH	0
	PUSH	28
	PUSH	DWORD [-1108+EBP]
	PUSH	DWORD [-1124+EBP]
	CALL	_putFont8AscSheet
	ADD	ESP,28
	SUB	DWORD [-1108+EBP],8
	JMP	L425
L447:
	CALL	_io_stihlt
	JMP	L417
	GLOBAL	_keybuf
[SECTION .data]
	ALIGNB	4
_keybuf:
	RESB	4
	GLOBAL	_keyData0
[SECTION .data]
	ALIGNB	4
_keyData0:
	RESB	4
	GLOBAL	_mousebuf
[SECTION .data]
	ALIGNB	4
_mousebuf:
	RESB	4
	GLOBAL	_mouseData0
[SECTION .data]
	ALIGNB	4
_mouseData0:
	RESB	4
	GLOBAL	_timerctl
[SECTION .data]
	ALIGNB	16
_timerctl:
	RESB	10012
	GLOBAL	_mpTimer
[SECTION .data]
	ALIGNB	4
_mpTimer:
	RESB	4
	GLOBAL	_mpTr
[SECTION .data]
	ALIGNB	4
_mpTr:
	RESB	4
