[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_io_in8
	EXTERN	_io_out8
	EXTERN	_io_load_eflags
	EXTERN	_io_cli
	EXTERN	_io_store_eflags
	EXTERN	_io_hlt
	EXTERN	_loadTr
	EXTERN	_farJmp
	EXTERN	_loadGdtr
	EXTERN	_loadIdtr
	EXTERN	_asm_interruptHandler20
	EXTERN	_asm_interruptHandler21
	EXTERN	_asm_interruptHandler27
	EXTERN	_asm_interruptHandler2c
	EXTERN	_font
	EXTERN	_memtest_sub
	EXTERN	_loadCr0
	EXTERN	_storeCr0
	EXTERN	_io_sti
	EXTERN	_sprintf
[FILE "bootpack.c"]
[SECTION .text]
	GLOBAL	_QueueInit
_QueueInit:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	MOV	EDX,DWORD [16+EBP]
	MOV	ECX,DWORD [12+EBP]
	MOV	DWORD [EAX],EDX
	MOV	DWORD [12+EAX],ECX
	MOV	EDX,DWORD [20+EBP]
	MOV	DWORD [16+EAX],ECX
	MOV	DWORD [20+EAX],0
	MOV	DWORD [8+EAX],0
	MOV	DWORD [4+EAX],0
	MOV	DWORD [24+EAX],EDX
	POP	EBP
	RET
	GLOBAL	_QueuePush
_QueuePush:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	CMP	DWORD [16+EBX],0
	JNE	L3
	OR	DWORD [20+EBX],1
	OR	EAX,-1
L2:
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
L3:
	MOV	ECX,DWORD [4+EBX]
	MOV	EDX,DWORD [EBX]
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [EDX+ECX*4],EAX
	MOV	EAX,DWORD [4+EBX]
	DEC	DWORD [16+EBX]
	INC	EAX
	CDQ
	IDIV	DWORD [12+EBX]
	MOV	EAX,DWORD [24+EBX]
	MOV	DWORD [4+EBX],EDX
	TEST	EAX,EAX
	JE	L4
	CMP	DWORD [4+EAX],2
	JE	L4
	PUSH	0
	PUSH	-1
	PUSH	EAX
	CALL	_processRun
	ADD	ESP,12
L4:
	XOR	EAX,EAX
	JMP	L2
	GLOBAL	_QueuePop
_QueuePop:
	PUSH	EBP
	OR	EAX,-1
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	ESI,DWORD [8+EBP]
	PUSH	EBX
	MOV	EDI,DWORD [16+ESI]
	MOV	EBX,DWORD [12+ESI]
	CMP	EDI,EBX
	JE	L6
	MOV	EAX,DWORD [8+ESI]
	MOV	EDX,DWORD [ESI]
	MOV	ECX,DWORD [EDX+EAX*4]
	INC	EAX
	CDQ
	IDIV	EBX
	LEA	EAX,DWORD [1+EDI]
	MOV	DWORD [8+ESI],EDX
	MOV	DWORD [16+ESI],EAX
	MOV	EAX,ECX
L6:
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_QueueSize
_QueueSize:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EDX,DWORD [8+EBP]
	POP	EBP
	MOV	EAX,DWORD [12+EDX]
	SUB	EAX,DWORD [16+EDX]
	RET
[SECTION .data]
_keyboardTable0:
	DB	0
	DB	0
	DB	49
	DB	50
	DB	51
	DB	52
	DB	53
	DB	54
	DB	55
	DB	56
	DB	57
	DB	48
	DB	45
	DB	61
	DB	0
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	91
	DB	93
	DB	0
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	59
	DB	39
	DB	96
	DB	0
	DB	92
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	44
	DB	46
	DB	47
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
_keyboardTable1:
	DB	0
	DB	0
	DB	33
	DB	64
	DB	35
	DB	36
	DB	37
	DB	94
	DB	38
	DB	42
	DB	40
	DB	41
	DB	95
	DB	43
	DB	0
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	123
	DB	125
	DB	0
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	58
	DB	34
	DB	126
	DB	0
	DB	124
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	60
	DB	62
	DB	63
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
[SECTION .text]
	GLOBAL	_waitKeyboardControllerReady
_waitKeyboardControllerReady:
	PUSH	EBP
	MOV	EBP,ESP
L10:
	PUSH	100
	CALL	_io_in8
	POP	EDX
	AND	EAX,2
	JNE	L10
	LEAVE
	RET
	GLOBAL	_initKeyboard
_initKeyboard:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [_keybuf],EAX
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [_keyData0],EAX
	CALL	_waitKeyboardControllerReady
	PUSH	96
	PUSH	100
	CALL	_io_out8
	CALL	_waitKeyboardControllerReady
	POP	ECX
	POP	EAX
	MOV	DWORD [12+EBP],71
	MOV	DWORD [8+EBP],96
	LEAVE
	JMP	_io_out8
	GLOBAL	_enableMouse
_enableMouse:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [_mousebuf],EAX
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [_mouseData0],EAX
	CALL	_waitKeyboardControllerReady
	PUSH	212
	PUSH	100
	CALL	_io_out8
	CALL	_waitKeyboardControllerReady
	PUSH	244
	PUSH	96
	CALL	_io_out8
	MOV	EAX,DWORD [16+EBP]
	MOV	BYTE [3+EAX],0
	LEAVE
	RET
	GLOBAL	_mouseDecode
_mouseDecode:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	EDX,DWORD [8+EBP]
	MOV	ECX,DWORD [12+EBP]
	MOV	ESI,ECX
	MOV	AL,BYTE [3+EDX]
	TEST	AL,AL
	JNE	L17
	CMP	CL,-6
	JE	L26
L25:
	XOR	EAX,EAX
L16:
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L26:
	MOV	BYTE [3+EDX],1
	JMP	L25
L17:
	CMP	AL,1
	JE	L27
	CMP	AL,2
	JE	L28
	CMP	AL,3
	JE	L29
	OR	EAX,-1
	JMP	L16
L29:
	MOV	BL,BYTE [EDX]
	AND	ESI,255
	MOV	EAX,EBX
	MOV	BYTE [2+EDX],CL
	AND	EAX,7
	MOV	DWORD [8+EDX],ESI
	MOV	DWORD [12+EDX],EAX
	MOV	AL,BL
	MOVZX	ECX,BYTE [1+EDX]
	AND	EAX,16
	MOV	DWORD [4+EDX],ECX
	MOV	BYTE [3+EDX],1
	TEST	AL,AL
	JE	L23
	OR	ECX,-256
	MOV	DWORD [4+EDX],ECX
L23:
	AND	EBX,32
	TEST	BL,BL
	JE	L24
	OR	DWORD [8+EDX],-256
L24:
	NEG	DWORD [8+EDX]
	MOV	EAX,1
	JMP	L16
L28:
	MOV	BYTE [1+EDX],CL
	MOV	BYTE [3+EDX],3
	JMP	L25
L27:
	AND	ESI,-56
	MOV	EAX,ESI
	CMP	AL,8
	JNE	L25
	MOV	BYTE [EDX],CL
	MOV	BYTE [3+EDX],2
	JMP	L25
	GLOBAL	_initPit
_initPit:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	52
	PUSH	67
	CALL	_io_out8
	PUSH	156
	PUSH	64
	CALL	_io_out8
	PUSH	46
	PUSH	64
	CALL	_io_out8
	MOV	EDX,_timerctl+10000
	MOV	DWORD [_timerctl],0
	ADD	ESP,24
	MOV	EAX,_timerctl+20
L35:
	MOV	DWORD [EAX],0
	ADD	EAX,20
	CMP	EAX,EDX
	JLE	L35
	CALL	_timerAlloc
	MOV	DWORD [4+EAX],-1
	MOV	DWORD [8+EAX],2
	MOV	DWORD [EAX],0
	MOV	DWORD [_timerctl+8],EAX
	MOV	DWORD [_timerctl+4],-1
	LEAVE
	RET
	GLOBAL	_timerAlloc
_timerAlloc:
	PUSH	EBP
	XOR	EDX,EDX
	MOV	EBP,ESP
	MOV	EAX,_timerctl+12
L44:
	CMP	DWORD [8+EAX],0
	JE	L47
	INC	EDX
	ADD	EAX,20
	CMP	EDX,499
	JLE	L44
	XOR	EAX,EAX
L38:
	POP	EBP
	RET
L47:
	MOV	DWORD [8+EAX],1
	JMP	L38
	GLOBAL	_timerFree
_timerFree:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [8+EAX],0
	POP	EBP
	RET
	GLOBAL	_timerInit
_timerInit:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	MOV	EDX,DWORD [12+EBP]
	MOV	DWORD [12+EAX],EDX
	MOV	EDX,DWORD [16+EBP]
	MOV	BYTE [16+EAX],DL
	POP	EBP
	RET
	GLOBAL	_timerSetTime
_timerSetTime:
	PUSH	EBP
	MOV	EAX,DWORD [_timerctl]
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	ADD	EAX,DWORD [12+EBP]
	MOV	DWORD [8+EBX],2
	MOV	DWORD [4+EBX],EAX
	CALL	_io_load_eflags
	MOV	ESI,EAX
	CALL	_io_cli
	MOV	EAX,DWORD [_timerctl+8]
	MOV	EDX,DWORD [4+EBX]
	CMP	EDX,DWORD [4+EAX]
	JBE	L57
L52:
	MOV	ECX,EAX
	MOV	EAX,DWORD [EAX]
	TEST	EAX,EAX
	JE	L53
	CMP	EDX,DWORD [4+EAX]
	JA	L52
	MOV	DWORD [ECX],EBX
	MOV	DWORD [EBX],EAX
L53:
	MOV	DWORD [8+EBP],ESI
	POP	EBX
	POP	ESI
	POP	EBP
	JMP	_io_store_eflags
L57:
	MOV	DWORD [_timerctl+8],EBX
	MOV	DWORD [_timerctl+4],EDX
	MOV	DWORD [EBX],EAX
	JMP	L53
	GLOBAL	_processIdle
_processIdle:
	PUSH	EBP
	MOV	EBP,ESP
L59:
	CALL	_io_hlt
	JMP	L59
	GLOBAL	_processNow
_processNow:
	MOV	EAX,DWORD [_processctl]
	PUSH	EBP
	MOV	EBP,ESP
	POP	EBP
	MOV	EDX,DWORD [EAX]
	IMUL	EDX,EDX,408
	LEA	EAX,DWORD [8+EDX+EAX*1]
	MOV	EDX,DWORD [4+EAX]
	MOV	EAX,DWORD [8+EAX+EDX*4]
	RET
	GLOBAL	_processAdd
_processAdd:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	ECX,DWORD [8+EBP]
	MOV	EDX,DWORD [8+ECX]
	IMUL	EDX,EDX,408
	ADD	EDX,DWORD [_processctl]
	MOV	EAX,DWORD [8+EDX]
	MOV	DWORD [16+EDX+EAX*4],ECX
	INC	EAX
	MOV	DWORD [8+EDX],EAX
	MOV	DWORD [4+ECX],2
	POP	EBP
	RET
	GLOBAL	_processRemove
_processRemove:
	PUSH	EBP
	XOR	ECX,ECX
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	MOV	EAX,DWORD [8+EBX]
	IMUL	EAX,EAX,408
	ADD	EAX,DWORD [_processctl]
	LEA	EDX,DWORD [8+EAX]
	CMP	ECX,DWORD [8+EAX]
	JGE	L66
L70:
	CMP	DWORD [8+EDX+ECX*4],EBX
	JE	L66
	INC	ECX
	CMP	ECX,DWORD [EDX]
	JL	L70
L66:
	MOV	EAX,DWORD [4+EDX]
	DEC	DWORD [EDX]
	CMP	ECX,EAX
	JGE	L71
	DEC	EAX
	MOV	DWORD [4+EDX],EAX
L71:
	MOV	EAX,DWORD [EDX]
	CMP	DWORD [4+EDX],EAX
	JL	L72
	MOV	DWORD [4+EDX],0
L72:
	MOV	DWORD [4+EBX],1
	MOV	EBX,DWORD [EDX]
	CMP	ECX,EBX
	JGE	L80
L77:
	MOV	EAX,DWORD [12+EDX+ECX*4]
	MOV	DWORD [8+EDX+ECX*4],EAX
	INC	ECX
	CMP	ECX,EBX
	JL	L77
L80:
	POP	EBX
	POP	EBP
	RET
	GLOBAL	_processSwitchSub
_processSwitchSub:
	PUSH	EBP
	XOR	ECX,ECX
	MOV	EBP,ESP
	MOV	EAX,DWORD [_processctl]
	XOR	EDX,EDX
L87:
	CMP	DWORD [8+EAX+EDX*1],0
	JG	L83
	INC	ECX
	ADD	EDX,408
	CMP	ECX,9
	JLE	L87
L83:
	MOV	DWORD [EAX],ECX
	MOV	BYTE [4+EAX],0
	POP	EBP
	RET
	GLOBAL	_processInit
_processInit:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	EDI,EDI
	PUSH	EBX
	XOR	ESI,ESI
	PUSH	152088
	MOV	EBX,999
	PUSH	DWORD [8+EBP]
	CALL	_memsegAlloc4K
	MOV	DWORD [_processctl],EAX
	POP	EAX
	POP	EDX
L94:
	MOV	EAX,EDI
	LEA	EDX,DWORD [24+ESI]
	ADD	EAX,DWORD [_processctl]
	ADD	EDI,148
	MOV	DWORD [4092+EAX],0
	MOV	DWORD [4088+EAX],EDX
	ADD	EAX,4132
	PUSH	137
	PUSH	EAX
	LEA	EAX,DWORD [2555928+ESI]
	PUSH	103
	ADD	ESI,8
	PUSH	EAX
	CALL	_setSegmdesc
	ADD	ESP,16
	DEC	EBX
	JNS	L94
	MOV	ECX,DWORD [_processctl]
	XOR	EDX,EDX
	MOV	EBX,9
L99:
	LEA	EAX,DWORD [ECX+EDX*1]
	ADD	EDX,408
	DEC	EBX
	MOV	DWORD [8+EAX],0
	MOV	DWORD [12+EAX],0
	JNS	L99
	CALL	_processAlloc
	MOV	ESI,EAX
	MOV	DWORD [4+EAX],2
	MOV	DWORD [12+EAX],2
	MOV	DWORD [8+EAX],0
	PUSH	EAX
	CALL	_processAdd
	CALL	_processSwitchSub
	PUSH	DWORD [ESI]
	CALL	_loadTr
	CALL	_timerAlloc
	PUSH	2
	MOV	DWORD [_mpTimer],EAX
	PUSH	EAX
	CALL	_timerSetTime
	CALL	_processAlloc
	PUSH	65536
	PUSH	DWORD [8+EBP]
	MOV	EBX,EAX
	CALL	_memsegAlloc4K
	ADD	EAX,65536
	MOV	DWORD [100+EBX],EAX
	MOV	DWORD [76+EBX],_processIdle
	MOV	DWORD [116+EBX],8
	MOV	DWORD [120+EBX],16
	MOV	DWORD [124+EBX],8
	MOV	DWORD [128+EBX],8
	MOV	DWORD [132+EBX],8
	MOV	DWORD [136+EBX],8
	PUSH	1
	PUSH	9
	PUSH	EBX
	CALL	_processRun
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	MOV	EAX,ESI
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_processAlloc
_processAlloc:
	PUSH	EBP
	XOR	ECX,ECX
	MOV	EBP,ESP
	XOR	EDX,EDX
L110:
	MOV	EAX,EDX
	ADD	EAX,DWORD [_processctl]
	CMP	DWORD [4092+EAX],0
	JE	L113
	INC	ECX
	ADD	EDX,148
	CMP	ECX,999
	JLE	L110
	XOR	EAX,EAX
L104:
	POP	EBP
	RET
L113:
	ADD	EAX,4088
	MOV	DWORD [4+EAX],1
	MOV	DWORD [80+EAX],514
	MOV	DWORD [84+EAX],0
	MOV	DWORD [88+EAX],0
	MOV	DWORD [92+EAX],0
	MOV	DWORD [96+EAX],0
	MOV	DWORD [104+EAX],0
	MOV	DWORD [108+EAX],0
	MOV	DWORD [112+EAX],0
	MOV	DWORD [116+EAX],0
	MOV	DWORD [128+EAX],0
	MOV	DWORD [132+EAX],0
	MOV	DWORD [136+EAX],0
	MOV	DWORD [140+EAX],0
	MOV	DWORD [144+EAX],1073741824
	JMP	L104
	GLOBAL	_processRun
_processRun:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	ESI,DWORD [12+EBP]
	MOV	EAX,DWORD [16+EBP]
	MOV	EBX,DWORD [8+EBP]
	TEST	ESI,ESI
	JS	L119
L115:
	TEST	EAX,EAX
	JLE	L116
	MOV	DWORD [12+EBX],EAX
L116:
	CMP	DWORD [4+EBX],2
	JE	L120
L117:
	CMP	DWORD [4+EBX],2
	JE	L118
	MOV	DWORD [8+EBX],ESI
	PUSH	EBX
	CALL	_processAdd
	POP	ECX
L118:
	MOV	EAX,DWORD [_processctl]
	MOV	BYTE [4+EAX],1
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L120:
	CMP	DWORD [8+EBX],ESI
	JE	L117
	PUSH	EBX
	CALL	_processRemove
	POP	EAX
	JMP	L117
L119:
	MOV	ESI,DWORD [8+EBX]
	JMP	L115
	GLOBAL	_processSwitch
_processSwitch:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	EBX,DWORD [_processctl]
	MOV	EDX,DWORD [EBX]
	IMUL	EDX,EDX,408
	LEA	EDX,DWORD [EDX+EBX*1]
	LEA	ECX,DWORD [8+EDX]
	MOV	EAX,DWORD [4+ECX]
	MOV	ESI,DWORD [8+ECX+EAX*4]
	INC	EAX
	MOV	DWORD [4+ECX],EAX
	CMP	EAX,DWORD [8+EDX]
	JE	L125
L122:
	CMP	BYTE [4+EBX],0
	JNE	L126
L123:
	MOV	EAX,DWORD [4+ECX]
	MOV	EBX,DWORD [8+ECX+EAX*4]
	PUSH	DWORD [12+EBX]
	PUSH	DWORD [_mpTimer]
	CALL	_timerSetTime
	CMP	EBX,ESI
	POP	ECX
	POP	EAX
	JE	L121
	PUSH	DWORD [EBX]
	PUSH	0
	CALL	_farJmp
	POP	EAX
	POP	EDX
L121:
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L126:
	CALL	_processSwitchSub
	MOV	EDX,DWORD [_processctl]
	MOV	EAX,DWORD [EDX]
	IMUL	EAX,EAX,408
	LEA	ECX,DWORD [8+EAX+EDX*1]
	JMP	L123
L125:
	MOV	DWORD [4+ECX],0
	JMP	L122
	GLOBAL	_processSleep
_processSleep:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	ESI,DWORD [8+EBP]
	CMP	DWORD [4+ESI],2
	JE	L130
L127:
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L130:
	CALL	_processNow
	PUSH	ESI
	MOV	EBX,EAX
	CALL	_processRemove
	POP	ECX
	CMP	ESI,EBX
	JNE	L127
	CALL	_processSwitchSub
	CALL	_processNow
	PUSH	DWORD [EAX]
	PUSH	0
	CALL	_farJmp
	POP	EAX
	POP	EDX
	JMP	L127
	GLOBAL	_init_pic
_init_pic:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	255
	PUSH	33
	CALL	_io_out8
	PUSH	255
	PUSH	161
	CALL	_io_out8
	PUSH	17
	PUSH	32
	CALL	_io_out8
	PUSH	32
	PUSH	33
	CALL	_io_out8
	ADD	ESP,32
	PUSH	4
	PUSH	33
	CALL	_io_out8
	PUSH	1
	PUSH	33
	CALL	_io_out8
	PUSH	17
	PUSH	160
	CALL	_io_out8
	PUSH	40
	PUSH	161
	CALL	_io_out8
	ADD	ESP,32
	PUSH	2
	PUSH	161
	CALL	_io_out8
	PUSH	1
	PUSH	161
	CALL	_io_out8
	PUSH	251
	PUSH	33
	CALL	_io_out8
	PUSH	255
	PUSH	161
	CALL	_io_out8
	LEAVE
	RET
	GLOBAL	_interruptHandler21
_interruptHandler21:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	97
	PUSH	32
	CALL	_io_out8
	PUSH	96
	CALL	_io_in8
	ADD	EAX,DWORD [_keyData0]
	PUSH	EAX
	PUSH	DWORD [_keybuf]
	CALL	_QueuePush
	LEAVE
	RET
	GLOBAL	_interruptHandler27
_interruptHandler27:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	103
	PUSH	32
	CALL	_io_out8
	LEAVE
	RET
	GLOBAL	_interruptHandler2c
_interruptHandler2c:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	100
	PUSH	160
	CALL	_io_out8
	PUSH	98
	PUSH	32
	CALL	_io_out8
	PUSH	96
	CALL	_io_in8
	ADD	EAX,DWORD [_mouseData0]
	PUSH	EAX
	PUSH	DWORD [_mousebuf]
	CALL	_QueuePush
	LEAVE
	RET
	GLOBAL	_interruptHandler20
_interruptHandler20:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	XOR	ESI,ESI
	PUSH	96
	PUSH	32
	CALL	_io_out8
	MOV	EAX,DWORD [_timerctl]
	INC	EAX
	MOV	DWORD [_timerctl],EAX
	CMP	DWORD [_timerctl+4],EAX
	POP	ECX
	POP	EBX
	JA	L135
	MOV	EBX,DWORD [_timerctl+8]
L137:
	MOV	EAX,DWORD [4+EBX]
	CMP	EAX,DWORD [_timerctl]
	JA	L138
	MOV	DWORD [8+EBX],1
	CMP	EBX,DWORD [_mpTimer]
	JE	L141
	MOVZX	EAX,BYTE [16+EBX]
	PUSH	EAX
	PUSH	DWORD [12+EBX]
	CALL	_QueuePush
	POP	EAX
	POP	EDX
L142:
	MOV	EBX,DWORD [EBX]
	JMP	L137
L141:
	MOV	ESI,1
	JMP	L142
L138:
	MOV	DWORD [_timerctl+4],EAX
	MOV	DWORD [_timerctl+8],EBX
	MOV	EAX,ESI
	TEST	AL,AL
	JNE	L144
L135:
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L144:
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	JMP	_processSwitch
	GLOBAL	_setSegmdesc
_setSegmdesc:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EDX,DWORD [12+EBP]
	MOV	ECX,DWORD [16+EBP]
	MOV	EBX,DWORD [8+EBP]
	MOV	EAX,DWORD [20+EBP]
	CMP	EDX,1048575
	JBE	L146
	SHR	EDX,12
	OR	EAX,32768
L146:
	MOV	WORD [EBX],DX
	MOV	BYTE [5+EBX],AL
	SHR	EDX,16
	SAR	EAX,8
	AND	EDX,15
	MOV	WORD [2+EBX],CX
	AND	EAX,-16
	SAR	ECX,16
	OR	EDX,EAX
	MOV	BYTE [4+EBX],CL
	MOV	BYTE [6+EBX],DL
	SAR	ECX,8
	MOV	BYTE [7+EBX],CL
	POP	EBX
	POP	EBP
	RET
	GLOBAL	_setGatedesc
_setGatedesc:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EDX,DWORD [8+EBP]
	MOV	EAX,DWORD [16+EBP]
	MOV	EBX,DWORD [20+EBP]
	MOV	ECX,DWORD [12+EBP]
	MOV	WORD [2+EDX],AX
	MOV	BYTE [5+EDX],BL
	MOV	WORD [EDX],CX
	MOV	EAX,EBX
	SAR	EAX,8
	SAR	ECX,16
	MOV	BYTE [4+EDX],AL
	MOV	WORD [6+EDX],CX
	POP	EBX
	POP	EBP
	RET
	GLOBAL	_initGdtit
_initGdtit:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	ESI,2555904
	MOV	EBX,8191
L153:
	PUSH	0
	PUSH	0
	PUSH	0
	PUSH	ESI
	ADD	ESI,8
	CALL	_setSegmdesc
	ADD	ESP,16
	DEC	EBX
	JNS	L153
	PUSH	16530
	MOV	EBX,255
	PUSH	0
	PUSH	-1
	PUSH	2555912
	CALL	_setSegmdesc
	PUSH	16538
	PUSH	2621440
	PUSH	524287
	PUSH	2555920
	CALL	_setSegmdesc
	ADD	ESP,32
	PUSH	2555904
	PUSH	65535
	CALL	_loadGdtr
	POP	ESI
	POP	EAX
	MOV	ESI,2553856
L158:
	PUSH	0
	PUSH	0
	PUSH	0
	PUSH	ESI
	ADD	ESI,8
	CALL	_setGatedesc
	ADD	ESP,16
	DEC	EBX
	JNS	L158
	PUSH	2553856
	PUSH	2047
	CALL	_loadIdtr
	PUSH	142
	PUSH	16
	PUSH	_asm_interruptHandler20
	PUSH	2554112
	CALL	_setGatedesc
	PUSH	142
	PUSH	16
	PUSH	_asm_interruptHandler21
	PUSH	2554120
	CALL	_setGatedesc
	ADD	ESP,40
	PUSH	142
	PUSH	16
	PUSH	_asm_interruptHandler27
	PUSH	2554168
	CALL	_setGatedesc
	PUSH	142
	PUSH	16
	PUSH	_asm_interruptHandler2c
	PUSH	2554208
	CALL	_setGatedesc
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
	GLOBAL	_set_palette
_set_palette:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	ECX
	MOV	EBX,DWORD [8+EBP]
	MOV	EDI,DWORD [12+EBP]
	MOV	ESI,DWORD [16+EBP]
	CALL	_io_load_eflags
	MOV	DWORD [-16+EBP],EAX
	CALL	_io_cli
	PUSH	EBX
	PUSH	968
	CALL	_io_out8
	CMP	EBX,EDI
	POP	EAX
	POP	EDX
	JGE	L170
	SUB	EDI,EBX
	MOV	EBX,EDI
L168:
	MOV	AL,BYTE [ESI]
	SHR	AL,2
	MOVZX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	MOV	AL,BYTE [1+ESI]
	SHR	AL,2
	MOVZX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	MOV	AL,BYTE [2+ESI]
	SHR	AL,2
	ADD	ESI,3
	MOVZX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	ADD	ESP,24
	DEC	EBX
	JNE	L168
L170:
	MOV	EAX,DWORD [-16+EBP]
	MOV	DWORD [8+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_io_store_eflags
[SECTION .data]
_table_rgb.0:
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	-1
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-58
	DB	-58
	DB	-58
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	-124
	DB	-124
	DB	-124
[SECTION .text]
	GLOBAL	_init_palette
_init_palette:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	_table_rgb.0
	PUSH	15
	PUSH	0
	CALL	_set_palette
	LEAVE
	RET
	GLOBAL	_boxFill8
_boxFill8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EDI
	PUSH	EDI
	MOV	AL,BYTE [16+EBP]
	MOV	ECX,DWORD [24+EBP]
	MOV	EDI,DWORD [28+EBP]
	MOV	BYTE [-13+EBP],AL
	CMP	ECX,DWORD [32+EBP]
	JG	L184
	MOV	EBX,DWORD [12+EBP]
	IMUL	EBX,ECX
L182:
	MOV	EDX,DWORD [20+EBP]
	CMP	EDX,EDI
	JG	L186
	MOV	ESI,DWORD [8+EBP]
	ADD	ESI,EBX
	ADD	ESI,EDX
	MOV	DWORD [-20+EBP],ESI
L181:
	MOV	ESI,DWORD [-20+EBP]
	MOV	AL,BYTE [-13+EBP]
	INC	EDX
	MOV	BYTE [ESI],AL
	INC	ESI
	MOV	DWORD [-20+EBP],ESI
	CMP	EDX,EDI
	JLE	L181
L186:
	INC	ECX
	ADD	EBX,DWORD [12+EBP]
	CMP	ECX,DWORD [32+EBP]
	JLE	L182
L184:
	POP	EBX
	POP	ESI
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_init_GUI
_init_GUI:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,12
	MOV	EAX,DWORD [16+EBP]
	MOV	EDI,DWORD [12+EBP]
	SUB	EAX,29
	DEC	EDI
	PUSH	EAX
	PUSH	EDI
	PUSH	0
	PUSH	0
	PUSH	14
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,28
	PUSH	EAX
	PUSH	EDI
	PUSH	EAX
	PUSH	0
	PUSH	8
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EAX,DWORD [16+EBP]
	ADD	ESP,56
	SUB	EAX,27
	PUSH	EAX
	PUSH	EDI
	PUSH	EAX
	PUSH	0
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EAX,DWORD [16+EBP]
	DEC	EAX
	PUSH	EAX
	MOV	EAX,DWORD [16+EBP]
	PUSH	EDI
	SUB	EAX,26
	PUSH	EAX
	PUSH	0
	PUSH	8
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	ESI,DWORD [16+EBP]
	ADD	ESP,56
	SUB	ESI,24
	PUSH	ESI
	PUSH	59
	PUSH	ESI
	PUSH	3
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,4
	PUSH	EAX
	MOV	DWORD [-16+EBP],EAX
	PUSH	2
	PUSH	ESI
	PUSH	2
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	ADD	ESP,56
	PUSH	DWORD [-16+EBP]
	PUSH	59
	PUSH	DWORD [-16+EBP]
	PUSH	3
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,5
	PUSH	EAX
	MOV	EAX,DWORD [16+EBP]
	PUSH	59
	SUB	EAX,23
	PUSH	EAX
	MOV	DWORD [-20+EBP],EAX
	PUSH	59
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EAX,DWORD [16+EBP]
	ADD	ESP,56
	SUB	EAX,3
	MOV	DWORD [-24+EBP],EAX
	PUSH	EAX
	PUSH	59
	PUSH	EAX
	PUSH	2
	PUSH	0
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	PUSH	DWORD [-24+EBP]
	PUSH	60
	PUSH	ESI
	PUSH	60
	PUSH	0
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EDI,DWORD [12+EBP]
	ADD	ESP,56
	MOV	EBX,DWORD [12+EBP]
	SUB	EBX,4
	SUB	EDI,47
	PUSH	ESI
	PUSH	EBX
	PUSH	ESI
	PUSH	EDI
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	PUSH	DWORD [-16+EBP]
	PUSH	EDI
	PUSH	DWORD [-20+EBP]
	PUSH	EDI
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	ADD	ESP,56
	PUSH	DWORD [-24+EBP]
	PUSH	EBX
	PUSH	DWORD [-24+EBP]
	PUSH	EDI
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	MOV	EAX,DWORD [12+EBP]
	PUSH	DWORD [-24+EBP]
	SUB	EAX,3
	PUSH	EAX
	PUSH	ESI
	PUSH	EAX
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_putFont8
_putFont8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	ESI,ESI
	PUSH	EBX
	MOV	EDI,DWORD [28+EBP]
	MOV	BL,BYTE [24+EBP]
L201:
	MOV	EAX,DWORD [20+EBP]
	MOV	EDX,DWORD [16+EBP]
	ADD	EAX,ESI
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [8+EBP]
	LEA	ECX,DWORD [EDX+EAX*1]
	MOV	DL,BYTE [ESI+EDI*1]
	TEST	DL,DL
	JNS	L193
	MOV	BYTE [ECX],BL
L193:
	MOV	AL,DL
	AND	EAX,64
	TEST	AL,AL
	JE	L194
	MOV	BYTE [1+ECX],BL
L194:
	MOV	AL,DL
	AND	EAX,32
	TEST	AL,AL
	JE	L195
	MOV	BYTE [2+ECX],BL
L195:
	MOV	AL,DL
	AND	EAX,16
	TEST	AL,AL
	JE	L196
	MOV	BYTE [3+ECX],BL
L196:
	MOV	AL,DL
	AND	EAX,8
	TEST	AL,AL
	JE	L197
	MOV	BYTE [4+ECX],BL
L197:
	MOV	AL,DL
	AND	EAX,4
	TEST	AL,AL
	JE	L198
	MOV	BYTE [5+ECX],BL
L198:
	MOV	AL,DL
	AND	EAX,2
	TEST	AL,AL
	JE	L199
	MOV	BYTE [6+ECX],BL
L199:
	AND	EDX,1
	TEST	DL,DL
	JE	L191
	MOV	BYTE [7+ECX],BL
L191:
	INC	ESI
	CMP	ESI,15
	JLE	L201
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_putFont8_asc
_putFont8_asc:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EAX
	MOV	EBX,DWORD [28+EBP]
	MOV	AL,BYTE [24+EBP]
	MOV	BYTE [-13+EBP],AL
	MOV	ESI,DWORD [16+EBP]
	MOV	EDI,DWORD [20+EBP]
	CMP	BYTE [EBX],0
	JNE	L209
L211:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L209:
	MOVZX	EAX,BYTE [EBX]
	SAL	EAX,4
	INC	EBX
	ADD	EAX,_font
	PUSH	EAX
	MOVSX	EAX,BYTE [-13+EBP]
	PUSH	EAX
	PUSH	EDI
	PUSH	ESI
	ADD	ESI,8
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_putFont8
	ADD	ESP,24
	CMP	BYTE [EBX],0
	JNE	L209
	JMP	L211
	GLOBAL	_putFont8AscSheet
_putFont8AscSheet:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,12
	MOV	EAX,DWORD [8+EBP]
	MOV	EDI,DWORD [16+EBP]
	MOV	DWORD [-16+EBP],EAX
	MOV	EBX,DWORD [20+EBP]
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [-20+EBP],EAX
	MOV	EAX,DWORD [28+EBP]
	MOV	DWORD [-24+EBP],EAX
	LEA	EAX,DWORD [15+EDI]
	PUSH	EAX
	MOV	EAX,DWORD [-20+EBP]
	MOV	ESI,DWORD [32+EBP]
	MOVSX	EBX,BL
	LEA	ESI,DWORD [EAX+ESI*8]
	LEA	EAX,DWORD [-1+ESI]
	PUSH	EAX
	PUSH	EDI
	PUSH	DWORD [-20+EBP]
	MOVZX	EAX,BYTE [24+EBP]
	PUSH	EAX
	MOV	EAX,DWORD [-16+EBP]
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	PUSH	DWORD [-24+EBP]
	PUSH	EBX
	PUSH	EDI
	PUSH	DWORD [-20+EBP]
	MOV	EAX,DWORD [-16+EBP]
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_putFont8_asc
	MOV	DWORD [16+EBP],EDI
	LEA	EAX,DWORD [16+EDI]
	MOV	DWORD [20+EBP],ESI
	MOV	DWORD [24+EBP],EAX
	ADD	ESP,52
	MOV	EAX,DWORD [-20+EBP]
	MOV	DWORD [12+EBP],EAX
	MOV	EAX,DWORD [-16+EBP]
	MOV	DWORD [8+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_sheetRefresh
[SECTION .data]
_cursor.1:
	DB	"*..............."
	DB	"**.............."
	DB	"*O*............."
	DB	"*OO*............"
	DB	"*OOO*..........."
	DB	"*OOOO*.........."
	DB	"*OOOOO*........."
	DB	"*OOOOOO*........"
	DB	"*OOOOOOO*......."
	DB	"*OOOO*****......"
	DB	"*OO*O*.........."
	DB	"*O*.*O*........."
	DB	"**..*O*........."
	DB	"*....*O*........"
	DB	".....*O*........"
	DB	"......*........."
[SECTION .text]
	GLOBAL	_initMouseCursor8
_initMouseCursor8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	EDI,EDI
	PUSH	EBX
	XOR	EBX,EBX
	PUSH	EAX
	MOV	AL,BYTE [12+EBP]
	MOV	ESI,DWORD [8+EBP]
	MOV	BYTE [-13+EBP],AL
L226:
	XOR	EDX,EDX
L225:
	LEA	EAX,DWORD [EDX+EDI*1]
	CMP	BYTE [_cursor.1+EAX],42
	JE	L231
L222:
	CMP	BYTE [_cursor.1+EAX],79
	JE	L232
L223:
	CMP	BYTE [_cursor.1+EAX],46
	JE	L233
L220:
	INC	EDX
	CMP	EDX,15
	JLE	L225
	INC	EBX
	ADD	EDI,16
	CMP	EBX,15
	JLE	L226
	POP	EAX
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L233:
	MOV	CL,BYTE [-13+EBP]
	MOV	BYTE [EAX+ESI*1],CL
	JMP	L220
L232:
	MOV	BYTE [EAX+ESI*1],7
	JMP	L223
L231:
	MOV	BYTE [EAX+ESI*1],0
	JMP	L222
	GLOBAL	_putblock8_8
_putblock8_8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	ESI,ESI
	PUSH	EBX
	SUB	ESP,12
	CMP	ESI,DWORD [20+EBP]
	JGE	L246
	XOR	EDI,EDI
L244:
	XOR	EBX,EBX
	CMP	EBX,DWORD [16+EBP]
	JGE	L248
	MOV	EAX,DWORD [32+EBP]
	ADD	EAX,EDI
	MOV	DWORD [-20+EBP],EAX
L243:
	MOV	EAX,DWORD [28+EBP]
	MOV	EDX,DWORD [24+EBP]
	ADD	EAX,ESI
	ADD	EDX,EBX
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDX
	MOV	ECX,DWORD [8+EBP]
	MOV	EDX,DWORD [-20+EBP]
	INC	EBX
	MOV	DL,BYTE [EDX]
	MOV	BYTE [EAX+ECX*1],DL
	INC	DWORD [-20+EBP]
	CMP	EBX,DWORD [16+EBP]
	JL	L243
L248:
	INC	ESI
	ADD	EDI,DWORD [36+EBP]
	CMP	ESI,DWORD [20+EBP]
	JL	L244
L246:
	ADD	ESP,12
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_memtest
_memtest:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	XOR	ESI,ESI
	CALL	_io_load_eflags
	OR	EAX,262144
	PUSH	EAX
	CALL	_io_store_eflags
	CALL	_io_load_eflags
	POP	EDX
	TEST	EAX,262144
	JE	L250
	MOV	ESI,1
L250:
	AND	EAX,-262145
	PUSH	EAX
	CALL	_io_store_eflags
	MOV	EAX,ESI
	POP	EBX
	TEST	AL,AL
	JNE	L253
L251:
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_memtest_sub
	MOV	EBX,EAX
	POP	EAX
	MOV	EAX,ESI
	POP	EDX
	TEST	AL,AL
	JNE	L254
L252:
	LEA	ESP,DWORD [-8+EBP]
	MOV	EAX,EBX
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L254:
	CALL	_loadCr0
	AND	EAX,-1610612737
	PUSH	EAX
	CALL	_storeCr0
	POP	EAX
	JMP	L252
L253:
	CALL	_loadCr0
	OR	EAX,1610612736
	PUSH	EAX
	CALL	_storeCr0
	POP	ECX
	JMP	L251
	GLOBAL	_memsegTotal
_memsegTotal:
	PUSH	EBP
	XOR	EAX,EAX
	MOV	EBP,ESP
	XOR	EDX,EDX
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	MOV	ECX,DWORD [EBX]
	CMP	EAX,ECX
	JAE	L262
L260:
	ADD	EAX,DWORD [20+EBX+EDX*8]
	INC	EDX
	CMP	EDX,ECX
	JB	L260
L262:
	POP	EBX
	POP	EBP
	RET
	GLOBAL	_memsegInit
_memsegInit:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [EAX],0
	MOV	DWORD [4+EAX],0
	MOV	DWORD [8+EAX],0
	MOV	DWORD [12+EAX],0
	POP	EBP
	RET
	GLOBAL	_memsegAlloc
_memsegAlloc:
	PUSH	EBP
	XOR	ECX,ECX
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	ESI,DWORD [12+EBP]
	MOV	EBX,DWORD [8+EBP]
	MOV	EAX,DWORD [EBX]
	CMP	ECX,EAX
	JAE	L278
L276:
	MOV	EDX,DWORD [20+EBX+ECX*8]
	CMP	EDX,ESI
	JAE	L280
	INC	ECX
	CMP	ECX,EAX
	JB	L276
L278:
	XOR	EAX,EAX
L264:
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L280:
	MOV	EDI,DWORD [16+EBX+ECX*8]
	LEA	EAX,DWORD [ESI+EDI*1]
	MOV	DWORD [16+EBX+ECX*8],EAX
	MOV	EAX,EDX
	SUB	EAX,ESI
	MOV	DWORD [20+EBX+ECX*8],EAX
	TEST	EAX,EAX
	JNE	L270
	MOV	EAX,DWORD [EBX]
	DEC	EAX
	MOV	DWORD [EBX],EAX
	CMP	ECX,EAX
	JAE	L270
	MOV	ESI,EAX
L275:
	MOV	EAX,DWORD [24+EBX+ECX*8]
	MOV	EDX,DWORD [28+EBX+ECX*8]
	MOV	DWORD [16+EBX+ECX*8],EAX
	MOV	DWORD [20+EBX+ECX*8],EDX
	INC	ECX
	CMP	ECX,ESI
	JB	L275
L270:
	MOV	EAX,EDI
	JMP	L264
	GLOBAL	_memsegFree
_memsegFree:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	ESI,DWORD [8+EBP]
	PUSH	EBX
	XOR	EBX,EBX
	MOV	EDI,DWORD [ESI]
	CMP	EBX,EDI
	JGE	L283
L287:
	MOV	EAX,DWORD [12+EBP]
	CMP	DWORD [16+ESI+EBX*8],EAX
	JA	L283
	INC	EBX
	CMP	EBX,EDI
	JL	L287
L283:
	TEST	EBX,EBX
	JLE	L288
	MOV	EDX,DWORD [12+ESI+EBX*8]
	MOV	EAX,DWORD [8+ESI+EBX*8]
	ADD	EAX,EDX
	CMP	EAX,DWORD [12+EBP]
	JE	L308
L288:
	CMP	EBX,EDI
	JGE	L295
	MOV	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [16+EBP]
	CMP	EAX,DWORD [16+ESI+EBX*8]
	JE	L309
L295:
	CMP	EDI,4089
	JG	L296
	MOV	ECX,EDI
	CMP	EDI,EBX
	JLE	L306
L301:
	MOV	EAX,DWORD [8+ESI+ECX*8]
	MOV	EDX,DWORD [12+ESI+ECX*8]
	MOV	DWORD [16+ESI+ECX*8],EAX
	MOV	DWORD [20+ESI+ECX*8],EDX
	DEC	ECX
	CMP	ECX,EBX
	JG	L301
L306:
	LEA	EAX,DWORD [1+EDI]
	MOV	DWORD [ESI],EAX
	CMP	DWORD [4+ESI],EAX
	JGE	L302
	MOV	DWORD [4+ESI],EAX
L302:
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [16+ESI+EBX*8],EAX
	MOV	EAX,DWORD [16+EBP]
	MOV	DWORD [20+ESI+EBX*8],EAX
L307:
	XOR	EAX,EAX
L281:
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L296:
	MOV	EAX,DWORD [16+EBP]
	INC	DWORD [12+ESI]
	ADD	DWORD [8+ESI],EAX
	OR	EAX,-1
	JMP	L281
L309:
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [16+ESI+EBX*8],EAX
	MOV	EAX,DWORD [16+EBP]
	ADD	DWORD [20+ESI+EBX*8],EAX
	JMP	L307
L308:
	ADD	EDX,DWORD [16+EBP]
	MOV	DWORD [12+ESI+EBX*8],EDX
	CMP	EBX,DWORD [ESI]
	JGE	L307
	MOV	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [16+EBP]
	CMP	EAX,DWORD [16+ESI+EBX*8]
	JNE	L307
	ADD	EDX,DWORD [20+ESI+EBX*8]
	MOV	DWORD [12+ESI+EBX*8],EDX
	MOV	EAX,DWORD [ESI]
	DEC	EAX
	MOV	DWORD [ESI],EAX
	CMP	EBX,EAX
	JGE	L307
	MOV	ECX,EAX
L294:
	MOV	EAX,DWORD [24+ESI+EBX*8]
	MOV	EDX,DWORD [28+ESI+EBX*8]
	MOV	DWORD [16+ESI+EBX*8],EAX
	MOV	DWORD [20+ESI+EBX*8],EDX
	INC	EBX
	CMP	EBX,ECX
	JL	L294
	JMP	L307
	GLOBAL	_memsegAlloc4K
_memsegAlloc4K:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [12+EBP]
	ADD	EAX,4095
	AND	EAX,-4096
	MOV	DWORD [12+EBP],EAX
	POP	EBP
	JMP	_memsegAlloc
	GLOBAL	_memsegFree4K
_memsegFree4K:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [16+EBP]
	ADD	EAX,4095
	AND	EAX,-4096
	MOV	DWORD [16+EBP],EAX
	POP	EBP
	JMP	_memsegFree
	GLOBAL	_shtctlInit
_shtctlInit:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	ESI,DWORD [8+EBP]
	PUSH	10260
	MOV	EDI,DWORD [16+EBP]
	PUSH	ESI
	CALL	_memsegAlloc4K
	POP	ECX
	MOV	EBX,EAX
	POP	EAX
	XOR	EAX,EAX
	TEST	EBX,EBX
	JE	L312
	MOV	EAX,DWORD [20+EBP]
	IMUL	EAX,EDI
	PUSH	EAX
	PUSH	ESI
	CALL	_memsegAlloc4K
	TEST	EAX,EAX
	MOV	DWORD [4+EBX],EAX
	POP	ECX
	POP	EDX
	JE	L323
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [8+EBX],EDI
	MOV	DWORD [EBX],EAX
	LEA	EDX,DWORD [9180+EBX]
	MOV	EAX,DWORD [20+EBP]
	MOV	DWORD [12+EBX],EAX
	MOV	EAX,EBX
	MOV	DWORD [16+EBX],-1
L319:
	MOV	DWORD [1072+EAX],0
	MOV	DWORD [1076+EAX],EBX
	ADD	EAX,36
	CMP	EAX,EDX
	JLE	L319
L322:
	MOV	EAX,EBX
L312:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L323:
	PUSH	10260
	PUSH	EBX
	PUSH	ESI
	CALL	_memsegFree4K
	JMP	L322
	GLOBAL	_sheetAlloc
_sheetAlloc:
	PUSH	EBP
	XOR	EDX,EDX
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	ADD	EAX,1044
L330:
	CMP	DWORD [28+EAX],0
	JE	L333
	INC	EDX
	ADD	EAX,36
	CMP	EDX,255
	JLE	L330
	XOR	EAX,EAX
L324:
	POP	EBP
	RET
L333:
	MOV	DWORD [28+EAX],1
	MOV	DWORD [24+EAX],-1
	JMP	L324
	GLOBAL	_sheetSetbuf
_sheetSetbuf:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EDX,DWORD [8+EBP]
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [EDX],EAX
	MOV	EAX,DWORD [16+EBP]
	MOV	DWORD [4+EDX],EAX
	MOV	EAX,DWORD [20+EBP]
	MOV	DWORD [8+EDX],EAX
	MOV	EAX,DWORD [24+EBP]
	MOV	DWORD [20+EDX],EAX
	POP	EBP
	RET
	GLOBAL	_sheetRefreshMap
_sheetRefreshMap:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,40
	MOV	EAX,DWORD [8+EBP]
	CMP	DWORD [12+EBP],0
	MOV	EAX,DWORD [4+EAX]
	MOV	DWORD [-40+EBP],EAX
	JS	L366
L336:
	CMP	DWORD [16+EBP],0
	JS	L367
L337:
	MOV	EDX,DWORD [8+EBP]
	MOV	EAX,DWORD [8+EDX]
	CMP	DWORD [20+EBP],EAX
	JLE	L338
	MOV	DWORD [20+EBP],EAX
L338:
	MOV	ESI,DWORD [8+EBP]
	MOV	EAX,DWORD [12+ESI]
	CMP	DWORD [24+EBP],EAX
	JLE	L339
	MOV	DWORD [24+EBP],EAX
L339:
	MOV	EAX,DWORD [8+EBP]
	MOV	EDI,DWORD [28+EBP]
	MOV	DWORD [-16+EBP],EDI
	CMP	EDI,DWORD [16+EAX]
	JG	L361
L359:
	MOV	ESI,DWORD [8+EBP]
	MOV	EDX,DWORD [-16+EBP]
	MOV	EBX,DWORD [16+EBP]
	MOV	ECX,DWORD [20+ESI+EDX*4]
	MOV	EAX,ECX
	SUB	EAX,ESI
	MOV	EDI,DWORD [ECX]
	SUB	EAX,1044
	MOV	EDX,DWORD [16+ECX]
	SAR	EAX,2
	MOV	DWORD [-32+EBP],EDI
	IMUL	EAX,EAX,954437177
	MOV	EDI,DWORD [24+EBP]
	SUB	EBX,EDX
	SUB	EDI,EDX
	MOV	BYTE [-33+EBP],AL
	MOV	ESI,DWORD [20+EBP]
	MOV	EDX,DWORD [12+EBP]
	MOV	EAX,DWORD [12+ECX]
	MOV	DWORD [-44+EBP],EDI
	SUB	ESI,EAX
	SUB	EDX,EAX
	MOV	DWORD [-52+EBP],ESI
	MOV	DWORD [-28+EBP],EDX
	JS	L368
L344:
	TEST	EBX,EBX
	JS	L369
L345:
	MOV	EAX,DWORD [4+ECX]
	CMP	DWORD [-52+EBP],EAX
	JLE	L346
	MOV	DWORD [-52+EBP],EAX
L346:
	MOV	EAX,DWORD [8+ECX]
	CMP	DWORD [-44+EBP],EAX
	JLE	L347
	MOV	DWORD [-44+EBP],EAX
L347:
	CMP	EBX,DWORD [-44+EBP]
	JGE	L363
L358:
	MOV	ESI,DWORD [16+ECX]
	MOV	EDX,DWORD [-28+EBP]
	ADD	ESI,EBX
	CMP	EDX,DWORD [-52+EBP]
	MOV	DWORD [-24+EBP],ESI
	JGE	L365
L357:
	MOV	EAX,EBX
	MOV	EDI,DWORD [12+ECX]
	IMUL	EAX,DWORD [4+ECX]
	ADD	EDI,EDX
	MOV	ESI,DWORD [-32+EBP]
	ADD	EAX,EDX
	MOV	DWORD [-20+EBP],EDI
	MOVZX	ESI,BYTE [EAX+ESI*1]
	CMP	ESI,DWORD [20+ECX]
	JE	L354
	MOV	EDI,DWORD [8+EBP]
	MOV	EAX,DWORD [-24+EBP]
	MOV	ESI,DWORD [-40+EBP]
	IMUL	EAX,DWORD [8+EDI]
	ADD	EAX,DWORD [-20+EBP]
	MOV	DWORD [-48+EBP],EAX
	MOV	AL,BYTE [-33+EBP]
	MOV	EDI,DWORD [-48+EBP]
	MOV	BYTE [EDI+ESI*1],AL
L354:
	INC	EDX
	CMP	EDX,DWORD [-52+EBP]
	JL	L357
L365:
	INC	EBX
	CMP	EBX,DWORD [-44+EBP]
	JL	L358
L363:
	MOV	EDX,DWORD [8+EBP]
	INC	DWORD [-16+EBP]
	MOV	EAX,DWORD [-16+EBP]
	CMP	EAX,DWORD [16+EDX]
	JLE	L359
L361:
	ADD	ESP,40
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L369:
	XOR	EBX,EBX
	JMP	L345
L368:
	MOV	DWORD [-28+EBP],0
	JMP	L344
L367:
	MOV	DWORD [16+EBP],0
	JMP	L337
L366:
	MOV	DWORD [12+EBP],0
	JMP	L336
	GLOBAL	_sheetUpdown
_sheetUpdown:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	EDI,DWORD [8+EBP]
	PUSH	EBX
	MOV	ESI,DWORD [12+EBP]
	MOV	EBX,DWORD [32+EDI]
	MOV	EAX,DWORD [24+EDI]
	MOV	EDX,DWORD [16+EBX]
	INC	EDX
	CMP	ESI,EDX
	JLE	L371
	MOV	ESI,EDX
L371:
	CMP	ESI,-1
	JGE	L372
	OR	ESI,-1
L372:
	MOV	DWORD [24+EDI],ESI
	CMP	EAX,ESI
	JLE	L373
	TEST	ESI,ESI
	JS	L374
	MOV	ECX,EAX
L379:
	MOV	EAX,DWORD [16+EBX+ECX*4]
	MOV	DWORD [20+EBX+ECX*4],EAX
	MOV	DWORD [24+EAX],ECX
	DEC	ECX
	CMP	ECX,ESI
	JG	L379
	MOV	DWORD [20+EBX+ESI*4],EDI
	LEA	EBX,DWORD [1+ESI]
	PUSH	EBX
	MOV	ECX,DWORD [16+EDI]
	MOV	EAX,ECX
	ADD	EAX,DWORD [8+EDI]
	PUSH	EAX
	MOV	EDX,DWORD [12+EDI]
	MOV	EAX,EDX
	ADD	EAX,DWORD [4+EDI]
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	PUSH	DWORD [32+EDI]
	CALL	_sheetRefreshMap
	PUSH	EBX
L408:
	MOV	ECX,DWORD [16+EDI]
	MOV	EAX,ECX
	ADD	EAX,DWORD [8+EDI]
	PUSH	EAX
	MOV	EDX,DWORD [12+EDI]
	MOV	EAX,EDX
	ADD	EAX,DWORD [4+EDI]
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	PUSH	DWORD [32+EDI]
	CALL	_sheetRefreshSub
	ADD	ESP,48
L370:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L374:
	MOV	EDX,DWORD [16+EBX]
	CMP	EDX,EAX
	JLE	L381
	MOV	ECX,EAX
	CMP	EAX,EDX
	JGE	L381
L386:
	MOV	EAX,DWORD [24+EBX+ECX*4]
	MOV	DWORD [20+EBX+ECX*4],EAX
	MOV	DWORD [24+EAX],ECX
	INC	ECX
	CMP	ECX,DWORD [16+EBX]
	JL	L386
L381:
	DEC	DWORD [16+EBX]
	PUSH	0
	MOV	ECX,DWORD [16+EDI]
	MOV	EAX,ECX
	ADD	EAX,DWORD [8+EDI]
	PUSH	EAX
	MOV	EDX,DWORD [12+EDI]
	MOV	EAX,EDX
	ADD	EAX,DWORD [4+EDI]
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	PUSH	DWORD [32+EDI]
	CALL	_sheetRefreshMap
	PUSH	0
	JMP	L408
L373:
	CMP	EAX,ESI
	JGE	L370
	TEST	EAX,EAX
	JS	L389
	MOV	ECX,EAX
	CMP	EAX,ESI
	JGE	L405
L394:
	MOV	EAX,DWORD [24+EBX+ECX*4]
	MOV	DWORD [20+EBX+ECX*4],EAX
	MOV	DWORD [24+EAX],ECX
	INC	ECX
	CMP	ECX,ESI
	JL	L394
L405:
	MOV	DWORD [20+EBX+ESI*4],EDI
L395:
	PUSH	ESI
	MOV	ECX,DWORD [16+EDI]
	MOV	EAX,ECX
	ADD	EAX,DWORD [8+EDI]
	PUSH	EAX
	MOV	EDX,DWORD [12+EDI]
	MOV	EAX,EDX
	ADD	EAX,DWORD [4+EDI]
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	PUSH	DWORD [32+EDI]
	CALL	_sheetRefreshMap
	PUSH	ESI
	JMP	L408
L389:
	MOV	ECX,DWORD [16+EBX]
	CMP	ECX,ESI
	JL	L407
L400:
	MOV	EDX,DWORD [20+EBX+ECX*4]
	LEA	EAX,DWORD [1+ECX]
	MOV	DWORD [24+EBX+ECX*4],EDX
	DEC	ECX
	MOV	DWORD [24+EDX],EAX
	CMP	ECX,ESI
	JGE	L400
L407:
	MOV	DWORD [20+EBX+ESI*4],EDI
	INC	DWORD [16+EBX]
	JMP	L395
	GLOBAL	_sheetRefresh
_sheetRefresh:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	MOV	EAX,DWORD [24+EBX]
	TEST	EAX,EAX
	JS	L409
	PUSH	EAX
	MOV	ECX,DWORD [16+EBX]
	MOV	EAX,ECX
	ADD	ECX,DWORD [16+EBP]
	ADD	EAX,DWORD [24+EBP]
	PUSH	EAX
	MOV	EDX,DWORD [12+EBX]
	MOV	EAX,EDX
	ADD	EDX,DWORD [12+EBP]
	ADD	EAX,DWORD [20+EBP]
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	PUSH	DWORD [32+EBX]
	CALL	_sheetRefreshSub
	ADD	ESP,24
L409:
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
	GLOBAL	_sheetRefreshSub
_sheetRefreshSub:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,44
	MOV	EAX,DWORD [8+EBP]
	MOV	EDX,DWORD [8+EBP]
	CMP	DWORD [12+EBP],0
	MOV	EAX,DWORD [EAX]
	MOV	EDX,DWORD [4+EDX]
	MOV	DWORD [-36+EBP],EAX
	MOV	DWORD [-40+EBP],EDX
	JS	L442
L412:
	CMP	DWORD [16+EBP],0
	JS	L443
L413:
	MOV	ESI,DWORD [8+EBP]
	MOV	EAX,DWORD [8+ESI]
	CMP	DWORD [20+EBP],EAX
	JLE	L414
	MOV	DWORD [20+EBP],EAX
L414:
	MOV	EDI,DWORD [8+EBP]
	MOV	EAX,DWORD [12+EDI]
	CMP	DWORD [24+EBP],EAX
	JLE	L415
	MOV	DWORD [24+EBP],EAX
L415:
	MOV	EDX,DWORD [8+EBP]
	MOV	EAX,DWORD [28+EBP]
	MOV	DWORD [-16+EBP],EAX
	CMP	EAX,DWORD [16+EDX]
	JG	L437
L435:
	MOV	EDI,DWORD [8+EBP]
	MOV	ESI,DWORD [-16+EBP]
	MOV	ECX,DWORD [16+EBP]
	MOV	EBX,DWORD [20+EDI+ESI*4]
	MOV	ESI,DWORD [20+EBP]
	MOV	EAX,EBX
	SUB	EAX,EDI
	MOV	EDX,DWORD [16+EBX]
	SUB	EAX,1044
	MOV	EDI,DWORD [24+EBP]
	SAR	EAX,2
	SUB	EDI,EDX
	IMUL	EAX,EAX,954437177
	MOV	BYTE [-41+EBP],AL
	SUB	ECX,EDX
	MOV	EAX,DWORD [EBX]
	MOV	EDX,DWORD [12+EBP]
	MOV	DWORD [-32+EBP],EAX
	MOV	DWORD [-56+EBP],EDI
	MOV	EAX,DWORD [12+EBX]
	SUB	ESI,EAX
	SUB	EDX,EAX
	MOV	DWORD [-28+EBP],ESI
	MOV	DWORD [-24+EBP],EDX
	JS	L444
L420:
	TEST	ECX,ECX
	JS	L445
L421:
	MOV	EAX,DWORD [4+EBX]
	CMP	DWORD [-28+EBP],EAX
	JLE	L422
	MOV	DWORD [-28+EBP],EAX
L422:
	MOV	EAX,DWORD [8+EBX]
	CMP	DWORD [-56+EBP],EAX
	JLE	L423
	MOV	DWORD [-56+EBP],EAX
L423:
	MOV	ESI,ECX
	CMP	ECX,DWORD [-56+EBP]
	JGE	L439
L434:
	MOV	EDI,DWORD [16+EBX]
	MOV	ECX,DWORD [-24+EBP]
	ADD	EDI,ESI
	CMP	ECX,DWORD [-28+EBP]
	MOV	DWORD [-20+EBP],EDI
	JGE	L441
L433:
	MOV	EDX,DWORD [8+EBP]
	MOV	EDI,DWORD [-20+EBP]
	MOV	EAX,DWORD [12+EBX]
	IMUL	EDI,DWORD [8+EDX]
	ADD	EAX,ECX
	MOV	DL,BYTE [-41+EBP]
	ADD	EAX,EDI
	MOV	EDI,DWORD [-40+EBP]
	MOV	DWORD [-52+EBP],EAX
	CMP	BYTE [EAX+EDI*1],DL
	JE	L446
L430:
	INC	ECX
	CMP	ECX,DWORD [-28+EBP]
	JL	L433
L441:
	INC	ESI
	CMP	ESI,DWORD [-56+EBP]
	JL	L434
L439:
	MOV	EDI,DWORD [8+EBP]
	INC	DWORD [-16+EBP]
	MOV	ESI,DWORD [-16+EBP]
	CMP	ESI,DWORD [16+EDI]
	JLE	L435
L437:
	ADD	ESP,44
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L446:
	MOV	EAX,ESI
	MOV	EDX,DWORD [-32+EBP]
	IMUL	EAX,DWORD [4+EBX]
	ADD	EAX,ECX
	MOV	EDI,DWORD [-36+EBP]
	MOV	AL,BYTE [EAX+EDX*1]
	MOV	EDX,DWORD [-52+EBP]
	MOV	BYTE [EDX+EDI*1],AL
	JMP	L430
L445:
	XOR	ECX,ECX
	JMP	L421
L444:
	MOV	DWORD [-24+EBP],0
	JMP	L420
L443:
	MOV	DWORD [16+EBP],0
	JMP	L413
L442:
	MOV	DWORD [12+EBP],0
	JMP	L412
	GLOBAL	_sheetSlide
_sheetSlide:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	EAX,DWORD [12+EBP]
	MOV	EBX,DWORD [8+EBP]
	MOV	EDI,DWORD [12+EBX]
	MOV	ESI,DWORD [16+EBX]
	MOV	DWORD [12+EBX],EAX
	MOV	EAX,DWORD [16+EBP]
	MOV	DWORD [16+EBX],EAX
	CMP	DWORD [24+EBX],0
	JS	L447
	PUSH	0
	MOV	EAX,ESI
	ADD	EAX,DWORD [8+EBX]
	PUSH	EAX
	MOV	EAX,EDI
	ADD	EAX,DWORD [4+EBX]
	PUSH	EAX
	PUSH	ESI
	PUSH	EDI
	PUSH	DWORD [32+EBX]
	CALL	_sheetRefreshMap
	MOV	EAX,DWORD [16+EBP]
	PUSH	DWORD [24+EBX]
	ADD	EAX,DWORD [8+EBX]
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [4+EBX]
	PUSH	EAX
	PUSH	DWORD [16+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [32+EBX]
	CALL	_sheetRefreshMap
	MOV	EAX,ESI
	ADD	ESP,48
	PUSH	0
	ADD	EAX,DWORD [8+EBX]
	PUSH	EAX
	MOV	EAX,EDI
	ADD	EAX,DWORD [4+EBX]
	PUSH	EAX
	PUSH	ESI
	PUSH	EDI
	PUSH	DWORD [32+EBX]
	CALL	_sheetRefreshSub
	MOV	EAX,DWORD [16+EBP]
	PUSH	DWORD [24+EBX]
	ADD	EAX,DWORD [8+EBX]
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [4+EBX]
	PUSH	EAX
	PUSH	DWORD [16+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [32+EBX]
	CALL	_sheetRefreshSub
	ADD	ESP,48
L447:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_sheetFree
_sheetFree:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	CMP	DWORD [24+EBX],0
	JS	L450
	PUSH	-1
	PUSH	EBX
	CALL	_sheetUpdown
	POP	EAX
	POP	EDX
L450:
	MOV	DWORD [28+EBX],0
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
	GLOBAL	_makeTextBox
_makeTextBox:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,20
	MOV	EAX,DWORD [12+EBP]
	MOV	ESI,DWORD [16+EBP]
	ADD	EAX,DWORD [20+EBP]
	SUB	ESI,3
	PUSH	ESI
	MOV	DWORD [-16+EBP],EAX
	MOV	EAX,DWORD [16+EBP]
	ADD	EAX,DWORD [24+EBP]
	MOV	DWORD [-20+EBP],EAX
	MOV	EAX,DWORD [-16+EBP]
	INC	EAX
	PUSH	EAX
	MOV	DWORD [-24+EBP],EAX
	MOV	EAX,DWORD [12+EBP]
	PUSH	ESI
	SUB	EAX,2
	PUSH	EAX
	MOV	DWORD [-28+EBP],EAX
	MOV	EAX,DWORD [8+EBP]
	PUSH	15
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	MOV	EDI,DWORD [12+EBP]
	MOV	EAX,DWORD [-20+EBP]
	SUB	EDI,3
	INC	EAX
	PUSH	EAX
	MOV	DWORD [-32+EBP],EAX
	PUSH	EDI
	MOV	EAX,DWORD [8+EBP]
	PUSH	ESI
	PUSH	EDI
	PUSH	15
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	MOV	EAX,DWORD [8+EBP]
	ADD	ESP,56
	MOV	EBX,DWORD [-20+EBP]
	ADD	EBX,2
	PUSH	EBX
	PUSH	DWORD [-24+EBP]
	PUSH	EBX
	PUSH	EDI
	PUSH	7
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	MOV	EAX,DWORD [-16+EBP]
	PUSH	EBX
	ADD	EAX,2
	PUSH	EAX
	PUSH	ESI
	PUSH	EAX
	MOV	EAX,DWORD [8+EBP]
	PUSH	7
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	MOV	EAX,DWORD [8+EBP]
	ADD	ESP,56
	MOV	EBX,DWORD [16+EBP]
	SUB	EBX,2
	MOV	EDI,DWORD [12+EBP]
	PUSH	EBX
	DEC	EDI
	PUSH	DWORD [-16+EBP]
	PUSH	EBX
	PUSH	EDI
	PUSH	0
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [-20+EBP]
	PUSH	DWORD [-28+EBP]
	PUSH	EBX
	PUSH	DWORD [-28+EBP]
	PUSH	0
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	MOV	EAX,DWORD [8+EBP]
	ADD	ESP,56
	PUSH	DWORD [-32+EBP]
	PUSH	DWORD [-16+EBP]
	PUSH	DWORD [-32+EBP]
	PUSH	DWORD [-28+EBP]
	PUSH	8
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [-32+EBP]
	PUSH	DWORD [-24+EBP]
	PUSH	EBX
	PUSH	DWORD [-24+EBP]
	PUSH	8
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	MOV	EAX,DWORD [16+EBP]
	ADD	ESP,56
	DEC	EAX
	PUSH	DWORD [-20+EBP]
	PUSH	DWORD [-16+EBP]
	PUSH	EAX
	PUSH	EDI
	MOVZX	EAX,BYTE [28+EBP]
	PUSH	EAX
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
[SECTION .data]
_closeBtn.2:
	DB	"OOOOOOOOOOOOOOO@"
	DB	"OQQQQQQQQQQQQQ$@"
	DB	"OQQQQQQQQQQQQQ$@"
	DB	"OQQQ@@QQQQ@@QQ$@"
	DB	"OQQQQ@@QQ@@QQQ$@"
	DB	"OQQQQQ@@@@QQQQ$@"
	DB	"OQQQQQQ@@QQQQQ$@"
	DB	"OQQQQQ@@@@QQQQ$@"
	DB	"OQQQQ@@QQ@@QQQ$@"
	DB	"OQQQ@@QQQQ@@QQ$@"
	DB	"OQQQQQQQQQQQQQ$@"
	DB	"OQQQQQQQQQQQQQ$@"
	DB	"O$$$$$$$$$$$$$$@"
	DB	"@@@@@@@@@@@@@@@@"
[SECTION .text]
	GLOBAL	_makeWindowTitle
_makeWindowTitle:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	ECX
	CMP	BYTE [20+EBP],0
	JE	L453
	MOV	BL,7
	MOV	DL,12
L454:
	MOV	EAX,DWORD [12+EBP]
	PUSH	20
	SUB	EAX,4
	XOR	EDI,EDI
	PUSH	EAX
	PUSH	3
	PUSH	3
	MOVZX	EAX,DL
	PUSH	EAX
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxFill8
	PUSH	DWORD [16+EBP]
	MOVSX	EAX,BL
	PUSH	EAX
	PUSH	4
	PUSH	24
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_putFont8_asc
	ADD	ESP,52
	IMUL	EBX,DWORD [12+EBP],5
	MOV	DWORD [-16+EBP],0
L470:
	MOV	EAX,DWORD [12+EBP]
	MOV	EDX,DWORD [8+EBP]
	ADD	EAX,EBX
	XOR	ESI,ESI
	LEA	ECX,DWORD [-21+EDX+EAX*1]
L469:
	MOV	DL,BYTE [_closeBtn.2+ESI+EDI*1]
	CMP	DL,64
	JE	L475
	CMP	DL,36
	JE	L476
	CMP	DL,81
	MOV	DL,8
	SETNE	AL
	SUB	DL,AL
L464:
	INC	ESI
	MOV	BYTE [ECX],DL
	INC	ECX
	CMP	ESI,15
	JLE	L469
	INC	DWORD [-16+EBP]
	ADD	EDI,16
	ADD	EBX,DWORD [12+EBP]
	CMP	DWORD [-16+EBP],13
	JLE	L470
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L476:
	MOV	DL,15
	JMP	L464
L475:
	XOR	EDX,EDX
	JMP	L464
L453:
	MOV	BL,8
	MOV	DL,15
	JMP	L454
	GLOBAL	_makeWindow
_makeWindow:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,24
	MOV	EAX,DWORD [16+EBP]
	MOV	EBX,DWORD [12+EBP]
	MOV	DWORD [-16+EBP],EAX
	MOV	ESI,DWORD [8+EBP]
	MOV	EAX,DWORD [20+EBP]
	MOV	DWORD [-20+EBP],EAX
	MOVSX	EAX,BYTE [24+EBP]
	MOV	DWORD [-24+EBP],EAX
	LEA	EAX,DWORD [-1+EBX]
	PUSH	0
	MOV	DWORD [-28+EBP],EAX
	PUSH	EAX
	PUSH	0
	PUSH	0
	PUSH	8
	PUSH	EBX
	PUSH	ESI
	CALL	_boxFill8
	LEA	EAX,DWORD [-2+EBX]
	PUSH	1
	MOV	DWORD [-32+EBP],EAX
	PUSH	EAX
	PUSH	1
	PUSH	1
	PUSH	7
	PUSH	EBX
	PUSH	ESI
	CALL	_boxFill8
	MOV	EAX,DWORD [-16+EBP]
	ADD	ESP,56
	DEC	EAX
	MOV	DWORD [-36+EBP],EAX
	PUSH	EAX
	PUSH	0
	PUSH	0
	PUSH	0
	PUSH	8
	PUSH	EBX
	PUSH	ESI
	CALL	_boxFill8
	MOV	EDI,DWORD [-16+EBP]
	SUB	EDI,2
	PUSH	EDI
	PUSH	1
	PUSH	1
	PUSH	1
	PUSH	7
	PUSH	EBX
	PUSH	ESI
	CALL	_boxFill8
	ADD	ESP,56
	PUSH	EDI
	PUSH	DWORD [-32+EBP]
	PUSH	1
	PUSH	DWORD [-32+EBP]
	PUSH	15
	PUSH	EBX
	PUSH	ESI
	CALL	_boxFill8
	PUSH	DWORD [-36+EBP]
	PUSH	DWORD [-28+EBP]
	PUSH	0
	PUSH	DWORD [-28+EBP]
	PUSH	0
	PUSH	EBX
	PUSH	ESI
	CALL	_boxFill8
	MOV	EAX,DWORD [-16+EBP]
	ADD	ESP,56
	SUB	EAX,3
	PUSH	EAX
	LEA	EAX,DWORD [-3+EBX]
	PUSH	EAX
	PUSH	2
	PUSH	2
	PUSH	8
	PUSH	EBX
	PUSH	ESI
	CALL	_boxFill8
	PUSH	EDI
	PUSH	DWORD [-32+EBP]
	PUSH	EDI
	PUSH	1
	PUSH	15
	PUSH	EBX
	PUSH	ESI
	CALL	_boxFill8
	ADD	ESP,56
	PUSH	DWORD [-36+EBP]
	PUSH	DWORD [-28+EBP]
	PUSH	DWORD [-36+EBP]
	PUSH	0
	PUSH	0
	PUSH	EBX
	PUSH	ESI
	CALL	_boxFill8
	MOV	DWORD [8+EBP],ESI
	MOV	EAX,DWORD [-24+EBP]
	MOV	DWORD [12+EBP],EBX
	MOV	DWORD [20+EBP],EAX
	ADD	ESP,28
	MOV	EAX,DWORD [-20+EBP]
	MOV	DWORD [16+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_makeWindowTitle
	GLOBAL	_consNewLine
_consNewLine:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	EDI,28
	PUSH	EBX
	CMP	DWORD [8+EBP],139
	JG	L490
	ADD	DWORD [8+EBP],16
L480:
	MOV	EAX,DWORD [8+EBP]
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L490:
	MOV	ESI,8
L489:
	MOV	EAX,DWORD [12+EBP]
	MOV	EDX,EDI
	MOV	ECX,DWORD [4+EAX]
	MOV	EBX,DWORD [EAX]
	LEA	EAX,DWORD [16+EDI]
	IMUL	EAX,ECX
	IMUL	EDX,ECX
	LEA	EAX,DWORD [EAX+ESI*1]
	LEA	EDX,DWORD [EDX+ESI*1]
	INC	ESI
	MOV	AL,BYTE [EAX+EBX*1]
	CMP	ESI,247
	MOV	BYTE [EDX+EBX*1],AL
	JLE	L489
	INC	EDI
	CMP	EDI,139
	JLE	L490
	MOV	EDI,140
L500:
	MOV	ESI,8
L499:
	MOV	EDX,DWORD [12+EBP]
	MOV	EAX,EDI
	MOV	ECX,EDX
	IMUL	EAX,DWORD [4+EDX]
	MOV	EDX,DWORD [EDX]
	LEA	EAX,DWORD [EAX+ESI*1]
	INC	ESI
	CMP	ESI,247
	MOV	BYTE [EAX+EDX*1],0
	JLE	L499
	INC	EDI
	CMP	EDI,155
	JLE	L500
	PUSH	156
	PUSH	248
	PUSH	28
	PUSH	8
	PUSH	ECX
	CALL	_sheetRefresh
	ADD	ESP,20
	JMP	L480
[SECTION .data]
LC0:
	DB	">",0x00
LC1:
	DB	" ",0x00
LC2:
	DB	"mem",0x00
LC3:
	DB	"memory %dMB free : %dKB",0x00
LC4:
	DB	"cls",0x00
LC5:
	DB	"dir",0x00
LC6:
	DB	"fileName.ext    %7d",0x00
LC7:
	DB	"type ",0x00
LC8:
	DB	"file not found",0x00
LC9:
	DB	"clihlt",0x00
LC10:
	DB	"command not found",0x00
[SECTION .text]
	GLOBAL	_consoleMain
_consoleMain:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	EDI,16
	PUSH	EBX
	SUB	ESP,604
	CALL	_processNow
	PUSH	11520
	PUSH	3932160
	MOV	DWORD [-596+EBP],EAX
	MOV	DWORD [-600+EBP],28
	MOV	DWORD [-604+EBP],-1
	CALL	_memsegAlloc4K
	PUSH	1049088
	PUSH	EAX
	MOV	DWORD [-616+EBP],EAX
	CALL	_readFat
	MOV	EBX,DWORD [-596+EBP]
	PUSH	DWORD [-596+EBP]
	LEA	EAX,DWORD [-524+EBP]
	ADD	EBX,16
	PUSH	EAX
	PUSH	128
	PUSH	EBX
	CALL	_QueueInit
	ADD	ESP,32
	CALL	_timerAlloc
	PUSH	1
	PUSH	EBX
	MOV	DWORD [-592+EBP],EAX
	PUSH	EAX
	CALL	_timerInit
	PUSH	50
	PUSH	DWORD [-592+EBP]
	CALL	_timerSetTime
	PUSH	1
	PUSH	LC0
	PUSH	0
	PUSH	7
	PUSH	28
	PUSH	8
	PUSH	DWORD [8+EBP]
	CALL	_putFont8AscSheet
	ADD	ESP,48
L510:
	CALL	_io_cli
	MOV	ESI,DWORD [-596+EBP]
	ADD	ESI,16
	PUSH	ESI
	CALL	_QueueSize
	POP	EDX
	TEST	EAX,EAX
	JE	L660
	PUSH	ESI
	CALL	_QueuePop
	MOV	EBX,EAX
	CALL	_io_sti
	POP	ECX
	CMP	EBX,1
	JLE	L661
L515:
	CMP	EBX,2
	JE	L662
L520:
	CMP	EBX,3
	JE	L663
L521:
	LEA	EAX,DWORD [-257+EBX]
	CMP	EAX,254
	JA	L522
	CMP	EBX,264
	JE	L664
	CMP	EBX,266
	JE	L665
	CMP	EDI,239
	JG	L522
	MOV	EAX,EDI
	MOV	EDX,8
	MOV	ESI,EDX
	PUSH	1
	CDQ
	IDIV	ESI
	MOV	BYTE [-556+EBP],BL
	MOV	BYTE [-590+EBP+EAX*1],BL
	LEA	EAX,DWORD [-556+EBP]
	PUSH	EAX
	PUSH	0
	PUSH	7
	PUSH	DWORD [-600+EBP]
	PUSH	EDI
	ADD	EDI,8
	PUSH	DWORD [8+EBP]
	MOV	BYTE [-555+EBP],0
	CALL	_putFont8AscSheet
L659:
	ADD	ESP,28
L522:
	CMP	DWORD [-604+EBP],0
	JS	L636
	MOV	EAX,DWORD [-600+EBP]
	ADD	EAX,15
	PUSH	EAX
	LEA	EAX,DWORD [7+EDI]
	PUSH	EAX
	PUSH	DWORD [-600+EBP]
	PUSH	EDI
	MOVZX	EAX,BYTE [-604+EBP]
	PUSH	EAX
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	ADD	ESP,28
L636:
	MOV	EAX,DWORD [-600+EBP]
	ADD	EAX,16
	PUSH	EAX
	LEA	EAX,DWORD [8+EDI]
	PUSH	EAX
	PUSH	DWORD [-600+EBP]
	PUSH	EDI
	PUSH	DWORD [8+EBP]
	CALL	_sheetRefresh
	ADD	ESP,20
	JMP	L510
L665:
	PUSH	1
	LEA	ESI,DWORD [-588+EBP]
	PUSH	LC1
	PUSH	0
	PUSH	7
	PUSH	DWORD [-600+EBP]
	PUSH	EDI
	PUSH	DWORD [8+EBP]
	CALL	_putFont8AscSheet
	MOV	EAX,EDI
	MOV	EDX,8
	MOV	EDI,LC2
	MOV	EBX,EDX
	CDQ
	IDIV	EBX
	MOV	BYTE [-590+EBP+EAX*1],0
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [-600+EBP]
	CALL	_consNewLine
	MOV	ECX,4
	CLD
	MOV	DWORD [-600+EBP],EAX
	REPE
	CMPSB
	SETA	DL
	SETB	AL
	ADD	ESP,36
	CMP	DL,AL
	JNE	L527
	PUSH	3932160
	LEA	EBX,DWORD [-556+EBP]
	CALL	_memsegTotal
	SHR	EAX,10
	MOV	DWORD [ESP],EAX
	MOV	EAX,DWORD [12+EBP]
	SHR	EAX,20
	PUSH	EAX
	PUSH	LC3
	PUSH	EBX
	CALL	_sprintf
	PUSH	30
	PUSH	EBX
	PUSH	0
	PUSH	7
	PUSH	DWORD [-600+EBP]
	PUSH	8
	PUSH	DWORD [8+EBP]
	CALL	_putFont8AscSheet
	ADD	ESP,44
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [-600+EBP]
	CALL	_consNewLine
	PUSH	DWORD [8+EBP]
	PUSH	EAX
	MOV	DWORD [-600+EBP],EAX
	CALL	_consNewLine
	ADD	ESP,16
	MOV	DWORD [-600+EBP],EAX
L528:
	PUSH	1
	MOV	EDI,16
	PUSH	LC0
	PUSH	0
	PUSH	7
	PUSH	DWORD [-600+EBP]
	PUSH	8
	PUSH	DWORD [8+EBP]
	CALL	_putFont8AscSheet
	JMP	L659
L527:
	CLD
	LEA	ESI,DWORD [-588+EBP]
	MOV	EDI,LC4
	MOV	ECX,4
	REPE
	CMPSB
	JNE	L529
	MOV	EBX,28
L539:
	MOV	DWORD [-608+EBP],8
L538:
	MOV	ESI,DWORD [8+EBP]
	MOV	EAX,EBX
	IMUL	EAX,DWORD [4+ESI]
	ADD	EAX,DWORD [-608+EBP]
	MOV	EDX,DWORD [ESI]
	MOV	BYTE [EAX+EDX*1],0
	INC	DWORD [-608+EBP]
	CMP	DWORD [-608+EBP],247
	JLE	L538
	INC	EBX
	CMP	EBX,155
	JLE	L539
	PUSH	156
	PUSH	248
	PUSH	28
	PUSH	8
	PUSH	ESI
	CALL	_sheetRefresh
	ADD	ESP,20
	MOV	DWORD [-600+EBP],28
	JMP	L528
L529:
	CLD
	LEA	ESI,DWORD [-588+EBP]
	MOV	EDI,LC5
	MOV	ECX,4
	REPE
	CMPSB
	JNE	L541
	MOV	DWORD [-608+EBP],0
	XOR	ESI,ESI
L559:
	MOV	AL,BYTE [1058304+ESI]
	TEST	AL,AL
	JE	L631
	CMP	AL,-27
	JE	L544
	TEST	BYTE [1058315+ESI],24
	JNE	L544
	PUSH	DWORD [1058332+ESI]
	PUSH	LC6
	LEA	EAX,DWORD [-556+EBP]
	PUSH	EAX
	XOR	EBX,EBX
	CALL	_sprintf
	LEA	EDX,DWORD [1058304+ESI]
	ADD	ESP,12
L553:
	MOV	AL,BYTE [EDX]
	INC	EDX
	MOV	BYTE [-556+EBP+EBX*1],AL
	INC	EBX
	CMP	EBX,7
	JLE	L553
	XOR	EBX,EBX
L558:
	MOV	AL,BYTE [1058312+ESI+EBX*1]
	MOV	BYTE [-547+EBP+EBX*1],AL
	INC	EBX
	CMP	EBX,2
	JLE	L558
	PUSH	30
	LEA	EAX,DWORD [-556+EBP]
	PUSH	EAX
	PUSH	0
	PUSH	7
	PUSH	DWORD [-600+EBP]
	PUSH	8
	PUSH	DWORD [8+EBP]
	CALL	_putFont8AscSheet
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [-600+EBP]
	CALL	_consNewLine
	ADD	ESP,36
	MOV	DWORD [-600+EBP],EAX
L544:
	INC	DWORD [-608+EBP]
	ADD	ESI,32
	CMP	DWORD [-608+EBP],243
	JLE	L559
L631:
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [-600+EBP]
L658:
	CALL	_consNewLine
	POP	EBX
	POP	ESI
	MOV	DWORD [-600+EBP],EAX
	JMP	L528
L541:
	CLD
	LEA	ESI,DWORD [-588+EBP]
	MOV	EDI,LC7
	MOV	ECX,5
	REPE
	CMPSB
	JNE	L561
	XOR	EBX,EBX
L566:
	MOV	BYTE [-556+EBP+EBX*1],32
	INC	EBX
	CMP	EBX,10
	JLE	L566
	XOR	EBX,EBX
	MOV	DWORD [-608+EBP],5
	CMP	BYTE [-583+EBP],0
	JE	L568
L575:
	MOV	EAX,DWORD [-608+EBP]
	MOV	DL,BYTE [-588+EBP+EAX*1]
	CMP	DL,46
	JE	L666
L572:
	LEA	EAX,DWORD [-97+EDX]
	MOV	BYTE [-556+EBP+EBX*1],DL
	CMP	AL,25
	JA	L574
	LEA	EAX,DWORD [-32+EDX]
	MOV	BYTE [-556+EBP+EBX*1],AL
L574:
	INC	EBX
L569:
	INC	DWORD [-608+EBP]
	CMP	EBX,10
	JG	L568
	MOV	EDX,DWORD [-608+EBP]
	CMP	BYTE [-588+EBP+EDX*1],0
	JNE	L575
L568:
	MOV	DWORD [-608+EBP],0
	XOR	ESI,ESI
L589:
	CMP	BYTE [1058304+ESI],0
	JE	L577
	XOR	EDI,EDI
	TEST	BYTE [1058315+ESI],24
	JNE	L581
	XOR	EBX,EBX
	LEA	ECX,DWORD [1058304+ESI]
L587:
	MOVZX	EDX,BYTE [ECX]
	MOVSX	EAX,BYTE [-556+EBP+EBX*1]
	CMP	EDX,EAX
	JNE	L667
	INC	EBX
	INC	ECX
	CMP	EBX,10
	JLE	L587
L581:
	MOV	ECX,EDI
	DEC	CL
	JNE	L577
	INC	DWORD [-608+EBP]
	ADD	ESI,32
	CMP	DWORD [-608+EBP],243
	JLE	L589
L577:
	CMP	DWORD [-608+EBP],223
	JG	L630
	MOV	ESI,DWORD [-608+EBP]
	SAL	ESI,5
	CMP	BYTE [1058304+ESI],0
	JE	L630
	PUSH	DWORD [1058332+ESI]
	PUSH	3932160
	XOR	EBX,EBX
	MOV	EDI,8
	CALL	_memsegAlloc4K
	PUSH	1064448
	PUSH	DWORD [-616+EBP]
	PUSH	EAX
	MOV	DWORD [-612+EBP],EAX
	PUSH	DWORD [1058332+ESI]
	MOVZX	EAX,WORD [1058330+ESI]
	PUSH	EAX
	CALL	_loadFile
	ADD	ESP,28
	CMP	EBX,DWORD [1058332+ESI]
	JAE	L652
L607:
	MOV	ESI,DWORD [-612+EBP]
	MOV	AL,BYTE [EBX+ESI*1]
	MOV	BYTE [-556+EBP],AL
	CMP	AL,9
	MOV	BYTE [-555+EBP],0
	JE	L596
	MOV	AL,BYTE [-556+EBP]
	CMP	AL,10
	JE	L657
	CMP	AL,13
	JE	L593
	PUSH	1
	LEA	EAX,DWORD [-556+EBP]
	PUSH	EAX
	PUSH	0
	PUSH	7
	PUSH	DWORD [-600+EBP]
	PUSH	EDI
	ADD	EDI,8
	PUSH	DWORD [8+EBP]
	CALL	_putFont8AscSheet
	ADD	ESP,28
	CMP	EDI,248
	JE	L657
L593:
	MOV	EAX,DWORD [-608+EBP]
	INC	EBX
	SAL	EAX,5
	CMP	EBX,DWORD [1058332+EAX]
	JB	L607
L652:
	SAL	DWORD [-608+EBP],5
	MOV	EAX,DWORD [-608+EBP]
	PUSH	DWORD [1058332+EAX]
	PUSH	DWORD [-612+EBP]
	PUSH	3932160
	CALL	_memsegFree4K
	ADD	ESP,12
	JMP	L631
L657:
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [-600+EBP]
	MOV	EDI,8
	CALL	_consNewLine
	MOV	DWORD [-600+EBP],EAX
	POP	EAX
	POP	EDX
	JMP	L593
L596:
	PUSH	1
	PUSH	LC1
	PUSH	0
	PUSH	7
	PUSH	DWORD [-600+EBP]
	PUSH	EDI
	ADD	EDI,8
	PUSH	DWORD [8+EBP]
	CALL	_putFont8AscSheet
	ADD	ESP,28
	CMP	EDI,248
	JE	L668
L599:
	LEA	EAX,DWORD [-8+EDI]
	AND	EAX,31
	JNE	L596
	JMP	L593
L668:
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [-600+EBP]
	MOV	EDI,8
	CALL	_consNewLine
	POP	ECX
	MOV	DWORD [-600+EBP],EAX
	POP	ESI
	JMP	L599
L630:
	PUSH	14
	PUSH	LC8
	PUSH	0
	PUSH	7
	PUSH	DWORD [-600+EBP]
	PUSH	8
	PUSH	DWORD [8+EBP]
	CALL	_putFont8AscSheet
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [-600+EBP]
	CALL	_consNewLine
	ADD	ESP,36
	MOV	DWORD [-600+EBP],EAX
	JMP	L631
L667:
	MOV	EDI,1
	JMP	L581
L666:
	CMP	EBX,8
	JG	L572
	MOV	EBX,8
	JMP	L569
L561:
	CLD
	LEA	ESI,DWORD [-588+EBP]
	MOV	EDI,LC9
	MOV	ECX,7
	REPE
	CMPSB
	JNE	L610
	XOR	EBX,EBX
L615:
	MOV	BYTE [-556+EBP+EBX*1],32
	INC	EBX
	CMP	EBX,10
	JLE	L615
	MOV	BYTE [-556+EBP],67
	MOV	BYTE [-555+EBP],76
	MOV	BYTE [-554+EBP],73
	MOV	BYTE [-553+EBP],72
	MOV	BYTE [-552+EBP],76
	MOV	BYTE [-551+EBP],84
	MOV	BYTE [-548+EBP],72
	MOV	BYTE [-547+EBP],82
	MOV	BYTE [-546+EBP],66
	MOV	DWORD [-608+EBP],0
	XOR	ESI,ESI
L629:
	CMP	BYTE [1058304+ESI],0
	JE	L617
	XOR	EDI,EDI
	TEST	BYTE [1058315+ESI],24
	JNE	L621
	XOR	EBX,EBX
	LEA	ECX,DWORD [1058304+ESI]
L627:
	MOVZX	EDX,BYTE [ECX]
	MOVSX	EAX,BYTE [-556+EBP+EBX*1]
	CMP	EDX,EAX
	JNE	L669
	INC	EBX
	INC	ECX
	CMP	EBX,10
	JLE	L627
L621:
	MOV	EDX,EDI
	DEC	DL
	JNE	L617
	INC	DWORD [-608+EBP]
	ADD	ESI,32
	CMP	DWORD [-608+EBP],243
	JLE	L629
L617:
	CMP	DWORD [-608+EBP],223
	JG	L630
	MOV	EBX,DWORD [-608+EBP]
	SAL	EBX,5
	CMP	BYTE [1058304+EBX],0
	JE	L630
	PUSH	DWORD [1058332+EBX]
	PUSH	3932160
	CALL	_memsegAlloc4K
	PUSH	1064448
	PUSH	DWORD [-616+EBP]
	PUSH	EAX
	MOV	DWORD [-612+EBP],EAX
	PUSH	DWORD [1058332+EBX]
	MOVZX	EAX,WORD [1058330+EBX]
	PUSH	EAX
	CALL	_loadFile
	PUSH	16538
	PUSH	DWORD [-612+EBP]
	MOV	EAX,DWORD [1058332+EBX]
	DEC	EAX
	PUSH	EAX
	PUSH	2563928
	CALL	_setSegmdesc
	ADD	ESP,44
	PUSH	8024
	PUSH	0
	CALL	_farJmp
	PUSH	DWORD [1058332+EBX]
	PUSH	DWORD [-612+EBP]
	PUSH	3932160
	CALL	_memsegFree4K
	ADD	ESP,20
	JMP	L631
L669:
	MOV	EDI,1
	JMP	L621
L610:
	CMP	BYTE [-588+EBP],0
	JE	L528
	PUSH	17
	PUSH	LC10
	PUSH	0
	PUSH	7
	PUSH	DWORD [-600+EBP]
	PUSH	8
	PUSH	DWORD [8+EBP]
	CALL	_putFont8AscSheet
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [-600+EBP]
	CALL	_consNewLine
	ADD	ESP,36
	PUSH	DWORD [8+EBP]
	MOV	DWORD [-600+EBP],EAX
	PUSH	EAX
	JMP	L658
L664:
	CMP	EDI,16
	JLE	L522
	PUSH	1
	PUSH	LC1
	PUSH	0
	PUSH	7
	PUSH	DWORD [-600+EBP]
	PUSH	EDI
	SUB	EDI,8
	PUSH	DWORD [8+EBP]
	CALL	_putFont8AscSheet
	JMP	L659
L663:
	MOV	EAX,DWORD [-600+EBP]
	ADD	EAX,15
	PUSH	EAX
	LEA	EAX,DWORD [7+EDI]
	PUSH	EAX
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [-600+EBP]
	PUSH	EDI
	PUSH	0
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxFill8
	ADD	ESP,28
	MOV	DWORD [-604+EBP],-1
	JMP	L521
L662:
	MOV	DWORD [-604+EBP],7
	JMP	L520
L661:
	TEST	EBX,EBX
	JE	L516
	PUSH	0
	PUSH	ESI
	PUSH	DWORD [-592+EBP]
	CALL	_timerInit
	ADD	ESP,12
	CMP	DWORD [-604+EBP],0
	JS	L518
	MOV	DWORD [-604+EBP],7
L518:
	PUSH	50
	PUSH	DWORD [-592+EBP]
	CALL	_timerSetTime
	POP	EAX
	POP	EDX
	JMP	L515
L516:
	PUSH	1
	PUSH	ESI
	PUSH	DWORD [-592+EBP]
	CALL	_timerInit
	ADD	ESP,12
	CMP	DWORD [-604+EBP],0
	JS	L518
	MOV	DWORD [-604+EBP],0
	JMP	L518
L660:
	PUSH	DWORD [-596+EBP]
	CALL	_processSleep
	CALL	_io_sti
	POP	EBX
	JMP	L510
	GLOBAL	_readFat
_readFat:
	PUSH	EBP
	XOR	ECX,ECX
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	EDI,DWORD [8+EBP]
	MOV	ESI,DWORD [12+EBP]
	XOR	EBX,EBX
L675:
	MOVZX	EAX,BYTE [1+ECX+ESI*1]
	MOVZX	EDX,BYTE [ECX+ESI*1]
	SAL	EAX,8
	OR	EDX,EAX
	AND	EDX,4095
	MOV	DWORD [EDI+EBX*4],EDX
	MOV	AL,BYTE [1+ECX+ESI*1]
	MOVZX	EDX,BYTE [2+ECX+ESI*1]
	SHR	AL,4
	ADD	ECX,3
	SAL	EDX,4
	MOVZX	EAX,AL
	OR	EAX,EDX
	MOV	DWORD [4+EDI+EBX*4],EAX
	ADD	EBX,2
	CMP	EBX,2879
	JLE	L675
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_loadFile
_loadFile:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	ECX,DWORD [12+EBP]
	MOV	ESI,DWORD [8+EBP]
	MOV	EBX,DWORD [16+EBP]
	MOV	EDI,DWORD [24+EBP]
L679:
	XOR	EDX,EDX
	CMP	EDX,ECX
	JGE	L689
L686:
	MOV	EAX,ESI
	SAL	EAX,9
	ADD	EAX,EDX
	MOV	AL,BYTE [EAX+EDI*1]
	MOV	BYTE [EDX+EBX*1],AL
	INC	EDX
	CMP	EDX,ECX
	JL	L686
L689:
	CMP	ECX,512
	JLE	L678
	MOV	EAX,DWORD [20+EBP]
	SUB	ECX,512
	ADD	EBX,512
	MOV	ESI,DWORD [EAX+ESI*4]
	JMP	L679
L678:
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
[SECTION .data]
LC11:
	DB	"console",0x00
LC12:
	DB	"processA",0x00
LC13:
	DB	"Welcome to DickOS",0x00
LC14:
	DB	"(%3d, %3d)",0x00
LC16:
	DB	"[lcr %4d %4d]",0x00
LC15:
	DB	"%02X",0x00
[SECTION .text]
	GLOBAL	_Main
_Main:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	LEA	EBX,DWORD [-1004+EBP]
	SUB	ESP,1096
	MOV	DWORD [-1056+EBP],0
	MOV	DWORD [-1060+EBP],0
	MOV	DWORD [-1068+EBP],-1
	MOV	AL,BYTE [4081]
	SAR	AL,4
	MOV	EDX,EAX
	AND	EDX,7
	MOV	DWORD [-1064+EBP],EDX
	CALL	_initGdtit
	CALL	_init_pic
	CALL	_io_sti
	LEA	EAX,DWORD [-572+EBP]
	PUSH	0
	PUSH	EAX
	PUSH	128
	PUSH	EBX
	CALL	_QueueInit
	CALL	_initPit
	PUSH	256
	PUSH	EBX
	CALL	_initKeyboard
	LEA	EAX,DWORD [-716+EBP]
	PUSH	EAX
	PUSH	512
	PUSH	EBX
	CALL	_enableMouse
	ADD	ESP,36
	PUSH	248
	PUSH	33
	CALL	_io_out8
	PUSH	239
	PUSH	161
	CALL	_io_out8
	LEA	EAX,DWORD [-700+EBP]
	PUSH	0
	PUSH	EAX
	LEA	EAX,DWORD [-1036+EBP]
	PUSH	32
	PUSH	EAX
	CALL	_QueueInit
	ADD	ESP,32
	CALL	_timerAlloc
	PUSH	1
	PUSH	EBX
	MOV	DWORD [-1096+EBP],EAX
	PUSH	EAX
	CALL	_timerInit
	PUSH	50
	PUSH	DWORD [-1096+EBP]
	CALL	_timerSetTime
	PUSH	-1073741825
	PUSH	4194304
	CALL	_memtest
	PUSH	3932160
	MOV	DWORD [-1072+EBP],EAX
	CALL	_memsegInit
	ADD	ESP,32
	PUSH	647168
	PUSH	4096
	PUSH	3932160
	CALL	_memsegFree
	MOV	EAX,DWORD [-1072+EBP]
	SUB	EAX,4194304
	PUSH	EAX
	PUSH	4194304
	PUSH	3932160
	CALL	_memsegFree
	CALL	_init_palette
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	PUSH	3932160
	CALL	_shtctlInit
	ADD	ESP,40
	MOV	ESI,EAX
	PUSH	3932160
	CALL	_processInit
	PUSH	0
	PUSH	1
	PUSH	EAX
	MOV	DWORD [-1100+EBP],EAX
	MOV	DWORD [-980+EBP],EAX
	CALL	_processRun
	PUSH	ESI
	CALL	_sheetAlloc
	MOVSX	EDX,WORD [4086]
	MOV	DWORD [-1076+EBP],EAX
	MOVSX	EAX,WORD [4084]
	IMUL	EAX,EDX
	PUSH	EAX
	PUSH	3932160
	CALL	_memsegAlloc4K
	PUSH	-1
	MOV	EBX,EAX
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	EBX
	PUSH	DWORD [-1076+EBP]
	CALL	_sheetSetbuf
	ADD	ESP,48
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	EBX
	LEA	EBX,DWORD [-972+EBP]
	CALL	_init_GUI
	PUSH	ESI
	CALL	_sheetAlloc
	PUSH	42240
	PUSH	3932160
	MOV	DWORD [-1084+EBP],EAX
	CALL	_memsegAlloc4K
	PUSH	-1
	PUSH	165
	MOV	DWORD [-1092+EBP],EAX
	PUSH	256
	PUSH	EAX
	PUSH	DWORD [-1084+EBP]
	CALL	_sheetSetbuf
	ADD	ESP,44
	PUSH	0
	PUSH	LC11
	PUSH	165
	PUSH	256
	PUSH	DWORD [-1092+EBP]
	CALL	_makeWindow
	PUSH	0
	PUSH	128
	PUSH	240
	PUSH	28
	PUSH	8
	PUSH	DWORD [-1084+EBP]
	CALL	_makeTextBox
	ADD	ESP,44
	CALL	_processAlloc
	PUSH	65536
	PUSH	3932160
	MOV	DWORD [-1104+EBP],EAX
	CALL	_memsegAlloc4K
	MOV	EDX,DWORD [-1104+EBP]
	ADD	EAX,65524
	MOV	DWORD [100+EDX],EAX
	MOV	EDX,DWORD [-1084+EBP]
	MOV	DWORD [4+EAX],EDX
	MOV	EDX,DWORD [-1104+EBP]
	MOV	EAX,DWORD [100+EDX]
	MOV	EDX,DWORD [-1072+EBP]
	MOV	DWORD [8+EAX],EDX
	MOV	EAX,DWORD [-1104+EBP]
	MOV	DWORD [76+EAX],_consoleMain
	MOV	DWORD [116+EAX],8
	MOV	DWORD [120+EAX],16
	MOV	DWORD [124+EAX],8
	MOV	DWORD [128+EAX],8
	MOV	DWORD [132+EAX],8
	MOV	DWORD [136+EAX],8
	PUSH	2
	PUSH	2
	PUSH	EAX
	CALL	_processRun
	PUSH	ESI
	CALL	_sheetAlloc
	PUSH	8320
	PUSH	3932160
	MOV	EDI,EAX
	CALL	_memsegAlloc4K
	ADD	ESP,32
	PUSH	-1
	MOV	DWORD [-1088+EBP],EAX
	PUSH	52
	PUSH	144
	PUSH	EAX
	PUSH	EDI
	CALL	_sheetSetbuf
	PUSH	1
	PUSH	LC12
	PUSH	52
	PUSH	144
	PUSH	DWORD [-1088+EBP]
	CALL	_makeWindow
	ADD	ESP,40
	PUSH	7
	PUSH	16
	PUSH	128
	PUSH	28
	PUSH	8
	PUSH	EDI
	CALL	_makeTextBox
	PUSH	ESI
	MOV	DWORD [-1048+EBP],8
	MOV	DWORD [-1052+EBP],7
	CALL	_sheetAlloc
	PUSH	14
	PUSH	16
	PUSH	16
	MOV	DWORD [-1080+EBP],EAX
	PUSH	EBX
	PUSH	EAX
	CALL	_sheetSetbuf
	ADD	ESP,48
	PUSH	14
	PUSH	EBX
	MOV	EBX,2
	CALL	_initMouseCursor8
	MOVSX	EAX,WORD [4084]
	LEA	ECX,DWORD [-16+EAX]
	MOV	EAX,ECX
	CDQ
	IDIV	EBX
	MOV	DWORD [-1040+EBP],EAX
	MOVSX	EAX,WORD [4086]
	PUSH	0
	LEA	ECX,DWORD [-44+EAX]
	PUSH	0
	MOV	EAX,ECX
	CDQ
	IDIV	EBX
	PUSH	DWORD [-1076+EBP]
	MOV	DWORD [-1044+EBP],EAX
	LEA	EBX,DWORD [-60+EBP]
	CALL	_sheetSlide
	PUSH	64
	PUSH	168
	PUSH	DWORD [-1084+EBP]
	CALL	_sheetSlide
	ADD	ESP,32
	PUSH	64
	PUSH	8
	PUSH	EDI
	CALL	_sheetSlide
	PUSH	DWORD [-1044+EBP]
	PUSH	DWORD [-1040+EBP]
	PUSH	DWORD [-1080+EBP]
	CALL	_sheetSlide
	PUSH	0
	PUSH	DWORD [-1076+EBP]
	CALL	_sheetUpdown
	ADD	ESP,32
	PUSH	1
	PUSH	DWORD [-1084+EBP]
	CALL	_sheetUpdown
	PUSH	2
	PUSH	EDI
	CALL	_sheetUpdown
	PUSH	3
	PUSH	DWORD [-1080+EBP]
	CALL	_sheetUpdown
	PUSH	17
	PUSH	LC13
	PUSH	14
	PUSH	7
	PUSH	32
	PUSH	0
	PUSH	DWORD [-1076+EBP]
	CALL	_putFont8AscSheet
	ADD	ESP,52
	PUSH	DWORD [-1044+EBP]
	PUSH	DWORD [-1040+EBP]
	PUSH	LC14
	PUSH	EBX
	CALL	_sprintf
	PUSH	10
	PUSH	EBX
	PUSH	14
	PUSH	7
	PUSH	0
	PUSH	0
	PUSH	DWORD [-1076+EBP]
	CALL	_putFont8AscSheet
	LEA	EDX,DWORD [-1036+EBP]
	ADD	ESP,44
	PUSH	237
	PUSH	EDX
	CALL	_QueuePush
	LEA	EAX,DWORD [-1036+EBP]
	PUSH	DWORD [-1064+EBP]
	PUSH	EAX
	CALL	_QueuePush
	ADD	ESP,16
L691:
	LEA	EBX,DWORD [-1036+EBP]
	PUSH	EBX
	CALL	_QueueSize
	POP	EDX
	TEST	EAX,EAX
	JLE	L694
	CMP	DWORD [-1068+EBP],0
	JS	L748
L694:
	LEA	EBX,DWORD [-1004+EBP]
	CALL	_io_cli
	PUSH	EBX
	CALL	_QueueSize
	POP	ESI
	TEST	EAX,EAX
	JE	L749
	PUSH	EBX
	CALL	_QueuePop
	MOV	ESI,EAX
	CALL	_io_sti
	POP	EDX
	LEA	EAX,DWORD [-256+ESI]
	CMP	EAX,255
	JBE	L750
	LEA	EAX,DWORD [-512+ESI]
	CMP	EAX,255
	JBE	L751
	CMP	ESI,1
	JG	L691
	DEC	ESI
	JE	L752
	PUSH	1
	PUSH	EBX
	PUSH	DWORD [-1096+EBP]
	CALL	_timerInit
	ADD	ESP,12
	CMP	DWORD [-1052+EBP],0
	JS	L743
	MOV	DWORD [-1052+EBP],7
L743:
	PUSH	50
	PUSH	DWORD [-1096+EBP]
	CALL	_timerSetTime
	POP	ECX
	POP	EBX
	CMP	DWORD [-1052+EBP],0
	JS	L691
	MOV	EAX,DWORD [-1048+EBP]
	PUSH	43
	ADD	EAX,7
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1048+EBP]
	MOVZX	EAX,BYTE [-1052+EBP]
	PUSH	EAX
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [EDI]
	CALL	_boxFill8
	MOV	EAX,DWORD [-1048+EBP]
	PUSH	44
	ADD	EAX,8
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1048+EBP]
	PUSH	EDI
	CALL	_sheetRefresh
	ADD	ESP,48
	JMP	L691
L752:
	PUSH	0
	PUSH	EBX
	PUSH	DWORD [-1096+EBP]
	CALL	_timerInit
	ADD	ESP,12
	CMP	DWORD [-1052+EBP],0
	JS	L743
	MOV	DWORD [-1052+EBP],0
	JMP	L743
L751:
	MOV	EDX,ESI
	MOVZX	EAX,DL
	PUSH	EAX
	LEA	EAX,DWORD [-716+EBP]
	PUSH	EAX
	CALL	_mouseDecode
	POP	ESI
	POP	EDX
	TEST	EAX,EAX
	JE	L691
	PUSH	DWORD [-708+EBP]
	PUSH	DWORD [-712+EBP]
	PUSH	LC16
	LEA	EBX,DWORD [-60+EBP]
	PUSH	EBX
	CALL	_sprintf
	ADD	ESP,16
	TEST	DWORD [-704+EBP],1
	JE	L732
	MOV	EAX,DWORD [-1044+EBP]
	SUB	EAX,8
	PUSH	EAX
	MOV	EAX,DWORD [-1040+EBP]
	SUB	EAX,80
	PUSH	EAX
	PUSH	EDI
	MOV	BYTE [-59+EBP],76
	CALL	_sheetSlide
	ADD	ESP,12
L732:
	MOV	EAX,DWORD [-704+EBP]
	TEST	EAX,2
	JE	L733
	MOV	BYTE [-57+EBP],82
L733:
	AND	EAX,4
	JE	L734
	MOV	BYTE [-58+EBP],67
L734:
	PUSH	15
	PUSH	EBX
	PUSH	14
	PUSH	7
	PUSH	16
	PUSH	32
	PUSH	DWORD [-1076+EBP]
	CALL	_putFont8AscSheet
	MOV	EDX,DWORD [-712+EBP]
	MOV	EAX,DWORD [-708+EBP]
	ADD	ESP,28
	ADD	DWORD [-1044+EBP],EAX
	ADD	DWORD [-1040+EBP],EDX
	JS	L753
L735:
	CMP	DWORD [-1044+EBP],0
	JS	L754
L736:
	MOVSX	EAX,WORD [4084]
	DEC	EAX
	CMP	DWORD [-1040+EBP],EAX
	JLE	L737
	MOV	DWORD [-1040+EBP],EAX
L737:
	MOVSX	EAX,WORD [4086]
	DEC	EAX
	CMP	DWORD [-1044+EBP],EAX
	JLE	L738
	MOV	DWORD [-1044+EBP],EAX
L738:
	PUSH	DWORD [-1044+EBP]
	PUSH	DWORD [-1040+EBP]
	PUSH	LC14
	PUSH	EBX
	CALL	_sprintf
	PUSH	10
	PUSH	EBX
	PUSH	14
	PUSH	7
	PUSH	0
	PUSH	0
	PUSH	DWORD [-1076+EBP]
	CALL	_putFont8AscSheet
	ADD	ESP,44
	PUSH	DWORD [-1044+EBP]
	PUSH	DWORD [-1040+EBP]
	PUSH	DWORD [-1080+EBP]
	CALL	_sheetSlide
	ADD	ESP,12
	JMP	L691
L754:
	MOV	DWORD [-1044+EBP],0
	JMP	L736
L753:
	MOV	DWORD [-1040+EBP],0
	JMP	L735
L750:
	PUSH	EAX
	LEA	EBX,DWORD [-60+EBP]
	PUSH	LC15
	PUSH	EBX
	CALL	_sprintf
	PUSH	2
	PUSH	EBX
	PUSH	14
	PUSH	7
	PUSH	16
	PUSH	0
	PUSH	DWORD [-1076+EBP]
	CALL	_putFont8AscSheet
	ADD	ESP,40
	CMP	ESI,383
	JG	L698
	CMP	DWORD [-1056+EBP],0
	JNE	L699
	MOV	AL,BYTE [_keyboardTable0-256+ESI]
L747:
	MOV	BYTE [-60+EBP],AL
L701:
	MOV	DL,BYTE [-60+EBP]
	LEA	EAX,DWORD [-65+EDX]
	CMP	AL,25
	JA	L702
	TEST	DWORD [-1064+EBP],4
	JNE	L746
	CMP	DWORD [-1056+EBP],0
	JE	L704
L702:
	MOV	AL,BYTE [-60+EBP]
	TEST	AL,AL
	JE	L706
	CMP	DWORD [-1060+EBP],0
	JNE	L707
	CMP	DWORD [-1048+EBP],127
	JG	L706
	PUSH	1
	LEA	EAX,DWORD [-60+EBP]
	PUSH	EAX
	PUSH	7
	PUSH	0
	PUSH	28
	PUSH	DWORD [-1048+EBP]
	PUSH	EDI
	MOV	BYTE [-59+EBP],0
	CALL	_putFont8AscSheet
	ADD	ESP,28
	ADD	DWORD [-1048+EBP],8
L706:
	CMP	ESI,270
	JE	L755
L710:
	CMP	ESI,271
	JE	L756
L714:
	CMP	ESI,298
	JE	L757
L717:
	CMP	ESI,310
	JE	L758
L718:
	CMP	ESI,426
	JE	L759
L719:
	CMP	ESI,438
	JE	L760
L720:
	CMP	ESI,314
	JE	L761
L721:
	CMP	ESI,325
	JE	L762
L722:
	CMP	ESI,326
	JE	L763
L723:
	CMP	ESI,506
	JE	L764
L724:
	CMP	ESI,510
	JE	L765
L725:
	CMP	ESI,284
	JE	L766
L726:
	CMP	DWORD [-1052+EBP],0
	JLE	L728
	MOV	EAX,DWORD [-1048+EBP]
	PUSH	43
	ADD	EAX,7
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1048+EBP]
	MOVZX	EAX,BYTE [-1052+EBP]
	PUSH	EAX
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [EDI]
	CALL	_boxFill8
	ADD	ESP,28
L728:
	MOV	EAX,DWORD [-1048+EBP]
	PUSH	44
	ADD	EAX,8
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1048+EBP]
	PUSH	EDI
	CALL	_sheetRefresh
	ADD	ESP,20
	JMP	L691
L766:
	CMP	DWORD [-1060+EBP],0
	JE	L726
	MOV	EAX,DWORD [-1104+EBP]
	PUSH	266
	ADD	EAX,16
	PUSH	EAX
	CALL	_QueuePush
	POP	ECX
	POP	EBX
	JMP	L726
L765:
	CALL	_waitKeyboardControllerReady
	PUSH	DWORD [-1068+EBP]
	PUSH	96
	CALL	_io_out8
	POP	EAX
	POP	EDX
	JMP	L725
L764:
	MOV	DWORD [-1068+EBP],-1
	JMP	L724
L763:
	PUSH	237
	LEA	EBX,DWORD [-1036+EBP]
	PUSH	EBX
	XOR	DWORD [-1064+EBP],1
	CALL	_QueuePush
	PUSH	DWORD [-1064+EBP]
	PUSH	EBX
	CALL	_QueuePush
	ADD	ESP,16
	JMP	L723
L762:
	PUSH	237
	LEA	EBX,DWORD [-1036+EBP]
	PUSH	EBX
	XOR	DWORD [-1064+EBP],2
	CALL	_QueuePush
	PUSH	DWORD [-1064+EBP]
	PUSH	EBX
	CALL	_QueuePush
	ADD	ESP,16
	JMP	L722
L761:
	PUSH	237
	LEA	EBX,DWORD [-1036+EBP]
	PUSH	EBX
	XOR	DWORD [-1064+EBP],4
	CALL	_QueuePush
	PUSH	DWORD [-1064+EBP]
	PUSH	EBX
	CALL	_QueuePush
	ADD	ESP,16
	JMP	L721
L760:
	AND	DWORD [-1056+EBP],-3
	JMP	L720
L759:
	AND	DWORD [-1056+EBP],-2
	JMP	L719
L758:
	OR	DWORD [-1056+EBP],2
	JMP	L718
L757:
	OR	DWORD [-1056+EBP],1
	JMP	L717
L756:
	CMP	DWORD [-1060+EBP],0
	JNE	L715
	PUSH	0
	PUSH	LC12
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [-1088+EBP]
	MOV	DWORD [-1060+EBP],1
	CALL	_makeWindowTitle
	MOV	EDX,DWORD [-1084+EBP]
	PUSH	1
	PUSH	LC11
	PUSH	DWORD [4+EDX]
	PUSH	DWORD [-1092+EBP]
	CALL	_makeWindowTitle
	MOV	EAX,DWORD [-1048+EBP]
	ADD	ESP,32
	ADD	EAX,7
	MOV	DWORD [-1052+EBP],-1
	PUSH	43
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1048+EBP]
	PUSH	7
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [EDI]
	CALL	_boxFill8
	MOV	EAX,DWORD [-1104+EBP]
	PUSH	2
	ADD	EAX,16
	PUSH	EAX
	CALL	_QueuePush
	ADD	ESP,36
L716:
	PUSH	21
	PUSH	DWORD [4+EDI]
	PUSH	0
	PUSH	0
	PUSH	EDI
	CALL	_sheetRefresh
	MOV	EDX,DWORD [-1084+EBP]
	PUSH	21
	PUSH	DWORD [4+EDX]
	PUSH	0
	PUSH	0
	PUSH	EDX
	CALL	_sheetRefresh
	ADD	ESP,40
	JMP	L714
L715:
	PUSH	1
	PUSH	LC12
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [-1088+EBP]
	MOV	DWORD [-1060+EBP],0
	CALL	_makeWindowTitle
	MOV	EAX,DWORD [-1084+EBP]
	PUSH	0
	PUSH	LC11
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [-1092+EBP]
	CALL	_makeWindowTitle
	MOV	EAX,DWORD [-1104+EBP]
	ADD	ESP,32
	ADD	EAX,16
	MOV	DWORD [-1052+EBP],0
	PUSH	3
	PUSH	EAX
	CALL	_QueuePush
	POP	ECX
	POP	EBX
	JMP	L716
L755:
	CMP	DWORD [-1060+EBP],0
	JNE	L711
	CMP	DWORD [-1048+EBP],8
	JLE	L710
	PUSH	1
	PUSH	LC1
	PUSH	7
	PUSH	0
	PUSH	28
	PUSH	DWORD [-1048+EBP]
	PUSH	EDI
	CALL	_putFont8AscSheet
	ADD	ESP,28
	SUB	DWORD [-1048+EBP],8
	JMP	L710
L711:
	MOV	EAX,DWORD [-1104+EBP]
	PUSH	264
	ADD	EAX,16
	PUSH	EAX
	CALL	_QueuePush
	POP	EAX
	POP	EDX
	JMP	L710
L707:
	MOVSX	EAX,AL
	ADD	EAX,256
	PUSH	EAX
	MOV	EAX,DWORD [-1104+EBP]
	ADD	EAX,16
	PUSH	EAX
	CALL	_QueuePush
	POP	ECX
	POP	EBX
	JMP	L706
L704:
	LEA	EAX,DWORD [32+EDX]
	MOV	BYTE [-60+EBP],AL
	JMP	L702
L746:
	CMP	DWORD [-1056+EBP],0
	JE	L702
	JMP	L704
L699:
	MOV	AL,BYTE [_keyboardTable1-256+ESI]
	JMP	L747
L698:
	MOV	BYTE [-60+EBP],0
	JMP	L701
L749:
	PUSH	DWORD [-1100+EBP]
	CALL	_processSleep
	CALL	_io_sti
	POP	ECX
	JMP	L691
L748:
	PUSH	EBX
	CALL	_QueuePop
	MOV	DWORD [-1068+EBP],EAX
	CALL	_waitKeyboardControllerReady
	PUSH	DWORD [-1068+EBP]
	PUSH	96
	CALL	_io_out8
	ADD	ESP,12
	JMP	L694
	GLOBAL	_keybuf
[SECTION .data]
	ALIGNB	4
_keybuf:
	RESB	4
	GLOBAL	_keyData0
[SECTION .data]
	ALIGNB	4
_keyData0:
	RESB	4
	GLOBAL	_mousebuf
[SECTION .data]
	ALIGNB	4
_mousebuf:
	RESB	4
	GLOBAL	_mouseData0
[SECTION .data]
	ALIGNB	4
_mouseData0:
	RESB	4
	GLOBAL	_timerctl
[SECTION .data]
	ALIGNB	16
_timerctl:
	RESB	10012
	GLOBAL	_processctl
[SECTION .data]
	ALIGNB	4
_processctl:
	RESB	4
	GLOBAL	_mpTimer
[SECTION .data]
	ALIGNB	4
_mpTimer:
	RESB	4
