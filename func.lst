     1 00000000                                 ; func
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; 制作目标文件的模式
     5 00000000                                 [INSTRSET "i486p"]				
     6 00000000                                 [BITS 32]						; 制作32位模式
     7 00000000                                 
     8 00000000                                 ; 制作目标文件的信息
     9 00000000                                 
    10 00000000                                 [FILE "func.nas"]				; 源文件名
    11 00000000                                 		GLOBAL _io_hlt, _io_cli, _io_sti, _io_stihlt	; 程序中包含的函数名
    12 00000000                                 		GLOBAL _io_in8, _io_in16, _io_in32
    13 00000000                                 		GLOBAL _io_out8, _io_out16, _io_out32
    14 00000000                                 		GLOBAL _io_load_eflags, _io_store_eflags
    15 00000000                                 		GLOBAL _loadGdtr, _loadIdtr
    16 00000000                                 		GLOBAL _loadCr0, _storeCr0
    17 00000000                                 		GLOBAL	_asm_interruptHandler21, _asm_interruptHandler27, _asm_interruptHandler2c
    18 00000000                                 		EXTERN	_interruptHandler21, _interruptHandler27, _interruptHandler2c
    19 00000000                                 ; 实际的函数
    20 00000000                                 
    21                                          [SECTION .text]					; 目标文件中写了这些后再写程序
    22 00000000                                 
    23 00000000                                 _io_hlt:						; void io_hlt();
    24 00000000 F4                              		HLT
    25 00000001 C3                              		RET
    26 00000002                                 
    27 00000002                                 _io_cli:						; void io_cli();
    28 00000002 FA                              		CLI
    29 00000003 C3                              		RET
    30 00000004                                 
    31 00000004                                 _io_sti:						; void io_sti();
    32 00000004 FB                              		STI
    33 00000005 C3                              		RET
    34 00000006                                 		
    35 00000006                                 _io_stihlt:						; void io_stihlt();
    36 00000006 FB                              		STI
    37 00000007 F4                              		HLT
    38 00000008 C3                              		RET
    39 00000009                                 		
    40 00000009                                 _io_in8:						; void io_in8(int port);
    41 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; 端口
    42 0000000D B8 00000000                     		MOV		EAX,0
    43 00000012 EC                              		IN		AL,DX			; 从DX端口读取一字节数据到AL
    44 00000013 C3                              		RET
    45 00000014                                 		
    46 00000014                                 _io_in16:						; void io_in16(int port);
    47 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; 端口
    48 00000018 B8 00000000                     		MOV		EAX,0
    49 0000001D 66 ED                           		IN		AX,DX			; 从DX端口读取一字节数据到AX
    50 0000001F C3                              		RET
    51 00000020                                 		
    52 00000020                                 _io_in32:						; void io_in8(int port);
    53 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; 端口
    54 00000024 ED                              		IN		EAX,DX			; 从DX端口读取一字节数据到EAX
    55 00000025 C3                              		RET
    56 00000026                                 
    57 00000026                                 _io_out8:						; void io_out8(int port, int data);
    58 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; 端口port
    59 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; 数据data
    60 0000002E EE                              		OUT		DX,AL			; 将AL值写入端口
    61 0000002F C3                              		RET
    62 00000030                                 		
    63 00000030                                 _io_out16:						; void io_out16(int port, int data);
    64 00000030 8B 54 24 04                     		MOV 	EDX,[ESP+4]		; 端口port
    65 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; 数据data
    66 00000038 66 EF                           		OUT		DX,AX			; 将AL值写入端口
    67 0000003A C3                              		RET
    68 0000003B                                 		
    69 0000003B                                 _io_out32:						; void io_out32(int port, int data);
    70 0000003B 8B 54 24 04                     		MOV 	EDX,[ESP+4]		; 端口port
    71 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; 数据data
    72 00000043 EF                              		OUT		DX,EAX			; 将AL值写入端口
    73 00000044 C3                              		RET
    74 00000045                                 		
    75 00000045                                 _io_load_eflags:				; int io_load_eflags(void); 读取eflags
    76 00000045 9C                              		PUSHFD					; PUSH EFLAGS
    77 00000046 58                              		POP		EAX
    78 00000047 C3                              		RET
    79 00000048                                 
    80 00000048                                 _io_store_eflags:				; void io_store_eflags(int eflags); 写入eflags
    81 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    82 0000004C 50                              		PUSH		EAX
    83 0000004D 9D                              		POPFD					; POP EFLAGS
    84 0000004E C3                              		RET
    85 0000004F                                 		
    86 0000004F                                 _loadGdtr:						; void loadGdtr(int limit, int addr); 将指定段的上限和地址赋值给寄存器GDTR
    87 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]
    88 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    89 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    90 0000005E C3                              		RET
    91 0000005F                                 		
    92 0000005F                                 _loadIdtr:						; void loadIdtr(int limit, int  addr);
    93 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]
    94 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
    95 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
    96 0000006E C3                              		RET
    97 0000006F                                 		
    98 0000006F                                 _loadCr0:						; int loadCr0; 读取cr0寄存器
    99 0000006F 0F 20 C0                        		MOV		EAX,CR0
   100 00000072 C3                              		RET
   101 00000073                                 		
   102 00000073                                 _storeCr0:						; void storeCr0(int cr0) 写入cr0寄存器
   103 00000073 8B 44 24 04                     		MOV		EAX,[ESP+4]
   104 00000077 0F 22 C0                        		MOV		CR0,EAX
   105 0000007A C3                              		RET
   106 0000007B                                 		
   107 0000007B                                 _asm_interruptHandler21:
   108 0000007B 06                              		PUSH	ES
   109 0000007C 1E                              		PUSH	DS
   110 0000007D 60                              		PUSHAD
   111 0000007E 89 E0                           		MOV		EAX,ESP
   112 00000080 50                              		PUSH	EAX
   113 00000081 66 8C D0                        		MOV		AX,SS
   114 00000084 8E D8                           		MOV		DS,AX
   115 00000086 8E C0                           		MOV		ES,AX
   116 00000088 E8 [00000000]                   		CALL	_interruptHandler21
   117 0000008D 58                              		POP		EAX
   118 0000008E 61                              		POPAD
   119 0000008F 1F                              		POP		DS
   120 00000090 07                              		POP		ES
   121 00000091 CF                              		IRETD
   122 00000092                                 
   123 00000092                                 _asm_interruptHandler27:
   124 00000092 06                              		PUSH	ES
   125 00000093 1E                              		PUSH	DS
   126 00000094 60                              		PUSHAD
   127 00000095 89 E0                           		MOV		EAX,ESP
   128 00000097 50                              		PUSH	EAX
   129 00000098 66 8C D0                        		MOV		AX,SS
   130 0000009B 8E D8                           		MOV		DS,AX
   131 0000009D 8E C0                           		MOV		ES,AX
   132 0000009F E8 [00000000]                   		CALL	_interruptHandler27
   133 000000A4 58                              		POP		EAX
   134 000000A5 61                              		POPAD
   135 000000A6 1F                              		POP		DS
   136 000000A7 07                              		POP		ES
   137 000000A8 CF                              		IRETD
   138 000000A9                                 
   139 000000A9                                 _asm_interruptHandler2c:
   140 000000A9 06                              		PUSH	ES
   141 000000AA 1E                              		PUSH	DS
   142 000000AB 60                              		PUSHAD
   143 000000AC 89 E0                           		MOV		EAX,ESP
   144 000000AE 50                              		PUSH	EAX
   145 000000AF 66 8C D0                        		MOV		AX,SS
   146 000000B2 8E D8                           		MOV		DS,AX
   147 000000B4 8E C0                           		MOV		ES,AX
   148 000000B6 E8 [00000000]                   		CALL	_interruptHandler2c
   149 000000BB 58                              		POP		EAX
   150 000000BC 61                              		POPAD
   151 000000BD 1F                              		POP		DS
   152 000000BE 07                              		POP		ES
   153 000000BF CF                              		IRETD
