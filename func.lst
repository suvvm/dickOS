     1 00000000                                 ; func
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; 制作目标文件的模式
     5 00000000                                 [INSTRSET "i486p"]				
     6 00000000                                 [BITS 32]						; 制作32位模式
     7 00000000                                 
     8 00000000                                 ; 制作目标文件的信息
     9 00000000                                 
    10 00000000                                 [FILE "func.nas"]				; 源文件名
    11 00000000                                 		GLOBAL _io_hlt, _io_cli, _io_sti, _io_stihlt	; 程序中包含的函数名
    12 00000000                                 		GLOBAL _io_in8, _io_in16, _io_in32
    13 00000000                                 		GLOBAL _io_out8, _io_out16, _io_out32
    14 00000000                                 		GLOBAL _io_load_eflags, _io_store_eflags
    15 00000000                                 		GLOBAL _loadGdtr, _loadIdtr
    16 00000000                                 		GLOBAL	_asm_interruptHandler21, _asm_interruptHandler27, _asm_interruptHandler2c
    17 00000000                                 		EXTERN	_interruptHandler21, _interruptHandler27, _interruptHandler2c
    18 00000000                                 ; 实际的函数
    19 00000000                                 
    20                                          [SECTION .text]					; 目标文件中写了这些后再写程序
    21 00000000                                 
    22 00000000                                 _io_hlt:						; void io_hlt();
    23 00000000 F4                              		HLT
    24 00000001 C3                              		RET
    25 00000002                                 
    26 00000002                                 _io_cli:						; void io_cli();
    27 00000002 FA                              		CLI
    28 00000003 C3                              		RET
    29 00000004                                 
    30 00000004                                 _io_sti:						; void io_sti();
    31 00000004 FB                              		STI
    32 00000005 C3                              		RET
    33 00000006                                 		
    34 00000006                                 _io_stihlt:						; void io_stihlt();
    35 00000006 FB                              		STI
    36 00000007 F4                              		HLT
    37 00000008 C3                              		RET
    38 00000009                                 		
    39 00000009                                 _io_in8:						; void io_in8(int port);
    40 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; 端口
    41 0000000D B8 00000000                     		MOV		EAX,0
    42 00000012 EC                              		IN		AL,DX			; 从DX端口读取一字节数据到AL
    43 00000013 C3                              		RET
    44 00000014                                 		
    45 00000014                                 _io_in16:						; void io_in16(int port);
    46 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; 端口
    47 00000018 B8 00000000                     		MOV		EAX,0
    48 0000001D 66 ED                           		IN		AX,DX			; 从DX端口读取一字节数据到AX
    49 0000001F C3                              		RET
    50 00000020                                 		
    51 00000020                                 _io_in32:						; void io_in8(int port);
    52 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; 端口
    53 00000024 ED                              		IN		EAX,DX			; 从DX端口读取一字节数据到EAX
    54 00000025 C3                              		RET
    55 00000026                                 
    56 00000026                                 _io_out8:						; void io_out8(int port, int data);
    57 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; 端口port
    58 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; 数据data
    59 0000002E EE                              		OUT		DX,AL			; 将AL值写入端口
    60 0000002F C3                              		RET
    61 00000030                                 		
    62 00000030                                 _io_out16:						; void io_out16(int port, int data);
    63 00000030 8B 54 24 04                     		MOV 	EDX,[ESP+4]		; 端口port
    64 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; 数据data
    65 00000038 66 EF                           		OUT		DX,AX			; 将AL值写入端口
    66 0000003A C3                              		RET
    67 0000003B                                 		
    68 0000003B                                 _io_out32:						; void io_out32(int port, int data);
    69 0000003B 8B 54 24 04                     		MOV 	EDX,[ESP+4]		; 端口port
    70 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; 数据data
    71 00000043 EF                              		OUT		DX,EAX			; 将AL值写入端口
    72 00000044 C3                              		RET
    73 00000045                                 		
    74 00000045                                 _io_load_eflags:				; int io_load_eflags(void);
    75 00000045 9C                              		PUSHFD					; PUSH EFLAGS
    76 00000046 58                              		POP		EAX
    77 00000047 C3                              		RET
    78 00000048                                 
    79 00000048                                 _io_store_eflags:				; void io_store_eflags(int eflags);
    80 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    81 0000004C 50                              		PUSH		EAX
    82 0000004D 9D                              		POPFD					; POP EFLAGS
    83 0000004E C3                              		RET
    84 0000004F                                 		
    85 0000004F                                 _loadGdtr:						; void loadGdtr(int limit, int addr); 将指定段的上限和地址赋值给寄存器GDTR
    86 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]
    87 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    88 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    89 0000005E C3                              		RET
    90 0000005F                                 		
    91 0000005F                                 _loadIdtr:						; void loadIdtr(int limit, int  addr);
    92 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]
    93 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
    94 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
    95 0000006E C3                              		RET
    96 0000006F                                 
    97 0000006F                                 _asm_interruptHandler21:
    98 0000006F 06                              		PUSH	ES
    99 00000070 1E                              		PUSH	DS
   100 00000071 60                              		PUSHAD
   101 00000072 89 E0                           		MOV		EAX,ESP
   102 00000074 50                              		PUSH	EAX
   103 00000075 66 8C D0                        		MOV		AX,SS
   104 00000078 8E D8                           		MOV		DS,AX
   105 0000007A 8E C0                           		MOV		ES,AX
   106 0000007C E8 [00000000]                   		CALL	_interruptHandler21
   107 00000081 58                              		POP		EAX
   108 00000082 61                              		POPAD
   109 00000083 1F                              		POP		DS
   110 00000084 07                              		POP		ES
   111 00000085 CF                              		IRETD
   112 00000086                                 
   113 00000086                                 _asm_interruptHandler27:
   114 00000086 06                              		PUSH	ES
   115 00000087 1E                              		PUSH	DS
   116 00000088 60                              		PUSHAD
   117 00000089 89 E0                           		MOV		EAX,ESP
   118 0000008B 50                              		PUSH	EAX
   119 0000008C 66 8C D0                        		MOV		AX,SS
   120 0000008F 8E D8                           		MOV		DS,AX
   121 00000091 8E C0                           		MOV		ES,AX
   122 00000093 E8 [00000000]                   		CALL	_interruptHandler27
   123 00000098 58                              		POP		EAX
   124 00000099 61                              		POPAD
   125 0000009A 1F                              		POP		DS
   126 0000009B 07                              		POP		ES
   127 0000009C CF                              		IRETD
   128 0000009D                                 
   129 0000009D                                 _asm_interruptHandler2c:
   130 0000009D 06                              		PUSH	ES
   131 0000009E 1E                              		PUSH	DS
   132 0000009F 60                              		PUSHAD
   133 000000A0 89 E0                           		MOV		EAX,ESP
   134 000000A2 50                              		PUSH	EAX
   135 000000A3 66 8C D0                        		MOV		AX,SS
   136 000000A6 8E D8                           		MOV		DS,AX
   137 000000A8 8E C0                           		MOV		ES,AX
   138 000000AA E8 [00000000]                   		CALL	_interruptHandler2c
   139 000000AF 58                              		POP		EAX
   140 000000B0 61                              		POPAD
   141 000000B1 1F                              		POP		DS
   142 000000B2 07                              		POP		ES
   143 000000B3 CF                              		IRETD
