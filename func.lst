     1 00000000                                 ; func
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; 制作目标文件的模式
     5 00000000                                 [INSTRSET "i486p"]				
     6 00000000                                 [BITS 32]						; 制作32位模式
     7 00000000                                 
     8 00000000                                 ; 制作目标文件的信息
     9 00000000                                 
    10 00000000                                 [FILE "func.nas"]				; 源文件名
    11 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt	; 程序中包含的函数名
    12 00000000                                 		GLOBAL	_io_in8, _io_in16, _io_in32
    13 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    14 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    15 00000000                                 		GLOBAL	_loadGdtr, _loadIdtr
    16 00000000                                 		GLOBAL	_loadCr0, _storeCr0
    17 00000000                                 		GLOBAL	_loadTr
    18 00000000                                 		GLOBAL	_asm_interruptHandler20, _asm_interruptHandler21, _asm_interruptHandler27, _asm_interruptHandler2c
    19 00000000                                 		GLOBAL	_memtest_sub
    20 00000000                                 		GLOBAL	_farJmp, _farCall
    21 00000000                                 		GLOBAL	_asm_dickApi
    22 00000000                                 		EXTERN	_interruptHandler20, _interruptHandler21, _interruptHandler27, _interruptHandler2c
    23 00000000                                 		EXTERN	_dickApi
    24 00000000                                 ; 实际的函数
    25 00000000                                 
    26                                          [SECTION .text]					; 目标文件中写了这些后再写程序
    27 00000000                                 
    28 00000000                                 _io_hlt:						; void io_hlt();
    29 00000000 F4                              		HLT
    30 00000001 C3                              		RET
    31 00000002                                 
    32 00000002                                 _io_cli:						; void io_cli();
    33 00000002 FA                              		CLI
    34 00000003 C3                              		RET
    35 00000004                                 
    36 00000004                                 _io_sti:						; void io_sti();
    37 00000004 FB                              		STI
    38 00000005 C3                              		RET
    39 00000006                                 		
    40 00000006                                 _io_stihlt:						; void io_stihlt();
    41 00000006 FB                              		STI
    42 00000007 F4                              		HLT
    43 00000008 C3                              		RET
    44 00000009                                 		
    45 00000009                                 _io_in8:						; void io_in8(int port);
    46 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; 端口
    47 0000000D B8 00000000                     		MOV		EAX,0
    48 00000012 EC                              		IN		AL,DX			; 从DX端口读取一字节数据到AL
    49 00000013 C3                              		RET
    50 00000014                                 		
    51 00000014                                 _io_in16:						; void io_in16(int port);
    52 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; 端口
    53 00000018 B8 00000000                     		MOV		EAX,0
    54 0000001D 66 ED                           		IN		AX,DX			; 从DX端口读取一字节数据到AX
    55 0000001F C3                              		RET
    56 00000020                                 		
    57 00000020                                 _io_in32:						; void io_in8(int port);
    58 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; 端口
    59 00000024 ED                              		IN		EAX,DX			; 从DX端口读取一字节数据到EAX
    60 00000025 C3                              		RET
    61 00000026                                 
    62 00000026                                 _io_out8:						; void io_out8(int port, int data);
    63 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; 端口port
    64 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; 数据data
    65 0000002E EE                              		OUT		DX,AL			; 将AL值写入端口
    66 0000002F C3                              		RET
    67 00000030                                 		
    68 00000030                                 _io_out16:						; void io_out16(int port, int data);
    69 00000030 8B 54 24 04                     		MOV 	EDX,[ESP+4]		; 端口port
    70 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; 数据data
    71 00000038 66 EF                           		OUT		DX,AX			; 将AL值写入端口
    72 0000003A C3                              		RET
    73 0000003B                                 		
    74 0000003B                                 _io_out32:						; void io_out32(int port, int data);
    75 0000003B 8B 54 24 04                     		MOV 	EDX,[ESP+4]		; 端口port
    76 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; 数据data
    77 00000043 EF                              		OUT		DX,EAX			; 将AL值写入端口
    78 00000044 C3                              		RET
    79 00000045                                 		
    80 00000045                                 _io_load_eflags:				; int io_load_eflags(void); 读取eflags
    81 00000045 9C                              		PUSHFD					; PUSH EFLAGS
    82 00000046 58                              		POP		EAX
    83 00000047 C3                              		RET
    84 00000048                                 
    85 00000048                                 _io_store_eflags:				; void io_store_eflags(int eflags); 写入eflags
    86 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    87 0000004C 50                              		PUSH		EAX
    88 0000004D 9D                              		POPFD					; POP EFLAGS
    89 0000004E C3                              		RET
    90 0000004F                                 		
    91 0000004F                                 _loadGdtr:						; void loadGdtr(int limit, int addr); 将指定段的上限和地址赋值给寄存器GDTR
    92 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]
    93 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    94 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    95 0000005E C3                              		RET
    96 0000005F                                 		
    97 0000005F                                 _loadIdtr:						; void loadIdtr(int limit, int  addr);
    98 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]
    99 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
   100 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
   101 0000006E C3                              		RET
   102 0000006F                                 		
   103 0000006F                                 _loadCr0:						; int loadCr0; 读取cr0寄存器
   104 0000006F 0F 20 C0                        		MOV		EAX,CR0
   105 00000072 C3                              		RET
   106 00000073                                 		
   107 00000073                                 _storeCr0:						; void storeCr0(int cr0) 写入cr0寄存器
   108 00000073 8B 44 24 04                     		MOV		EAX,[ESP+4]
   109 00000077 0F 22 C0                        		MOV		CR0,EAX
   110 0000007A C3                              		RET
   111 0000007B                                 
   112 0000007B                                 _loadTr:						; void loadTr(int tr) 为TR寄存器赋值
   113 0000007B 0F 00 5C 24 04                  		LTR		[ESP+4]
   114 00000080 C3                              		RET
   115 00000081                                 		
   116 00000081                                 _asm_interruptHandler20:
   117 00000081 06                              		PUSH	ES
   118 00000082 1E                              		PUSH	DS
   119 00000083 60                              		PUSHAD
   120 00000084 89 E0                           		MOV		EAX,ESP
   121 00000086 50                              		PUSH	EAX
   122 00000087 66 8C D0                        		MOV		AX,SS
   123 0000008A 8E D8                           		MOV		DS,AX
   124 0000008C 8E C0                           		MOV		ES,AX
   125 0000008E E8 [00000000]                   		CALL	_interruptHandler20
   126 00000093 58                              		POP		EAX
   127 00000094 61                              		POPAD
   128 00000095 1F                              		POP		DS
   129 00000096 07                              		POP		ES
   130 00000097 CF                              		IRETD
   131 00000098                                 		
   132 00000098                                 _asm_interruptHandler21:
   133 00000098 06                              		PUSH	ES
   134 00000099 1E                              		PUSH	DS
   135 0000009A 60                              		PUSHAD
   136 0000009B 89 E0                           		MOV		EAX,ESP
   137 0000009D 50                              		PUSH	EAX
   138 0000009E 66 8C D0                        		MOV		AX,SS
   139 000000A1 8E D8                           		MOV		DS,AX
   140 000000A3 8E C0                           		MOV		ES,AX
   141 000000A5 E8 [00000000]                   		CALL	_interruptHandler21
   142 000000AA 58                              		POP		EAX
   143 000000AB 61                              		POPAD
   144 000000AC 1F                              		POP		DS
   145 000000AD 07                              		POP		ES
   146 000000AE CF                              		IRETD
   147 000000AF                                 
   148 000000AF                                 _asm_interruptHandler27:
   149 000000AF 06                              		PUSH	ES
   150 000000B0 1E                              		PUSH	DS
   151 000000B1 60                              		PUSHAD
   152 000000B2 89 E0                           		MOV		EAX,ESP
   153 000000B4 50                              		PUSH	EAX
   154 000000B5 66 8C D0                        		MOV		AX,SS
   155 000000B8 8E D8                           		MOV		DS,AX
   156 000000BA 8E C0                           		MOV		ES,AX
   157 000000BC E8 [00000000]                   		CALL	_interruptHandler27
   158 000000C1 58                              		POP		EAX
   159 000000C2 61                              		POPAD
   160 000000C3 1F                              		POP		DS
   161 000000C4 07                              		POP		ES
   162 000000C5 CF                              		IRETD
   163 000000C6                                 
   164 000000C6                                 _asm_interruptHandler2c:
   165 000000C6 06                              		PUSH	ES
   166 000000C7 1E                              		PUSH	DS
   167 000000C8 60                              		PUSHAD
   168 000000C9 89 E0                           		MOV		EAX,ESP
   169 000000CB 50                              		PUSH	EAX
   170 000000CC 66 8C D0                        		MOV		AX,SS
   171 000000CF 8E D8                           		MOV		DS,AX
   172 000000D1 8E C0                           		MOV		ES,AX
   173 000000D3 E8 [00000000]                   		CALL	_interruptHandler2c
   174 000000D8 58                              		POP		EAX
   175 000000D9 61                              		POPAD
   176 000000DA 1F                              		POP		DS
   177 000000DB 07                              		POP		ES
   178 000000DC CF                              		IRETD
   179 000000DD                                 
   180 000000DD                                 ; 在寄存器EDX中存入功能号，可以通过INT调用不同函数
   181 000000DD                                 ; 功能号1	显示单个字符(AL = 字符ascii码)
   182 000000DD                                 ; 功能号2	显示字符串到0截止(EBX = 字符串地址)
   183 000000DD                                 ; 功能号3	显示指定长度字符串(EBX = 字符串地址)、
   184 000000DD                                 
   185 000000DD                                 _asm_dickApi:
   186 000000DD FB                              		STI
   187 000000DE 60                              		PUSHAD							; 保存寄存器值
   188 000000DF 60                              		PUSHAD							; 向dickApi传值
   189 000000E0 E8 [00000000]                   		CALL	_dickApi
   190 000000E5 83 C4 20                        		ADD		ESP,32
   191 000000E8 61                              		POPAD
   192 000000E9 CF                              		IRETD
   193 000000EA                                 
   194 000000EA                                 _memtest_sub:							; unsigned int memtest(unsigned int start, unsigned int end)
   195 000000EA 57                              		PUSH	EDI
   196 000000EB 56                              		PUSH	ESI
   197 000000EC 53                              		PUSH	EBX						; 由于要使用这些寄存器，保存以上三个寄存器的值
   198 000000ED BE AA55AA55                     		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   199 000000F2 BF 55AA55AA                     		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   200 000000F7 8B 44 24 10                     		MOV		EAX,[ESP+12+4]			; i = start; 由于EAX是通用寄存器，不需要保存（EBX是32位基址寄存器，需要保存）当然保存也没问题
   201 000000FB                                 		
   202 000000FB                                 mts_loop:
   203 000000FB 89 C3                           		MOV		EBX,EAX
   204 000000FD 81 C3 00000FFC                  		ADD		EBX,0xffc				; p = i + 0xffc;
   205 00000103 8B 13                           		MOV		EDX,[EBX]				; old = *p;
   206 00000105 89 33                           		MOV		[EBX],ESI				; *p = pat0;
   207 00000107 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   208 0000010A 3B 3B                           		CMP		EDI,[EBX]				; if(pat1 != *p) 
   209 0000010C 75 18                           		JNE		mts_fin					; goto mts_fin;
   210 0000010E 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   211 00000111 3B 33                           		CMP		ESI,[EBX]				; if(pat0 != *p)
   212 00000113 75 11                           		JNE		mts_fin					; goto mts_fin;
   213 00000115 89 13                           		MOV		[EBX],EDX				; *p = old;
   214 00000117 05 00001000                     		ADD 	EAX,0x1000				; i += 0x1000;
   215 0000011C 3B 44 24 14                     		CMP		EAX,[ESP+12+8]			; if(i <= end)
   216 00000120 76 D9                           		JBE		mts_loop				; goto mts_loop;
   217 00000122 5B                              		POP		EBX
   218 00000123 5E                              		POP		ESI
   219 00000124 5F                              		POP		EDI
   220 00000125 C3                              		RET
   221 00000126                                 		
   222 00000126                                 mts_fin:
   223 00000126 89 13                           		MOV		[EBX],EDX				; *p = old;
   224 00000128 5B                              		POP		EBX
   225 00000129 5E                              		POP		ESI
   226 0000012A 5F                              		POP		EDI
   227 0000012B C3                              		RET
   228 0000012C                                 
   229 0000012C                                 _farJmp:								; void farJmp(int eip, int cs);
   230 0000012C FF 6C 24 04                     		JMP		FAR [ESP+4]
   231 00000130 C3                              		RET
   232 00000131                                 
   233 00000131                                 _farCall:								; void farCall(int eip, int cs);
   234 00000131 FF 5C 24 04                     		CALL	FAR [ESP+4]
   235 00000135 C3                              		RET
