     1 00000000                                 ; func
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; 制作目标文件的模式
     5 00000000                                 [INSTRSET "i486p"]				
     6 00000000                                 [BITS 32]						; 制作32位模式
     7 00000000                                 
     8 00000000                                 ; 制作目标文件的信息
     9 00000000                                 
    10 00000000                                 [FILE "func.nas"]				; 源文件名
    11 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt	; 程序中包含的函数名
    12 00000000                                 		GLOBAL	_io_in8, _io_in16, _io_in32
    13 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    14 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    15 00000000                                 		GLOBAL	_loadGdtr, _loadIdtr
    16 00000000                                 		GLOBAL	_loadCr0, _storeCr0
    17 00000000                                 		GLOBAL	_asm_interruptHandler21, _asm_interruptHandler27, _asm_interruptHandler2c
    18 00000000                                 		GLOBAL	_memtest_sub
    19 00000000                                 		EXTERN	_interruptHandler21, _interruptHandler27, _interruptHandler2c
    20 00000000                                 ; 实际的函数
    21 00000000                                 
    22                                          [SECTION .text]					; 目标文件中写了这些后再写程序
    23 00000000                                 
    24 00000000                                 _io_hlt:						; void io_hlt();
    25 00000000 F4                              		HLT
    26 00000001 C3                              		RET
    27 00000002                                 
    28 00000002                                 _io_cli:						; void io_cli();
    29 00000002 FA                              		CLI
    30 00000003 C3                              		RET
    31 00000004                                 
    32 00000004                                 _io_sti:						; void io_sti();
    33 00000004 FB                              		STI
    34 00000005 C3                              		RET
    35 00000006                                 		
    36 00000006                                 _io_stihlt:						; void io_stihlt();
    37 00000006 FB                              		STI
    38 00000007 F4                              		HLT
    39 00000008 C3                              		RET
    40 00000009                                 		
    41 00000009                                 _io_in8:						; void io_in8(int port);
    42 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; 端口
    43 0000000D B8 00000000                     		MOV		EAX,0
    44 00000012 EC                              		IN		AL,DX			; 从DX端口读取一字节数据到AL
    45 00000013 C3                              		RET
    46 00000014                                 		
    47 00000014                                 _io_in16:						; void io_in16(int port);
    48 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; 端口
    49 00000018 B8 00000000                     		MOV		EAX,0
    50 0000001D 66 ED                           		IN		AX,DX			; 从DX端口读取一字节数据到AX
    51 0000001F C3                              		RET
    52 00000020                                 		
    53 00000020                                 _io_in32:						; void io_in8(int port);
    54 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; 端口
    55 00000024 ED                              		IN		EAX,DX			; 从DX端口读取一字节数据到EAX
    56 00000025 C3                              		RET
    57 00000026                                 
    58 00000026                                 _io_out8:						; void io_out8(int port, int data);
    59 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; 端口port
    60 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; 数据data
    61 0000002E EE                              		OUT		DX,AL			; 将AL值写入端口
    62 0000002F C3                              		RET
    63 00000030                                 		
    64 00000030                                 _io_out16:						; void io_out16(int port, int data);
    65 00000030 8B 54 24 04                     		MOV 	EDX,[ESP+4]		; 端口port
    66 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; 数据data
    67 00000038 66 EF                           		OUT		DX,AX			; 将AL值写入端口
    68 0000003A C3                              		RET
    69 0000003B                                 		
    70 0000003B                                 _io_out32:						; void io_out32(int port, int data);
    71 0000003B 8B 54 24 04                     		MOV 	EDX,[ESP+4]		; 端口port
    72 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; 数据data
    73 00000043 EF                              		OUT		DX,EAX			; 将AL值写入端口
    74 00000044 C3                              		RET
    75 00000045                                 		
    76 00000045                                 _io_load_eflags:				; int io_load_eflags(void); 读取eflags
    77 00000045 9C                              		PUSHFD					; PUSH EFLAGS
    78 00000046 58                              		POP		EAX
    79 00000047 C3                              		RET
    80 00000048                                 
    81 00000048                                 _io_store_eflags:				; void io_store_eflags(int eflags); 写入eflags
    82 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    83 0000004C 50                              		PUSH		EAX
    84 0000004D 9D                              		POPFD					; POP EFLAGS
    85 0000004E C3                              		RET
    86 0000004F                                 		
    87 0000004F                                 _loadGdtr:						; void loadGdtr(int limit, int addr); 将指定段的上限和地址赋值给寄存器GDTR
    88 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]
    89 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    90 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    91 0000005E C3                              		RET
    92 0000005F                                 		
    93 0000005F                                 _loadIdtr:						; void loadIdtr(int limit, int  addr);
    94 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]
    95 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
    96 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
    97 0000006E C3                              		RET
    98 0000006F                                 		
    99 0000006F                                 _loadCr0:						; int loadCr0; 读取cr0寄存器
   100 0000006F 0F 20 C0                        		MOV		EAX,CR0
   101 00000072 C3                              		RET
   102 00000073                                 		
   103 00000073                                 _storeCr0:						; void storeCr0(int cr0) 写入cr0寄存器
   104 00000073 8B 44 24 04                     		MOV		EAX,[ESP+4]
   105 00000077 0F 22 C0                        		MOV		CR0,EAX
   106 0000007A C3                              		RET
   107 0000007B                                 		
   108 0000007B                                 _asm_interruptHandler21:
   109 0000007B 06                              		PUSH	ES
   110 0000007C 1E                              		PUSH	DS
   111 0000007D 60                              		PUSHAD
   112 0000007E 89 E0                           		MOV		EAX,ESP
   113 00000080 50                              		PUSH	EAX
   114 00000081 66 8C D0                        		MOV		AX,SS
   115 00000084 8E D8                           		MOV		DS,AX
   116 00000086 8E C0                           		MOV		ES,AX
   117 00000088 E8 [00000000]                   		CALL	_interruptHandler21
   118 0000008D 58                              		POP		EAX
   119 0000008E 61                              		POPAD
   120 0000008F 1F                              		POP		DS
   121 00000090 07                              		POP		ES
   122 00000091 CF                              		IRETD
   123 00000092                                 
   124 00000092                                 _asm_interruptHandler27:
   125 00000092 06                              		PUSH	ES
   126 00000093 1E                              		PUSH	DS
   127 00000094 60                              		PUSHAD
   128 00000095 89 E0                           		MOV		EAX,ESP
   129 00000097 50                              		PUSH	EAX
   130 00000098 66 8C D0                        		MOV		AX,SS
   131 0000009B 8E D8                           		MOV		DS,AX
   132 0000009D 8E C0                           		MOV		ES,AX
   133 0000009F E8 [00000000]                   		CALL	_interruptHandler27
   134 000000A4 58                              		POP		EAX
   135 000000A5 61                              		POPAD
   136 000000A6 1F                              		POP		DS
   137 000000A7 07                              		POP		ES
   138 000000A8 CF                              		IRETD
   139 000000A9                                 
   140 000000A9                                 _asm_interruptHandler2c:
   141 000000A9 06                              		PUSH	ES
   142 000000AA 1E                              		PUSH	DS
   143 000000AB 60                              		PUSHAD
   144 000000AC 89 E0                           		MOV		EAX,ESP
   145 000000AE 50                              		PUSH	EAX
   146 000000AF 66 8C D0                        		MOV		AX,SS
   147 000000B2 8E D8                           		MOV		DS,AX
   148 000000B4 8E C0                           		MOV		ES,AX
   149 000000B6 E8 [00000000]                   		CALL	_interruptHandler2c
   150 000000BB 58                              		POP		EAX
   151 000000BC 61                              		POPAD
   152 000000BD 1F                              		POP		DS
   153 000000BE 07                              		POP		ES
   154 000000BF CF                              		IRETD
   155 000000C0                                 
   156 000000C0                                 _memtest_sub:							; unsigned int memtest(unsigned int start, unsigned int end)
   157 000000C0 57                              		PUSH	EDI
   158 000000C1 56                              		PUSH	ESI
   159 000000C2 53                              		PUSH	EBX						; 由于要使用这些寄存器，保存以上三个寄存器的值
   160 000000C3 BE AA55AA55                     		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   161 000000C8 BF 55AA55AA                     		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   162 000000CD 8B 44 24 10                     		MOV		EAX,[ESP+12+4]			; i = start; 由于EAX是通用寄存器，不需要保存（EBX是32位基址寄存器，需要保存）当然保存也没问题
   163 000000D1                                 		
   164 000000D1                                 mts_loop:
   165 000000D1 89 C3                           		MOV		EBX,EAX
   166 000000D3 81 C3 00000FFC                  		ADD		EBX,0xffc				; p = i + 0xffc;
   167 000000D9 8B 13                           		MOV		EDX,[EBX]				; old = *p;
   168 000000DB 89 33                           		MOV		[EBX],ESI				; *p = pat0;
   169 000000DD 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   170 000000E0 3B 3B                           		CMP		EDI,[EBX]				; if(pat1 != *p) 
   171 000000E2 75 18                           		JNE		mts_fin					; goto mts_fin;
   172 000000E4 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   173 000000E7 3B 33                           		CMP		ESI,[EBX]				; if(pat0 != *p)
   174 000000E9 75 11                           		JNE		mts_fin					; goto mts_fin;
   175 000000EB 89 13                           		MOV		[EBX],EDX				; *p = old;
   176 000000ED 05 00001000                     		ADD 	EAX,0x1000				; i += 0x1000;
   177 000000F2 3B 44 24 14                     		CMP		EAX,[ESP+12+8]			; if(i <= end)
   178 000000F6 76 D9                           		JBE		mts_loop				; goto mts_loop;
   179 000000F8 5B                              		POP		EBX
   180 000000F9 5E                              		POP		ESI
   181 000000FA 5F                              		POP		EDI
   182 000000FB C3                              		RET
   183 000000FC                                 		
   184 000000FC                                 mts_fin:
   185 000000FC 89 13                           		MOV		[EBX],EDX				; *p = old;
   186 000000FE 5B                              		POP		EBX
   187 000000FF 5E                              		POP		ESI
   188 00000100 5F                              		POP		EDI
   189 00000101 C3                              		RET
